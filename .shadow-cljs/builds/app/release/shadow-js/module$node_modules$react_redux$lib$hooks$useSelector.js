["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-redux/lib/hooks/useSelector.js"],"~:js","shadow$provide[99]=function(h,a,n,f){function e(a,e,f,h){var n=(0,q.useReducer)(function(a){return a+1},0)[1],r=(0,q.useMemo)(function(){return new m[\"default\"](f,h)},[f,h]),t=(0,q.useRef)(),v=(0,q.useRef)(),w=(0,q.useRef)();try{var F=a!==v.current||t.current?a(f.getState()):w.current}catch(ta){var D=\"An error occured while selecting the store state: \"+ta.message+\".\";t.current&&(D+=\"\\nThe error may be correlated with this previous error:\\n\"+t.current.stack+\"\\n\\nOriginal stack trace:\");throw Error(D);\n}z(function(){v.current=a;w.current=F;t.current=void 0});z(function(){function a(){try{var a=v.current(f.getState());if(e(a,w.current))return;w.current=a}catch(ea){t.current=ea}n({})}r.onStateChange=a;r.trySubscribe();a();return function(){return r.tryUnsubscribe()}},[f,r]);return F}function t(a){void 0===a&&(a=E.ReactReduxContext);var f=a===E.ReactReduxContext?w.useReduxContext:function(){return(0,q.useContext)(a)};return function(a,h){void 0===h&&(h=I);(0,x[\"default\"])(a,\"You must pass a selector to useSelectors\");\nvar m=f();return e(a,h,m.store,m.subscription)}}h=a(74);f.__esModule=!0;f.createSelectorHook=t;f.useSelector=void 0;var q=a(5),x=h(a(83)),w=a(96),m=h(a(78)),E=a(76),z=\"undefined\"!==typeof window?q.useLayoutEffect:q.useEffect,I=function(a,e){return a===e};a=t();f.useSelector=a}","~:source","shadow$provide[99] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.createSelectorHook = createSelectorHook;\nexports.useSelector = void 0;\n\nvar _react = require(\"react\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _useReduxContext2 = require(\"./useReduxContext\");\n\nvar _Subscription = _interopRequireDefault(require(\"../utils/Subscription\"));\n\nvar _Context = require(\"../components/Context\");\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = (0, _react.useReducer)(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = (0, _react.useMemo)(function () {\n    return new _Subscription[\"default\"](store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\n  var latestSelector = (0, _react.useRef)();\n  var latestSelectedState = (0, _react.useRef)();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\n    return (0, _react.useContext)(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    (0, _invariant[\"default\"])(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\n\nvar useSelector = createSelectorHook();\nexports.useSelector = useSelector;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$invariant$browser","~$module$node_modules$react_redux$lib$components$Context","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$react_redux$lib$utils$Subscription","~$module$node_modules$react_redux$lib$hooks$useReduxContext"]],"~:properties",["^5",["__esModule","useSelector","current","createSelectorHook","onStateChange"]],"~:compiled-at",1579150619339,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_redux$lib$hooks$useSelector.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-redux/lib/hooks/useSelector.js\"],\n\"sourcesContent\":[\"shadow$provide[99] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nexports.__esModule = true;\\nexports.createSelectorHook = createSelectorHook;\\nexports.useSelector = void 0;\\n\\nvar _react = require(\\\"react\\\");\\n\\nvar _invariant = _interopRequireDefault(require(\\\"invariant\\\"));\\n\\nvar _useReduxContext2 = require(\\\"./useReduxContext\\\");\\n\\nvar _Subscription = _interopRequireDefault(require(\\\"../utils/Subscription\\\"));\\n\\nvar _Context = require(\\\"../components/Context\\\");\\n\\n// React currently throws a warning when using useLayoutEffect on the server.\\n// To get around it, we can conditionally useEffect on the server (no-op) and\\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\\n// subscription callback always has the selector from the latest render commit\\n// available, otherwise a store update may happen between render and the effect,\\n// which may cause missed updates; we also must ensure the store subscription\\n// is created synchronously, otherwise a store update may occur before the\\n// subscription is created and an inconsistent state may be observed\\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;\\n\\nvar refEquality = function refEquality(a, b) {\\n  return a === b;\\n};\\n\\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\\n  var _useReducer = (0, _react.useReducer)(function (s) {\\n    return s + 1;\\n  }, 0),\\n      forceRender = _useReducer[1];\\n\\n  var subscription = (0, _react.useMemo)(function () {\\n    return new _Subscription[\\\"default\\\"](store, contextSub);\\n  }, [store, contextSub]);\\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\\n  var latestSelector = (0, _react.useRef)();\\n  var latestSelectedState = (0, _react.useRef)();\\n  var selectedState;\\n\\n  try {\\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\\n      selectedState = selector(store.getState());\\n    } else {\\n      selectedState = latestSelectedState.current;\\n    }\\n  } catch (err) {\\n    var errorMessage = \\\"An error occured while selecting the store state: \\\" + err.message + \\\".\\\";\\n\\n    if (latestSubscriptionCallbackError.current) {\\n      errorMessage += \\\"\\\\nThe error may be correlated with this previous error:\\\\n\\\" + latestSubscriptionCallbackError.current.stack + \\\"\\\\n\\\\nOriginal stack trace:\\\";\\n    }\\n\\n    throw new Error(errorMessage);\\n  }\\n\\n  useIsomorphicLayoutEffect(function () {\\n    latestSelector.current = selector;\\n    latestSelectedState.current = selectedState;\\n    latestSubscriptionCallbackError.current = undefined;\\n  });\\n  useIsomorphicLayoutEffect(function () {\\n    function checkForUpdates() {\\n      try {\\n        var newSelectedState = latestSelector.current(store.getState());\\n\\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\\n          return;\\n        }\\n\\n        latestSelectedState.current = newSelectedState;\\n      } catch (err) {\\n        // we ignore all errors here, since when the component\\n        // is re-rendered, the selectors are called again, and\\n        // will throw again, if neither props nor store state\\n        // changed\\n        latestSubscriptionCallbackError.current = err;\\n      }\\n\\n      forceRender({});\\n    }\\n\\n    subscription.onStateChange = checkForUpdates;\\n    subscription.trySubscribe();\\n    checkForUpdates();\\n    return function () {\\n      return subscription.tryUnsubscribe();\\n    };\\n  }, [store, subscription]);\\n  return selectedState;\\n}\\n/**\\n * Hook factory, which creates a `useSelector` hook bound to a given context.\\n *\\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\\n * @returns {Function} A `useSelector` hook bound to the specified context.\\n */\\n\\n\\nfunction createSelectorHook(context) {\\n  if (context === void 0) {\\n    context = _Context.ReactReduxContext;\\n  }\\n\\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\\n    return (0, _react.useContext)(context);\\n  };\\n  return function useSelector(selector, equalityFn) {\\n    if (equalityFn === void 0) {\\n      equalityFn = refEquality;\\n    }\\n\\n    (0, _invariant[\\\"default\\\"])(selector, \\\"You must pass a selector to useSelectors\\\");\\n\\n    var _useReduxContext = useReduxContext(),\\n        store = _useReduxContext.store,\\n        contextSub = _useReduxContext.subscription;\\n\\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\\n  };\\n}\\n/**\\n * A hook to access the redux store's state. This hook takes a selector function\\n * as an argument. The selector is called with the store state.\\n *\\n * This hook takes an optional equality comparison function as the second parameter\\n * that allows you to customize the way the selected state is compared to determine\\n * whether the component needs to be re-rendered.\\n *\\n * @param {Function} selector the selector function\\n * @param {Function=} equalityFn the function that will be used to determine equality\\n *\\n * @returns {any} the selected state\\n *\\n * @example\\n *\\n * import React from 'react'\\n * import { useSelector } from 'react-redux'\\n *\\n * export const CounterComponent = () => {\\n *   const counter = useSelector(state => state.counter)\\n *   return <div>{counter}</div>\\n * }\\n */\\n\\n\\nvar useSelector = createSelectorHook();\\nexports.useSelector = useSelector;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"useSelectorWithStoreAndSubscription\",\"selector\",\"equalityFn\",\"store\",\"contextSub\",\"forceRender\",\"_useReducer\",\"_react\",\"useReducer\",\"s\",\"subscription\",\"useMemo\",\"_Subscription\",\"latestSubscriptionCallbackError\",\"useRef\",\"latestSelector\",\"latestSelectedState\",\"selectedState\",\"current\",\"getState\",\"err\",\"errorMessage\",\"message\",\"stack\",\"Error\",\"useIsomorphicLayoutEffect\",\"undefined\",\"checkForUpdates\",\"newSelectedState\",\"onStateChange\",\"trySubscribe\",\"tryUnsubscribe\",\"createSelectorHook\",\"context\",\"_Context\",\"ReactReduxContext\",\"useReduxContext\",\"_useReduxContext2\",\"useContext\",\"useSelector\",\"refEquality\",\"_invariant\",\"_useReduxContext\",\"_interopRequireDefault\",\"__esModule\",\"window\",\"useLayoutEffect\",\"useEffect\",\"a\",\"b\"]\n}\n"]