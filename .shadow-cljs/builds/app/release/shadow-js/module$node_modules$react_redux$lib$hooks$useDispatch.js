["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-redux/lib/hooks/useDispatch.js"],"~:js","shadow$provide[98]=function(h,a,n,f){function e(a){void 0===a&&(a=t.ReactReduxContext);var e=a===t.ReactReduxContext?q.useStore:(0,q.createStoreHook)(a);return function(){return e().dispatch}}f.__esModule=!0;f.createDispatchHook=e;f.useDispatch=void 0;var t=a(76),q=a(97);h=e();f.useDispatch=h}","~:source","shadow$provide[98] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.createDispatchHook = createDispatchHook;\nexports.useDispatch = void 0;\n\nvar _Context = require(\"../components/Context\");\n\nvar _useStore = require(\"./useStore\");\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\n\nvar useDispatch = createDispatchHook();\nexports.useDispatch = useDispatch;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_redux$lib$components$Context","~$shadow.js","~$module$node_modules$react_redux$lib$hooks$useStore"]],"~:properties",["^5",["__esModule","useDispatch","createDispatchHook"]],"~:compiled-at",1579150619338,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_redux$lib$hooks$useDispatch.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,EAAf,CAAA,CAAqB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC,CAiB7DC,QAASA,EAAkB,CAACC,CAAD,CAAU,CACnB,IAAK,EAArB,GAAIA,CAAJ,GACEA,CADF,CACYC,CAAAC,kBADZ,CAIA,KAAIC,EAAWH,CAAA,GAAYC,CAAAC,kBAAZ,CAAyCE,CAAAD,SAAzC,CAA8D,CAAC,CAAA,CAAGC,CAAAC,gBAAJ,EAA+BL,CAA/B,CAC7E,OAAOM,SAAoB,EAAG,CAE5B,MADYH,EAAAI,EACLC,SAFqB,CANK,CAdrCV,CAAAW,WAAA,CAAqB,CAAA,CACrBX,EAAAC,mBAAA,CAA6BA,CAC7BD,EAAAQ,YAAA,CAAsB,IAAK,EAE3B,KAAIL,EAAWL,CAAA,CAAQ,EAAR,CAAf,CAEIQ,EAAYR,CAAA,CAAQ,EAAR,CA0CZU,EAAAA,CAAcP,CAAA,EAClBD,EAAAQ,YAAA,CAAsBA,CApDuC;\",\n\"sources\":[\"node_modules/react-redux/lib/hooks/useDispatch.js\"],\n\"sourcesContent\":[\"shadow$provide[98] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.createDispatchHook = createDispatchHook;\\nexports.useDispatch = void 0;\\n\\nvar _Context = require(\\\"../components/Context\\\");\\n\\nvar _useStore = require(\\\"./useStore\\\");\\n\\n/**\\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\\n *\\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\\n * @returns {Function} A `useDispatch` hook bound to the specified context.\\n */\\nfunction createDispatchHook(context) {\\n  if (context === void 0) {\\n    context = _Context.ReactReduxContext;\\n  }\\n\\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\\n  return function useDispatch() {\\n    var store = useStore();\\n    return store.dispatch;\\n  };\\n}\\n/**\\n * A hook to access the redux `dispatch` function.\\n *\\n * @returns {any|function} redux store's `dispatch` function\\n *\\n * @example\\n *\\n * import React, { useCallback } from 'react'\\n * import { useDispatch } from 'react-redux'\\n *\\n * export const CounterComponent = ({ value }) => {\\n *   const dispatch = useDispatch()\\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\\n *   return (\\n *     <div>\\n *       <span>{value}</span>\\n *       <button onClick={increaseCounter}>Increase counter</button>\\n *     </div>\\n *   )\\n * }\\n */\\n\\n\\nvar useDispatch = createDispatchHook();\\nexports.useDispatch = useDispatch;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"createDispatchHook\",\"context\",\"_Context\",\"ReactReduxContext\",\"useStore\",\"_useStore\",\"createStoreHook\",\"useDispatch\",\"store\",\"dispatch\",\"__esModule\"]\n}\n"]