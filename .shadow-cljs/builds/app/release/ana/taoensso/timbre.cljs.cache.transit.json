["^ ","~:output",["^ ","~:js","goog.provide('taoensso.timbre');\nif(cljs.core.vector_QMARK_(taoensso.encore.encore_version)){\ntaoensso.encore.assert_min_encore_version(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(87),(0)], null));\n} else {\ntaoensso.encore.assert_min_encore_version(2.87);\n}\n/**\n * Default (fn [data]) -> string output fn.\n *   Use`(partial default-output-fn <opts-map>)` to modify default opts.\n */\ntaoensso.timbre.default_output_fn = (function taoensso$timbre$default_output_fn(var_args){\nvar G__11614 = arguments.length;\nswitch (G__11614) {\ncase 1:\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ntaoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1 = (function (data){\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2(null,data);\n});\n\ntaoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2 = (function (opts,data){\nvar map__11615 = opts;\nvar map__11615__$1 = (((((!((map__11615 == null))))?(((((map__11615.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11615.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11615):map__11615);\nvar no_stacktrace_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11615__$1,new cljs.core.Keyword(null,\"no-stacktrace?\",\"no-stacktrace?\",1701072694));\nvar stacktrace_fonts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11615__$1,new cljs.core.Keyword(null,\"stacktrace-fonts\",\"stacktrace-fonts\",830799382));\nvar map__11616 = data;\nvar map__11616__$1 = (((((!((map__11616 == null))))?(((((map__11616.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11616.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11616):map__11616);\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\nvar _QMARK_file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675));\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11616__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case(cljs.core.name(level))),\" \",\"[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4131__auto__ = _QMARK_ns_str;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = _QMARK_file;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nreturn \"?\";\n}\n}\n})()),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4131__auto__ = _QMARK_line;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"?\";\n}\n})()),\"] - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(cljs.core.truth_(no_stacktrace_QMARK_)?null:(function (){var temp__5735__auto__ = _QMARK_err;\nif(cljs.core.truth_(temp__5735__auto__)){\nvar err = temp__5735__auto__;\nreturn [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,opts) : taoensso.timbre.stacktrace.call(null,err,opts)))].join('');\n} else {\nreturn null;\n}\n})())].join('');\n});\n\ntaoensso.timbre.default_output_fn.cljs$lang$maxFixedArity = 2;\n\n\ntaoensso.timbre.println_appender = taoensso.timbre.appenders.core.println_appender;\ntaoensso.timbre.console_appender = taoensso.timbre.appenders.core.console_appender;\n/**\n * Example (+default) Timbre v4 config map.\n * \n *   APPENDERS\n *  An appender is a map with keys:\n *    :min-level       ; Level keyword, or nil (=> no minimum level)\n *    :enabled?        ;\n *    :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n *    :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n *    :output-fn       ; Optional override for inherited (fn [data]) -> string\n *    :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n *    :ns-whitelist    ; Optional, stacks with active config's whitelist\n *    :ns-blacklist    ; Optional, stacks with active config's blacklist\n *    :fn              ; (fn [data]) -> side effects, with keys described below\n * \n *  An appender's fn takes a single data map with keys:\n *    :config          ; Entire config map (this map, etc.)\n *    :appender-id     ; Id of appender currently dispatching\n *    :appender        ; Entire map of appender currently dispatching\n *    :instant         ; Platform date (java.util.Date or js/Date)\n *    :level           ; Keyword\n *    :error-level?    ; Is level e/o #{:error :fatal}?\n *    :?ns-str         ; String,  or nil\n *    :?file           ; String,  or nil\n *    :?line           ; Integer, or nil ; Waiting on CLJ-865\n *    :?err            ; First-arg platform error, or nil\n *    :vargs           ; Vector of raw args\n *    :output_         ; Forceable - final formatted output string created\n *                     ; by calling (output-fn <this-data-map>)\n *    :msg_            ; Forceable - args as a string\n *    :timestamp_      ; Forceable - string (clj only)\n *    :hostname_       ; Forceable - string (clj only)\n *    :output-fn       ; (fn [data]) -> formatted output string\n *                     ; (see `default-output-fn` for details)\n *    :context         ; *context* value at log time (see `with-context`)\n * \n *    **NB** - any keys not specifically documented here should be\n *    considered private / subject to change without notice.\n * \n *   MIDDLEWARE\n *  Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n *  transform the data map dispatched to appender fns. If any middleware\n *  returns nil, NO dispatch will occur (i.e. the event will be filtered).\n * \n *   The `example-config` source code contains further settings and details.\n *   See also `set-config!`, `merge-config!`, `set-level!`.\n */\ntaoensso.timbre.example_config = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"console\",\"console\",1228072057),(function (){var G__11619 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1(G__11619) : taoensso.timbre.console_appender.call(null,G__11619));\n})()], null)], null);\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre._STAR_config_STAR_ !== 'undefined')){\n} else {\n/**\n * See `example-config` for info.\n */\ntaoensso.timbre._STAR_config_STAR_ = taoensso.timbre.example_config;\n}\ntaoensso.timbre.swap_config_BANG_ = (function taoensso$timbre$swap_config_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___11713 = arguments.length;\nvar i__4731__auto___11714 = (0);\nwhile(true){\nif((i__4731__auto___11714 < len__4730__auto___11713)){\nargs__4736__auto__.push((arguments[i__4731__auto___11714]));\n\nvar G__11717 = (i__4731__auto___11714 + (1));\ni__4731__auto___11714 = G__11717;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn taoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\ntaoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn taoensso.timbre._STAR_config_STAR_ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,taoensso.timbre._STAR_config_STAR_,args);\n});\n\ntaoensso.timbre.swap_config_BANG_.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\ntaoensso.timbre.swap_config_BANG_.cljs$lang$applyTo = (function (seq11620){\nvar G__11621 = cljs.core.first(seq11620);\nvar seq11620__$1 = cljs.core.next(seq11620);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__11621,seq11620__$1);\n});\n\ntaoensso.timbre.set_config_BANG_ = (function taoensso$timbre$set_config_BANG_(m){\nreturn taoensso.timbre.swap_config_BANG_((function (_old){\nreturn m;\n}));\n});\ntaoensso.timbre.merge_config_BANG_ = (function taoensso$timbre$merge_config_BANG_(m){\nreturn taoensso.timbre.swap_config_BANG_((function (old){\nreturn taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([old,m], 0));\n}));\n});\ntaoensso.timbre.set_level_BANG_ = (function taoensso$timbre$set_level_BANG_(level){\nreturn taoensso.timbre.swap_config_BANG_((function (m){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),level);\n}));\n});\ntaoensso.timbre._levels_vec = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\ntaoensso.timbre._levels_set = cljs.core.set(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null));\ntaoensso.timbre._levels_map = cljs.core.zipmap(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null),cljs.core.next(cljs.core.range.cljs$core$IFn$_invoke$arity$0()));\ntaoensso.timbre.valid_level_QMARK_ = (function taoensso$timbre$valid_level_QMARK_(x){\nif(cljs.core.truth_((taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x)))){\nreturn true;\n} else {\nreturn false;\n}\n});\ntaoensso.timbre.valid_level = (function taoensso$timbre$valid_level(x){\nvar or__4131__auto__ = (taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid Timbre logging level\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),x], null));\n}\n});\ntaoensso.timbre.level_GT__EQ_ = (function taoensso$timbre$level_GT__EQ_(x,y){\nreturn ((function (){var G__11623 = taoensso.timbre.valid_level(x);\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__11623) : taoensso.timbre._levels_map.call(null,G__11623));\n})() >= (function (){var G__11624 = taoensso.timbre.valid_level(y);\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__11624) : taoensso.timbre._levels_map.call(null,G__11624));\n})());\n});\ntaoensso.timbre._compile_ns_filter = taoensso.encore.memoize_(taoensso.encore.compile_ns_filter);\n/**\n * Returns true iff given ns passes white/black lists.\n */\ntaoensso.timbre.ns_filter = taoensso.encore.memoize_((function (whitelist,blacklist,_QMARK_ns){\nvar fexpr__11625 = (taoensso.timbre._compile_ns_filter.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre._compile_ns_filter.cljs$core$IFn$_invoke$arity$2(whitelist,blacklist) : taoensso.timbre._compile_ns_filter.call(null,whitelist,blacklist));\nreturn (fexpr__11625.cljs$core$IFn$_invoke$arity$1 ? fexpr__11625.cljs$core$IFn$_invoke$arity$1(_QMARK_ns) : fexpr__11625.call(null,_QMARK_ns));\n}));\n/**\n * Runtime check: would Timbre currently log at the given logging level?\n *  * `?ns-str` arg required to support ns filtering\n *  * `config`  arg required to support non-global config\n */\ntaoensso.timbre.may_log_QMARK_ = (function taoensso$timbre$may_log_QMARK_(var_args){\nvar G__11634 = arguments.length;\nswitch (G__11634) {\ncase 1:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ntaoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (level){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,null,null);\n});\n\ntaoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (level,_QMARK_ns_str){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,null);\n});\n\ntaoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (level,_QMARK_ns_str,_QMARK_config){\nvar config = (function (){var or__4131__auto__ = _QMARK_config;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn taoensso.timbre._STAR_config_STAR_;\n}\n})();\nvar min_level = cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"report\",\"report\",1394055010));\nreturn ((taoensso.timbre.level_GT__EQ_(level,min_level)) && (cljs.core.boolean$((function (){var G__11643 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774));\nvar G__11644 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142));\nvar G__11645 = _QMARK_ns_str;\nreturn (taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3 ? taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3(G__11643,G__11644,G__11645) : taoensso.timbre.ns_filter.call(null,G__11643,G__11644,G__11645));\n})())) && (true));\n});\n\ntaoensso.timbre.may_log_QMARK_.cljs$lang$maxFixedArity = 3;\n\ntaoensso.timbre.str_join = (function taoensso$timbre$str_join(xs){\nreturn taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (x){\nvar x__$1 = taoensso.encore.nil__GT_str(x);\nif(cljs.core.record_QMARK_(x__$1)){\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__$1], 0));\n} else {\nreturn x__$1;\n\n}\n})),xs);\n});\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre.get_rate_limiter !== 'undefined')){\n} else {\ntaoensso.timbre.get_rate_limiter = taoensso.encore.memoize_((function (appender_id,specs){\nreturn taoensso.encore.limiter(specs);\n}));\n}\n/**\n * General-purpose dynamic logging context\n */\ntaoensso.timbre._STAR_context_STAR_ = null;\ntaoensso.timbre.vrest = (function taoensso$timbre$vrest(v){\nif((cljs.core.count(v) > (1))){\nreturn cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(v,(1));\n} else {\nreturn cljs.core.PersistentVector.EMPTY;\n}\n});\n/**\n * vargs -> [?err ?meta ?msg-fmt api-vargs]\n */\ntaoensso.timbre.parse_vargs = (function taoensso$timbre$parse_vargs(_QMARK_err,msg_type,vargs){\nvar auto_error_QMARK_ = (function (){var G__11650 = _QMARK_err;\nvar G__11651 = new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492);\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__11650,G__11651) : taoensso.encore.kw_identical_QMARK_.call(null,G__11650,G__11651));\n})();\nvar fmt_msg_QMARK_ = (function (){var G__11652 = msg_type;\nvar G__11653 = new cljs.core.Keyword(null,\"f\",\"f\",-1597136552);\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__11652,G__11653) : taoensso.encore.kw_identical_QMARK_.call(null,G__11652,G__11653));\n})();\nvar vec__11647 = vargs;\nvar v0 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11647,(0),null);\nif(cljs.core.truth_((function (){var and__4120__auto__ = auto_error_QMARK_;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn taoensso.encore.error_QMARK_(v0);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nvar _QMARK_err__$1 = v0;\nvar _QMARK_meta = null;\nvar vargs__$1 = taoensso.timbre.vrest(vargs);\nvar _QMARK_msg_fmt = (cljs.core.truth_(fmt_msg_QMARK_)?(function (){var vec__11654 = vargs__$1;\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11654,(0),null);\nreturn v0__$1;\n})():null);\nvar vargs__$2 = (cljs.core.truth_(fmt_msg_QMARK_)?taoensso.timbre.vrest(vargs__$1):vargs__$1);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [_QMARK_err__$1,_QMARK_meta,_QMARK_msg_fmt,vargs__$2], null);\n} else {\nvar _QMARK_meta = (cljs.core.truth_((function (){var and__4120__auto__ = cljs.core.map_QMARK_(v0);\nif(and__4120__auto__){\nreturn new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v0));\n} else {\nreturn and__4120__auto__;\n}\n})())?v0:null);\nvar _QMARK_err__$1 = (function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"err\",\"err\",-2089457205).cljs$core$IFn$_invoke$arity$1(_QMARK_meta);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nif(cljs.core.truth_(auto_error_QMARK_)){\nreturn null;\n} else {\nreturn _QMARK_err;\n}\n}\n})();\nvar _QMARK_meta__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(_QMARK_meta,new cljs.core.Keyword(null,\"err\",\"err\",-2089457205));\nvar vargs__$1 = (cljs.core.truth_(_QMARK_meta__$1)?taoensso.timbre.vrest(vargs):vargs);\nvar _QMARK_msg_fmt = (cljs.core.truth_(fmt_msg_QMARK_)?(function (){var vec__11660 = vargs__$1;\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11660,(0),null);\nreturn v0__$1;\n})():null);\nvar vargs__$2 = (cljs.core.truth_(fmt_msg_QMARK_)?taoensso.timbre.vrest(vargs__$1):vargs__$1);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [_QMARK_err__$1,_QMARK_meta__$1,_QMARK_msg_fmt,vargs__$2], null);\n}\n});\n/**\n * Core low-level log fn. Implementation detail!\n */\ntaoensso.timbre._log_BANG_ = (function taoensso$timbre$_log_BANG_(var_args){\nvar G__11674 = arguments.length;\nswitch (G__11674) {\ncase 9:\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]));\n\nbreak;\ncase 10:\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,null);\n});\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,callsite_id){\nif(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,config)){\nvar instant_11736 = taoensso.encore.now_dt();\nvar context_11737 = taoensso.timbre._STAR_context_STAR_;\nvar vargs_11738 = cljs.core.deref(vargs_);\nvar vec__11676_11739 = taoensso.timbre.parse_vargs(_QMARK_err,msg_type,vargs_11738);\nvar _QMARK_err_11740__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11676_11739,(0),null);\nvar _QMARK_meta_11741 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11676_11739,(1),null);\nvar _QMARK_msg_fmt_11742 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11676_11739,(2),null);\nvar vargs_11743__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11676_11739,(3),null);\nvar data_11744 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2((function (){var or__4131__auto__ = _QMARK_base_data;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"instant\",\"instant\",655498374),new cljs.core.Keyword(null,\"config\",\"config\",994861415),new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),new cljs.core.Keyword(null,\"error-level?\",\"error-level?\",778415885),new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966),new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"?err\",\"?err\",549653299),new cljs.core.Keyword(null,\"context\",\"context\",-830191113),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),new cljs.core.Keyword(null,\"?err_\",\"?err_\",789480858),new cljs.core.Keyword(null,\"?meta\",\"?meta\",-793560773),new cljs.core.Keyword(null,\"?msg-fmt\",\"?msg-fmt\",-852453891)],[instant_11736,config,vargs_11743__$1,_QMARK_file,(function (){var fexpr__11679 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),null,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null);\nreturn (fexpr__11679.cljs$core$IFn$_invoke$arity$1 ? fexpr__11679.cljs$core$IFn$_invoke$arity$1(level) : fexpr__11679.call(null,level));\n})(),_QMARK_ns_str,level,_QMARK_err_11740__$1,context_11737,_QMARK_line,(new cljs.core.Delay(((function (instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1){\nreturn (function (){\nreturn _QMARK_err_11740__$1;\n});})(instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1))\n,null)),_QMARK_meta_11741,_QMARK_msg_fmt_11742]));\nvar _QMARK_data_11745 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744){\nreturn (function (acc,mf){\nvar result = (mf.cljs$core$IFn$_invoke$arity$1 ? mf.cljs$core$IFn$_invoke$arity$1(acc) : mf.call(null,acc));\nif((result == null)){\nreturn cljs.core.reduced(null);\n} else {\nreturn result;\n}\n});})(instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744))\n,data_11744,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504).cljs$core$IFn$_invoke$arity$1(config));\nvar temp__5735__auto___11759 = _QMARK_data_11745;\nif(cljs.core.truth_(temp__5735__auto___11759)){\nvar data_11760__$1 = temp__5735__auto___11759;\nvar map__11681_11761 = data_11760__$1;\nvar map__11681_11762__$1 = (((((!((map__11681_11761 == null))))?(((((map__11681_11761.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11681_11761.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11681_11761):map__11681_11761);\nvar vargs_11763__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11681_11762__$1,new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273));\nvar data_11764__$2 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(data_11760__$1,new cljs.core.Keyword(null,\"vargs_\",\"vargs_\",552132148),(new cljs.core.Delay(((function (map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745){\nreturn (function (){\nreturn vargs_11763__$2;\n});})(map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745))\n,null)));\nvar data_11765__$3 = taoensso.encore.assoc_nx.cljs$core$IFn$_invoke$arity$variadic(data_11764__$2,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000),(new cljs.core.Delay(((function (map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745){\nreturn (function (){\nvar G__11683 = msg_type;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__11683)){\nreturn \"\";\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"p\",\"p\",151049309),G__11683)){\nreturn taoensso.timbre.str_join(vargs_11763__$2);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),G__11683)){\nif(typeof _QMARK_msg_fmt_11742 === 'string'){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Timbre format-style logging call without a format pattern (string)\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"level\",\"level\",1290497552),level,new cljs.core.Keyword(null,\"location\",\"location\",1815599388),[cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4131__auto__ = _QMARK_ns_str;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = _QMARK_file;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nreturn \"?\";\n}\n}\n})()),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4131__auto__ = _QMARK_line;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn \"?\";\n}\n})())].join('')], null));\n}\n\nreturn taoensso.encore.format_STAR_(_QMARK_msg_fmt_11742,vargs_11763__$2);\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__11683)].join('')));\n\n}\n}\n}\n});})(map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745))\n,null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612),(new cljs.core.Delay(((function (map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745){\nreturn (function (){\nreturn cljs.core.hash(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [callsite_id,_QMARK_msg_fmt_11742,cljs.core.get.cljs$core$IFn$_invoke$arity$3(_QMARK_meta_11741,new cljs.core.Keyword(null,\"hash\",\"hash\",-13781596),vargs_11763__$2)], null));\n});})(map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745))\n,null))], 0));\nvar output_fn1_11766 = taoensso.encore.memoize_(cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn));\ncljs.core.reduce_kv(((function (map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11765__$3,output_fn1_11766,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745){\nreturn (function (_,id,appender){\nif(cljs.core.truth_((function (){var and__4120__auto__ = new cljs.core.Keyword(null,\"enabled?\",\"enabled?\",-1376075057).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn taoensso.timbre.level_GT__EQ_(level,(function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"min-level\",\"min-level\",1634684919).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415);\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})())){\nif(cljs.core.truth_((function (){var G__11684 = new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774).cljs$core$IFn$_invoke$arity$1(appender);\nvar G__11685 = new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142).cljs$core$IFn$_invoke$arity$1(appender);\nvar G__11686 = _QMARK_ns_str;\nreturn (taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3 ? taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3(G__11684,G__11685,G__11686) : taoensso.timbre.ns_filter.call(null,G__11684,G__11685,G__11686));\n})())){\nvar rate_limit_specs = new cljs.core.Keyword(null,\"rate-limit\",\"rate-limit\",1748082022).cljs$core$IFn$_invoke$arity$1(appender);\nvar rate_limit_okay_QMARK_ = (function (){var or__4131__auto__ = cljs.core.empty_QMARK_(rate_limit_specs);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar rl_fn = (taoensso.timbre.get_rate_limiter.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre.get_rate_limiter.cljs$core$IFn$_invoke$arity$2(id,rate_limit_specs) : taoensso.timbre.get_rate_limiter.call(null,id,rate_limit_specs));\nreturn cljs.core.not((function (){var G__11689 = cljs.core.force(new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612).cljs$core$IFn$_invoke$arity$1(data_11765__$3));\nreturn (rl_fn.cljs$core$IFn$_invoke$arity$1 ? rl_fn.cljs$core$IFn$_invoke$arity$1(G__11689) : rl_fn.call(null,G__11689));\n})());\n}\n})();\nif(rate_limit_okay_QMARK_){\nvar map__11691 = appender;\nvar map__11691__$1 = (((((!((map__11691 == null))))?(((((map__11691.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__11691.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__11691):map__11691);\nvar apfn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11691__$1,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\nvar async_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11691__$1,new cljs.core.Keyword(null,\"async?\",\"async?\",1523057758));\nvar output_fn = (function (){var f = new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_((function (){var or__4131__auto__ = (f == null);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar G__11698 = f;\nvar G__11699 = new cljs.core.Keyword(null,\"inherit\",\"inherit\",-1840815422);\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__11698,G__11699) : taoensso.encore.kw_identical_QMARK_.call(null,G__11698,G__11699));\n}\n})())){\nreturn output_fn1_11766;\n} else {\nreturn f;\n}\n})();\nvar output_ = (new cljs.core.Delay(((function (map__11691,map__11691__$1,apfn,async_QMARK_,output_fn,rate_limit_specs,rate_limit_okay_QMARK_,map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11765__$3,output_fn1_11766,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745){\nreturn (function (){\nreturn (output_fn.cljs$core$IFn$_invoke$arity$1 ? output_fn.cljs$core$IFn$_invoke$arity$1(data_11765__$3) : output_fn.call(null,data_11765__$3));\n});})(map__11691,map__11691__$1,apfn,async_QMARK_,output_fn,rate_limit_specs,rate_limit_okay_QMARK_,map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11765__$3,output_fn1_11766,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745))\n,null));\nvar data__$4 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(data_11765__$3,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"appender-id\",\"appender-id\",-1917983538),id,new cljs.core.Keyword(null,\"appender\",\"appender\",1267426510),appender,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),output_fn,new cljs.core.Keyword(null,\"output_\",\"output_\",-36797880),output_], null));\nvar _QMARK_data__$1 = (function (){var temp__5733__auto__ = new cljs.core.Keyword(null,\"middleware-fn\",\"middleware-fn\",-61585752).cljs$core$IFn$_invoke$arity$1(appender);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar mfn = temp__5733__auto__;\nreturn (mfn.cljs$core$IFn$_invoke$arity$1 ? mfn.cljs$core$IFn$_invoke$arity$1(data__$4) : mfn.call(null,data__$4));\n} else {\nreturn data__$4;\n}\n})();\nvar temp__5735__auto____$1 = _QMARK_data__$1;\nif(cljs.core.truth_(temp__5735__auto____$1)){\nvar data__$5 = temp__5735__auto____$1;\nreturn (apfn.cljs$core$IFn$_invoke$arity$1 ? apfn.cljs$core$IFn$_invoke$arity$1(data__$5) : apfn.call(null,data__$5));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});})(map__11681_11761,map__11681_11762__$1,vargs_11763__$2,data_11764__$2,data_11765__$3,output_fn1_11766,data_11760__$1,temp__5735__auto___11759,instant_11736,context_11737,vargs_11738,vec__11676_11739,_QMARK_err_11740__$1,_QMARK_meta_11741,_QMARK_msg_fmt_11742,vargs_11743__$1,data_11744,_QMARK_data_11745))\n,null,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998).cljs$core$IFn$_invoke$arity$1(config));\n} else {\n}\n} else {\n}\n\nreturn null;\n});\n\ntaoensso.timbre._log_BANG_.cljs$lang$maxFixedArity = 10;\n\ntaoensso.timbre.stacktrace = (function taoensso$timbre$stacktrace(var_args){\nvar G__11706 = arguments.length;\nswitch (G__11706) {\ncase 1:\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ntaoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1 = (function (err){\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,null);\n});\n\ntaoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (err,opts){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(err);\n});\n\ntaoensso.timbre.stacktrace.cljs$lang$maxFixedArity = 2;\n\ntaoensso.timbre.console__QMARK_appender = taoensso.timbre.appenders.core.console_appender;\n\ntaoensso.timbre.ordered_levels = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\n\ntaoensso.timbre.log_QMARK_ = taoensso.timbre.may_log_QMARK_;\n\ntaoensso.timbre.logging_enabled_QMARK_ = (function taoensso$timbre$logging_enabled_QMARK_(level,compile_time_ns){\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2(level,cljs.core.str.cljs$core$IFn$_invoke$arity$1(compile_time_ns));\n});\n\ntaoensso.timbre.str_println = (function taoensso$timbre$str_println(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___11775 = arguments.length;\nvar i__4731__auto___11776 = (0);\nwhile(true){\nif((i__4731__auto___11776 < len__4730__auto___11775)){\nargs__4736__auto__.push((arguments[i__4731__auto___11776]));\n\nvar G__11777 = (i__4731__auto___11776 + (1));\ni__4731__auto___11776 = G__11777;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn taoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ntaoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic = (function (xs){\nreturn taoensso.timbre.str_join(xs);\n});\n\ntaoensso.timbre.str_println.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ntaoensso.timbre.str_println.cljs$lang$applyTo = (function (seq11707){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11707));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","Simple, flexible logging for Clojure/Script. No XML.","~:file","taoensso/timbre.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flatpickr","~$module$node_modules$react_flatpickr$build$index","~$react-slider","~$module$node_modules$react_slider$lib$components$ReactSlider$ReactSlider","~$react-beautiful-dnd","~$module$node_modules$react_beautiful_dnd$dist$react_beautiful_dnd_cjs"],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have?","^L"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$get-env",["^ ","~:arglists",["~#list",[[]]],"^9",665,"^:",1,"^8","taoensso/timbre.clj","~:name","~$taoensso.timbre/get-env","~:ns","~$taoensso.timbre","~:macro",true],"~$-log-and-rethrow-errors",["^ ","^R",["^S",[["~$?line","~$&","~$body"]]],"^9",614,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/-log-and-rethrow-errors","^V","^W","^X",true],"~$log",["^ ","^R",["^S",[["~$level","~$&","~$args"]]],"^9",583,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log","^V","^W","^X",true],"~$logf",["^ ","^R",["^S",[["^12","~$&","^13"]]],"^9",594,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/logf","^V","^W","^X",true],"~$reportf",["^ ","^R",["^S",[["~$&","^13"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/reportf","^V","^W","^X",true],"~$fatalf",["^ ","^R",["^S",[["~$&","^13"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/fatalf","^V","^W","^X",true],"~$warnf",["^ ","^R",["^S",[["~$&","^13"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/warnf","^V","^W","^X",true],"~$log!",["^ ","^R",["^S",[["^12","~$msg-type","^13","~$&",["~$opts"]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",517,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log!","^V","^W","^X",true],"~$report",["^ ","^R",["^S",[["~$&","^13"]]],"^9",590,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/report","^V","^W","^X",true],"~$-spy",["^ ","^R",["^S",[["^Z","~$config","^12","~$name","~$expr"]]],"^9",647,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/-spy","^V","^W","^X",true],"~$with-default-outs",["^ ","^R",["^S",[["~$&","^["]]],"^9",698,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-default-outs","^V","^W","^X",true],"~$logf*",["^ ","^R",["^S",[["^1D","^12","~$&","^13"]]],"^9",593,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/logf*","^V","^W","^X",true],"~$spy",["^ ","^R",["^S",[["^1F"],["^12","^1F"],["^12","^1E","^1F"],["^1D","^12","^1E","^1F"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",657,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/spy","^V","^W","^X",true],"~$sometimes",["^ ","^R",["^S",[["~$probability","~$&","^["]]],"^7","Handy for sampled logging, etc.","^9",746,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/sometimes","^V","^W","^X",true],"~$warn",["^ ","^R",["^S",[["~$&","^13"]]],"^9",587,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/warn","^V","^W","^X",true],"~$with-level",["^ ","^R",["^S",[["^12","~$&","^["]]],"^9",149,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-level","^V","^W","^X",true],"~$trace",["^ ","^R",["^S",[["~$&","^13"]]],"^9",584,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/trace","^V","^W","^X",true],"~$-log-errors",["^ ","^R",["^S",[["^Z","~$&","^["]]],"^9",608,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/-log-errors","^V","^W","^X",true],"~$debug",["^ ","^R",["^S",[["~$&","^13"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/debug","^V","^W","^X",true],"~$log*",["^ ","^R",["^S",[["^1D","^12","~$&","^13"]]],"^9",582,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log*","^V","^W","^X",true],"~$debugf",["^ ","^R",["^S",[["~$&","^13"]]],"^9",596,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/debugf","^V","^W","^X",true],"~$tracef",["^ ","^R",["^S",[["~$&","^13"]]],"^9",595,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/tracef","^V","^W","^X",true],"~$-logged-future",["^ ","^R",["^S",[["^Z","~$&","^["]]],"^9",621,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/-logged-future","^V","^W","^X",true],"~$infof",["^ ","^R",["^S",[["~$&","^13"]]],"^9",597,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/infof","^V","^W","^X",true],"~$logged-future",["^ ","^R",["^S",[["~$&","^["]]],"^9",625,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/logged-future","^V","^W","^X",true],"~$log-env",["^ ","^R",["^S",[[],["^12"],["^12","^1E"],["^1D","^12","^1E"]]],"^9",762,"^:",3,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log-env","^V","^W","^X",true],"~$fatal",["^ ","^R",["^S",[["~$&","^13"]]],"^9",589,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/fatal","^V","^W","^X",true],"~$log-and-rethrow-errors",["^ ","^R",["^S",[["~$&","^["]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log-and-rethrow-errors","^V","^W","^X",true],"~$with-logging-config",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",760,"^:",3,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-logging-config","^V","^W","^X",true],"~$with-merged-config",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-merged-config","^V","^W","^X",true],"~$with-context",["^ ","^R",["^S",[["~$context","~$&","^["]]],"^7","Executes body so that given arbitrary data will be included in the\n  data map passed to appenders for any enclosed logging calls.\n\n  (with-context\n    {:user-name \"Stu\"} ; Will be incl. in data dispatched to appenders\n    (info \"User request\"))","^9",295,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-context","^V","^W","^X",true],"~$log-errors",["^ ","^R",["^S",[["~$&","^["]]],"^9",623,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/log-errors","^V","^W","^X",true],"~$errorf",["^ ","^R",["^S",[["~$&","^13"]]],"^9",599,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/errorf","^V","^W","^X",true],"~$info",["^ ","^R",["^S",[["~$&","^13"]]],"^9",586,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/info","^V","^W","^X",true],"~$logp",["^ ","^R",["^S",[["~$&","^13"]]],"^9",761,"^:",3,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/logp","^V","^W","^X",true],"~$with-config",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",137,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-config","^V","^W","^X",true],"~$error",["^ ","^R",["^S",[["~$&","^13"]]],"^9",588,"^:",1,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/error","^V","^W","^X",true],"~$with-log-level",["^ ","^R",["^S",[["^12","~$&","^["]]],"^9",759,"^:",3,"^8","taoensso/timbre.clj","^T","~$taoensso.timbre/with-log-level","^V","^W","^X",true]],"^T","^W","~:op","^V","~:imports",null,"~:requires",["^ ","~$clojure.string","^2Y","~$str","^2Y","^L","^L","~$enc","^L","~$taoensso.timbre.appenders.core","^30","~$core-appenders","^30","~$cljs.core","^32","~$goog","^33"],"~:seen",["^O",["~:require","~:require-macros"]],"~:uses",null,"^36",["^ ","^L","^L","^2[","^L","^W","^W","~$timbre-macros","^W","^32","^32"],"~:form",["^S",["~$ns","^W","Simple, flexible logging for Clojure/Script. No XML.",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^S",["^35",["^2Y","~:as","^2Z"],["^L","^3;","^2[","~:refer",[],"~:refer-macros",["^K","^M"]],["^30","^3;","^31"]]],["^S",["^36",["^W","^3;","^38","^3<",[]]]]]],"~:flags",["^ ","^35",["^O",[]],"^36",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^33","^32","^2Y","^L","^30"]],"^V","^W","~:resource-id",["~:shadow.build.classpath/resource","taoensso/timbre.cljs"],"~:compiled-at",1579150639604,"~:resource-name","taoensso/timbre.cljs","~:warnings",[],"~:source","(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer [] :refer-macros [have have?]]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer []]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 87 0])\n  (enc/assert-min-encore-version  2.87))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str ?file hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str ?file \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                         \n                                        \n                                             \n           \n\n     \n                                 \n                                                        \n                                                              \n                               \n                                                                    \n\n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                 \n                                                                                \n\n                                      \n\n                         \n                                                                                      \n                                                                                       \n\n                                                   \n                                                                                 \n\n                                                   \n                                                                                 \n\n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (boolean ; Resolves #206 (issue with slf4j-timbre)\n         (ns-filter\n           (get config :ns-whitelist)\n           (get config :ns-blacklist)\n           ?ns-str))\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context* \"General-purpose dynamic logging context\" nil)\n                       \n                                                                     \n                                                              \n\n               \n                                                                        \n                             \n\n                                                          \n\n(defn- vrest [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- parse-vargs\n  \"vargs -> [?err ?meta ?msg-fmt api-vargs]\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        fmt-msg?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [?err     v0\n            ?meta    nil\n            vargs    (vrest vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs])\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (vrest vargs) vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs]))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (parse-vargs :auto :f [\"fmt\" :a :b :c])\n      (parse-vargs :auto :p [ex    :a :b :c])\n      (parse-vargs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [       {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [ex])\n      (parse-vargs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          [?err ?meta ?msg-fmt vargs]\n          (parse-vargs ?err msg-type vargs)\n\n          data ; Pre-middleware\n          (conj\n            (or ?base-data {})\n            {:instant instant\n             :level   level\n             :context context\n             :config  config ; Entire config!\n             :?ns-str ?ns-str\n             :?file   ?file\n             :?line   ?line\n                                                          \n             :error-level? (#{:error :fatal} level)\n             :?err     ?err\n             :?err_    (delay ?err) ; Deprecated\n             :?meta    ?meta        ; Undocumented\n             :?msg-fmt ?msg-fmt     ; Undocumented\n             :vargs    vargs})\n\n          ?data ; Post middleware\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [{:keys [vargs]} data\n              data (assoc data :vargs_ (delay vargs)) ; Deprecated\n              data\n              (enc/assoc-nx data\n                :msg_\n                (delay\n                  (case msg-type\n                    nil \"\"\n                    :p  (str-join vargs)\n                    :f  #_(enc/format* (have string? ?msg-fmt) vargs)\n                    (do\n                      (when-not (string? ?msg-fmt)\n                        (throw\n                          (ex-info \"Timbre format-style logging call without a format pattern (string)\"\n                            #_data\n                            {:level    level\n                             :location (str (or ?ns-str ?file \"?\") \":\"\n                                            (or ?line         \"?\"))})))\n\n                      (enc/format* ?msg-fmt vargs))))\n\n                ;; Uniquely identifies a particular logging call for\n                ;; rate limiting, etc.\n                :hash_\n                (delay\n                  (hash\n                    ;; Nb excl. instant\n                    [callsite-id      ; Only useful for direct macro calls\n                     ?msg-fmt\n                     (get ?meta :hash ; Explicit hash provided\n                       vargs)])))\n\n              ;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data) ; Deprecated, undocumented\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                                   \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__11614","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2","opts","map__11615","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__11616","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4131__auto__","cljs.core/force","temp__5735__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__11619","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq11620","G__11621","cljs.core/first","cljs.core/next","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic","taoensso.timbre/set-level!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/level>=","y","G__11623","G__11624","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__11625","G__11634","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3","?config","config","min-level","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/boolean","G__11643","G__11644","G__11645","taoensso.timbre/str-join","xs","taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/vrest","v","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/parse-vargs","msg-type","vargs","vec__11647","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","auto-error?","G__11650","G__11651","taoensso.encore/kw-identical?","fmt-msg?","G__11652","G__11653","v0","and__4120__auto__","taoensso.encore/error?","?meta","?msg-fmt","vec__11654","cljs.core/map?","cljs.core/meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","vec__11660","G__11674","taoensso.timbre/-log!","vargs_","?base-data","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","callsite-id","cljs.core/deref","vec__11676","instant","taoensso.encore/now-dt","context","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fexpr__11679","cljs.core/Delay","?data","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","mf","result","cljs.core/reduced","map__11681","taoensso.encore.assoc_nx.cljs$core$IFn$_invoke$arity$variadic","G__11683","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.encore/format*","cljs.core/hash","output-fn1","cljs.core/reduce-kv","_","id","appender","G__11684","G__11685","G__11686","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__11689","map__11691","async?","apfn","output-fn","G__11698","G__11699","output_","temp__5733__auto__","mfn","G__11706","taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/str-println","seq11707","self__4718__auto__","cljs.core/seq"]]],"~:cache-keys",["~#cmap",[["^3B","goog/dom/tagname.js"],[1570979810632,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^33","~$goog.dom.HtmlElement"]]],["^3B","goog/async/freelist.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/labs/useragent/platform.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.labs.userAgent.util","~$goog.string"]]],["^3B","goog/timer/timer.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.Promise","~$goog.events.EventTarget"]]],["^3B","cljs/tools/reader/impl/utils.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^2Y","^3U"]]],["^3B","goog/math/math.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.array","~$goog.asserts"]]],["^3B","goog/string/stringformat.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3U"]]],["^3B","goog/events/eventtype.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^3B","goog/labs/useragent/browser.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3T","~$goog.object","~$goog.string.internal"]]],["^3B","goog/array/array.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y"]]],["^3B","goog/useragent/useragent.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3T","~$goog.reflect","^3U"]]],["^3B","goog/structs/prioritypool.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^3B","goog/async/run.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^3B","taoensso/encore.cljs"],[1565101457605,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^2Y","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^40","^3U","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^3B","goog/debug/error.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/async/workqueue.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","~$goog.async.FreeList"]]],["^3B","goog/events/events.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^3Z","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^3B","goog/promise/resolver.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/events/browserfeature.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3["]]],["^3B","cljs/tools/reader/edn.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^3U","^4?"]]],["^3B","goog/structs/priorityqueue.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.structs.Heap"]]],["^3B","goog/net/xhrio.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.Timer","^3X","^3Y","^4I","^3W","~$goog.json.hybrid","~$goog.log","^4F","^4E","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^40","^3U","^4D","~$goog.structs.Map","~$goog.uri.utils","^3["]]],["^3B","goog/promise/thenable.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/dom/nodetype.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","cljs/tools/reader/impl/inspect.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32"]]],["^3B","cljs/tools/reader.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^4N","^4O","^4P","^4M","^3X","^3U","^4?"]]],["^3B","goog/net/wrapperxmlhttpfactory.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^3B","goog/events/eventtarget.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.Disposable","^3Y","^4@","~$goog.events.Event","^4K","^4L","^40"]]],["^3B","goog/disposable/disposable.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.disposable.IDisposable"]]],["^3B","goog/object/object.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/structs/set.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^4D","~$goog.structs.Collection","^4X"]]],"~:SHADOW-TIMESTAMP",[1578682820000,1565093957000],["^3B","goog/math/long.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","^45"]]],["^3B","goog/events/listener.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.events.ListenableKey"]]],["^3B","goog/events/listenermap.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","~$goog.events.Listener","^40"]]],["^3B","goog/events/eventid.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","taoensso/truss.cljs"],[1565101457542,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","~$taoensso.truss.impl"]]],["^3B","goog/string/internal.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/functions/functions.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","taoensso/truss/impl.cljs"],[1565101457542,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^4;"]]],["^3B","goog/net/eventtype.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/structs/map.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^3B","goog/net/xhriopool.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^4A","~$goog.structs.PriorityPool"]]],["^3B","goog/structs/queue.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X"]]],["^3B","goog/labs/useragent/engine.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3T","^3U"]]],["^3B","taoensso/timbre/appenders/core.cljs"],[1565101457548,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^2Y","^L"]]],["^3B","cljs/reader.cljs"],[1565093957209,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^40","^4Q","^4=","^4?"]]],["^3B","goog/asserts/asserts.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^3B","goog/debug/logbuffer.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","~$goog.debug.LogRecord"]]],["^3B","goog/uri/uri.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3Y","^3U","^4D","^4X","^4Y","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^3B","goog/net/errorcode.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/disposable/idisposable.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/promise/promise.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","~$goog.Thenable","^3Y","^4H","~$goog.async.run","^4:","^5;","~$goog.promise.Resolver"]]],["^3B","goog/debug/logrecord.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/base.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",[]]],["^3B","goog/json/hybrid.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","~$goog.json"]]],["^3B","goog/structs/structs.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^40"]]],["^3B","cljs/tools/reader/impl/errors.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^4N","^2Y","~$cljs.tools.reader.impl.inspect"]]],["^3B","clojure/string.cljs"],[1565093957209,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^3U","^4?"]]],["^3B","goog/structs/pool.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^50","~$goog.structs.Queue","~$goog.structs.Set"]]],["^3B","goog/net/httpstatus.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/structs/heap.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^40","~$goog.structs.Node"]]],["^3B","goog/debug/entrypointregistry.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y"]]],["^3B","goog/string/string.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^41"]]],["^3B","goog/reflect/reflect.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/labs/useragent/util.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^41"]]],["^3B","goog/debug/debug.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","~$goog.debug.errorcontext","^3["]]],["^3B","goog/string/stringbuffer.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/debug/errorcontext.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","cljs/tools/reader/reader_types.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^4O","^3U","^4?"]]],["^3B","goog/iter/iter.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3Y","~$goog.functions","~$goog.math"]]],["^3B","goog/async/nexttick.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^4I","~$goog.dom.TagName","^5I","^42","^43"]]],["^3B","goog/debug/logger.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3Y","~$goog.debug","~$goog.debug.LogBuffer","^5="]]],["^3B","goog/events/event.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^50","~$goog.events.EventId"]]],["^3B","cljs/tools/reader/impl/commons.cljs"],[1570979808100,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^4M","^4N","^4O"]]],["^3B","goog/dom/htmlelement.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","cljs/core.cljs"],[1565093957209,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["~$goog.math.Long","~$goog.math.Integer","^3U","^40","^3X","~$goog.Uri","^4?"]]],["^3B","goog/log/log.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^5L","~$goog.debug.LogManager","^5=","~$goog.debug.Logger"]]],["^3B","goog/structs/collection.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/events/browserevent.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^5L","^3Z","^51","~$goog.events.EventType","^45","^3["]]],["^3B","goog/math/integer.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/structs/node.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","clojure/set.cljs"],[1565093957209,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32"]]],["^3B","goog/uri/utils.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3X","^3Y","^3U"]]],["^3B","taoensso/timbre.cljs"],[1565101457548,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^32","^2Y","^L","^30"]]],["^3B","goog/json/json.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]],["^3B","goog/events/listenable.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^5N"]]],["^3B","goog/net/xmlhttpfactory.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^4Z"]]],["^3B","goog/net/xmlhttp.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33","^3Y","~$goog.net.WrapperXmlHttpFactory","^4["]]],["^3B","goog/net/xhrlike.js"],[1570979810632,"^3O",["^ ","^3P",null,"^3Q",["^O",[]],"^3R",["^33"]]]]],"~:clj-info",["^ ","jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1565093954000,"jar:file:/Users/paul/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1565096504000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1565093957000,"jar:file:/Users/paul/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1570979808000,"jar:file:/Users/paul/.m2/repository/com/taoensso/encore/2.105.0/encore-2.105.0.jar!/taoensso/encore.clj",1565101457000,"jar:file:/Users/paul/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1565096504000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","Simple, flexible logging for Clojure/Script. No XML.","^8","taoensso/timbre.cljs","^9",1,"^:",5,"^;",1,"^<",20],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",["^ ","^K","^L","^M","^L"],"^N",["^O",[]],"^P",["^ ","^Q",["^ ","^R",["^S",[[]]],"^9",665,"^:",1,"^8","taoensso/timbre.clj","^T","^U","^V","^W","^X",true],"^Y",["^ ","^R",["^S",[["^Z","~$&","^["]]],"^9",614,"^:",1,"^8","taoensso/timbre.clj","^T","^10","^V","^W","^X",true],"^11",["^ ","^R",["^S",[["^12","~$&","^13"]]],"^9",583,"^:",1,"^8","taoensso/timbre.clj","^T","^14","^V","^W","^X",true],"^15",["^ ","^R",["^S",[["^12","~$&","^13"]]],"^9",594,"^:",1,"^8","taoensso/timbre.clj","^T","^16","^V","^W","^X",true],"^17",["^ ","^R",["^S",[["~$&","^13"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^T","^18","^V","^W","^X",true],"^19",["^ ","^R",["^S",[["~$&","^13"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^T","^1:","^V","^W","^X",true],"^1;",["^ ","^R",["^S",[["~$&","^13"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^T","^1<","^V","^W","^X",true],"^1=",["^ ","^R",["^S",[["^12","^1>","^13","~$&",["^1?"]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",517,"^:",1,"^8","taoensso/timbre.clj","^T","^1@","^V","^W","^X",true],"^1A",["^ ","^R",["^S",[["~$&","^13"]]],"^9",590,"^:",1,"^8","taoensso/timbre.clj","^T","^1B","^V","^W","^X",true],"^1C",["^ ","^R",["^S",[["^Z","^1D","^12","^1E","^1F"]]],"^9",647,"^:",1,"^8","taoensso/timbre.clj","^T","^1G","^V","^W","^X",true],"^1H",["^ ","^R",["^S",[["~$&","^["]]],"^9",698,"^:",1,"^8","taoensso/timbre.clj","^T","^1I","^V","^W","^X",true],"^1J",["^ ","^R",["^S",[["^1D","^12","~$&","^13"]]],"^9",593,"^:",1,"^8","taoensso/timbre.clj","^T","^1K","^V","^W","^X",true],"^1L",["^ ","^R",["^S",[["^1F"],["^12","^1F"],["^12","^1E","^1F"],["^1D","^12","^1E","^1F"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",657,"^:",1,"^8","taoensso/timbre.clj","^T","^1M","^V","^W","^X",true],"^1N",["^ ","^R",["^S",[["^1O","~$&","^["]]],"^7","Handy for sampled logging, etc.","^9",746,"^:",1,"^8","taoensso/timbre.clj","^T","^1P","^V","^W","^X",true],"^1Q",["^ ","^R",["^S",[["~$&","^13"]]],"^9",587,"^:",1,"^8","taoensso/timbre.clj","^T","^1R","^V","^W","^X",true],"^1S",["^ ","^R",["^S",[["^12","~$&","^["]]],"^9",149,"^:",1,"^8","taoensso/timbre.clj","^T","^1T","^V","^W","^X",true],"^1U",["^ ","^R",["^S",[["~$&","^13"]]],"^9",584,"^:",1,"^8","taoensso/timbre.clj","^T","^1V","^V","^W","^X",true],"^1W",["^ ","^R",["^S",[["^Z","~$&","^["]]],"^9",608,"^:",1,"^8","taoensso/timbre.clj","^T","^1X","^V","^W","^X",true],"^1Y",["^ ","^R",["^S",[["~$&","^13"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^T","^1Z","^V","^W","^X",true],"^1[",["^ ","^R",["^S",[["^1D","^12","~$&","^13"]]],"^9",582,"^:",1,"^8","taoensso/timbre.clj","^T","^20","^V","^W","^X",true],"^21",["^ ","^R",["^S",[["~$&","^13"]]],"^9",596,"^:",1,"^8","taoensso/timbre.clj","^T","^22","^V","^W","^X",true],"^23",["^ ","^R",["^S",[["~$&","^13"]]],"^9",595,"^:",1,"^8","taoensso/timbre.clj","^T","^24","^V","^W","^X",true],"^25",["^ ","^R",["^S",[["^Z","~$&","^["]]],"^9",621,"^:",1,"^8","taoensso/timbre.clj","^T","^26","^V","^W","^X",true],"^27",["^ ","^R",["^S",[["~$&","^13"]]],"^9",597,"^:",1,"^8","taoensso/timbre.clj","^T","^28","^V","^W","^X",true],"^29",["^ ","^R",["^S",[["~$&","^["]]],"^9",625,"^:",1,"^8","taoensso/timbre.clj","^T","^2:","^V","^W","^X",true],"^2;",["^ ","^R",["^S",[[],["^12"],["^12","^1E"],["^1D","^12","^1E"]]],"^9",762,"^:",3,"^8","taoensso/timbre.clj","^T","^2<","^V","^W","^X",true],"^2=",["^ ","^R",["^S",[["~$&","^13"]]],"^9",589,"^:",1,"^8","taoensso/timbre.clj","^T","^2>","^V","^W","^X",true],"^2?",["^ ","^R",["^S",[["~$&","^["]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^T","^2@","^V","^W","^X",true],"^2A",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",760,"^:",3,"^8","taoensso/timbre.clj","^T","^2B","^V","^W","^X",true],"^2C",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^T","^2D","^V","^W","^X",true],"^2E",["^ ","^R",["^S",[["^2F","~$&","^["]]],"^7","Executes body so that given arbitrary data will be included in the\n  data map passed to appenders for any enclosed logging calls.\n\n  (with-context\n    {:user-name \"Stu\"} ; Will be incl. in data dispatched to appenders\n    (info \"User request\"))","^9",295,"^:",1,"^8","taoensso/timbre.clj","^T","^2G","^V","^W","^X",true],"^2H",["^ ","^R",["^S",[["~$&","^["]]],"^9",623,"^:",1,"^8","taoensso/timbre.clj","^T","^2I","^V","^W","^X",true],"^2J",["^ ","^R",["^S",[["~$&","^13"]]],"^9",599,"^:",1,"^8","taoensso/timbre.clj","^T","^2K","^V","^W","^X",true],"^2L",["^ ","^R",["^S",[["~$&","^13"]]],"^9",586,"^:",1,"^8","taoensso/timbre.clj","^T","^2M","^V","^W","^X",true],"^2N",["^ ","^R",["^S",[["~$&","^13"]]],"^9",761,"^:",3,"^8","taoensso/timbre.clj","^T","^2O","^V","^W","^X",true],"^2P",["^ ","^R",["^S",[["^1D","~$&","^["]]],"^9",137,"^:",1,"^8","taoensso/timbre.clj","^T","^2Q","^V","^W","^X",true],"^2R",["^ ","^R",["^S",[["~$&","^13"]]],"^9",588,"^:",1,"^8","taoensso/timbre.clj","^T","^2S","^V","^W","^X",true],"^2T",["^ ","^R",["^S",[["^12","~$&","^["]]],"^9",759,"^:",3,"^8","taoensso/timbre.clj","^T","^2U","^V","^W","^X",true]],"^T","^W","^2W",null,"^2X",["^ ","^2Y","^2Y","^2Z","^2Y","^L","^L","^2[","^L","^30","^30","^31","^30","^32","^32","^33","^33"],"^34",["^O",["^35","^36"]],"~:shadow/js-access-global",["^O",["Error"]],"^37",null,"~:defs",["^ ","~$get-rate-limiter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",287,"^:",20,"^;",287,"^<",36,"~:private",true],"^6T",true,"^T","~$taoensso.timbre/get-rate-limiter","^8","taoensso/timbre.cljs","^<",36,"^:",1,"^9",287,"^;",287,"~:tag","~$function"],"~$logging-enabled?",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",757,"^:",9,"^;",757,"^<",25,"^R",["^S",["~$quote",["^S",[["^12","~$compile-time-ns"]]]]]],"^T","~$taoensso.timbre/logging-enabled?","^8","taoensso/timbre.cljs","^<",25,"~:method-params",["^S",[["^12","^6["]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^:",3,"~:variadic?",false,"^9",757,"~:ret-tag","~$boolean","^;",757,"~:max-fixed-arity",2,"~:fn-var",true,"^R",["^S",["^6Z",["^S",[["^12","^6["]]]]]],"~$-levels-map",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",160,"^:",14,"^;",160,"^<",25,"~:const",true],"^T","~$taoensso.timbre/-levels-map","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^7:",true,"^9",160,"^;",160,"^6V","~$clj"],"~$valid-level",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",163,"^:",7,"^;",163,"^<",18,"^R",["^S",["^6Z",["^S",[["~$x"]]]]]],"^T","~$taoensso.timbre/valid-level","^8","taoensso/timbre.cljs","^<",18,"^71",["^S",[["~$x"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",163,"^75","~$any","^;",163,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["~$x"]]]]]],"~$merge-config!",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",146,"^:",7,"^;",146,"^<",20,"^R",["^S",["^6Z",["^S",[["~$m"]]]]]],"^T","~$taoensso.timbre/merge-config!","^8","taoensso/timbre.cljs","^<",20,"^71",["^S",[["~$m"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",146,"^75","^7?","^;",146,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["~$m"]]]]]],"~$-levels-set",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",159,"^:",14,"^;",159,"^<",25,"^7:",true],"^T","~$taoensso.timbre/-levels-set","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^7:",true,"^9",159,"^;",159,"^6V",["^O",["^7<","^7?","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]]],"~$log?",["^ ","^T","~$taoensso.timbre/log?","^8","taoensso/timbre.cljs","^9",756,"^:",3,"^;",756,"^<",12,"^5",["^ ","^8","taoensso/timbre.cljs","^9",756,"^:",8,"^;",756,"^<",12],"^6V","^76"],"~$str-join",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",265,"^:",10,"^;",265,"^<",18,"^6T",true,"^R",["^S",["^6Z",["^S",[["~$xs"]]]]]],"^6T",true,"^T","~$taoensso.timbre/str-join","^8","taoensso/timbre.cljs","^<",18,"^71",["^S",[["^7J"]]],"^72",null,"^73",["^S",[null,null]],"^:",3,"^74",false,"^9",265,"^75",["^O",["^7?","~$string"]],"^;",265,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["^7J"]]]]]],"~$*config*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",136,"^:",24,"^;",136,"^<",32,"~:dynamic",true,"^7","See `example-config` for info."],"^T","~$taoensso.timbre/*config*","^8","taoensso/timbre.cljs","^<",32,"^:",1,"^7N",true,"^9",136,"^;",136,"^6V","~$cljs.core/IMap","^7","See `example-config` for info."],"~$*context*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",294,"^:",16,"^;",294,"^<",25,"^7N",true],"^T","~$taoensso.timbre/*context*","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^7N",true,"^9",294,"^;",294,"^6V","^7F","^7","General-purpose dynamic logging context"],"~$valid-level?",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",162,"^:",7,"^;",162,"^<",19,"^R",["^S",["^6Z",["^S",[["~$x"]]]]]],"^T","~$taoensso.timbre/valid-level?","^8","taoensso/timbre.cljs","^<",19,"^71",["^S",[["~$x"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",162,"^75","^76","^;",162,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["~$x"]]]]]],"~$-log!",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",345,"^:",7,"^;",345,"^<",12,"^R",["^S",["^6Z",["^S",[["^1D","^12","~$?ns-str","~$?file","^Z","^1>","~$?err","~$vargs_","~$?base-data"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","~$callsite-id"]]]]],"^7","Core low-level log fn. Implementation detail!","~:top-fn",["^ ","^74",false,"~:fixed-arity",10,"^77",10,"^71",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^R",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^73",["^S",[null,null]]]],"^T","~$taoensso.timbre/-log!","^8","taoensso/timbre.cljs","^<",12,"^80",["^ ","^74",false,"^81",10,"^77",10,"^71",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^R",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^73",["^S",[null,null]]],"^71",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^72",null,"^81",10,"^73",["^S",[null,null]],"^:",1,"^74",false,"~:methods",[["^ ","^81",9,"^74",false,"^6V","^7?"],["^ ","^81",10,"^74",false,"^6V","^7F"]],"^9",345,"^;",345,"^77",10,"^78",true,"^R",["^S",[["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z"],["^1D","^12","^7V","^7W","^Z","^1>","^7X","^7Y","^7Z","^7["]]],"^7","Core low-level log fn. Implementation detail!"],"~$console-appender",["^ ","^T","~$taoensso.timbre/console-appender","^8","taoensso/timbre.cljs","^9",58,"^:",8,"^;",58,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",58,"^:",13,"^;",58,"^<",29]],"~$parse-vargs",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",306,"^:",8,"^;",306,"^<",19,"^6T",true,"^R",["^S",["^6Z",["^S",[["^7X","^1>","~$vargs"]]]]],"^7","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"^6T",true,"^T","~$taoensso.timbre/parse-vargs","^8","taoensso/timbre.cljs","^<",19,"^71",["^S",[["^7X","^1>","^87"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",306,"^75","~$cljs.core/IVector","^;",306,"^77",3,"^78",true,"^R",["^S",["^6Z",["^S",[["^7X","^1>","^87"]]]]],"^7","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"~$default-err",["^ ","^T","~$taoensso.timbre/default-err","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",21,"~:declared",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",10,"^;",54,"^<",21,"^8<",true]],"~$example-config",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",60,"^:",6,"^;",60,"^<",20],"^T","~$taoensso.timbre/example-config","^8","taoensso/timbre.cljs","^<",20,"^:",1,"^9",60,"^;",60,"^6V","^7P","^7","Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`."],"~$may-log?",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^<",46,"^80",["^ ","^74",false,"^81",3,"^77",3,"^71",["^S",[["^12"],["^12","^7V"],["^12","^7V","~$?config"]]],"^R",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]],"^73",["^S",[null,null,null]]],"^:",38,"^9",240,"^;",240,"^6V","^76","^R",["^S",["^6Z",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"^T","~$taoensso.timbre/may-log?","^8","taoensso/timbre.cljs","^<",46,"^80",["^ ","^74",false,"^81",3,"^77",3,"^71",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]],"^R",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]],"^73",["^S",[null,null,null]]],"^71",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]],"^72",null,"^81",3,"^73",["^S",[null,null,null]],"^:",1,"^74",false,"^83",[["^ ","^81",1,"^74",false,"^6V","^76"],["^ ","^81",2,"^74",false,"^6V","^76"],["^ ","^81",3,"^74",false,"^6V","^76"]],"^9",240,"^75","^76","^;",240,"^77",3,"^6V","^76","^78",true,"^R",["^S",[["^12"],["^12","^7V"],["^12","^7V","^8@"]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"~$level>=",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",167,"^:",7,"^;",167,"^<",14,"^R",["^S",["^6Z",["^S",[["~$x","~$y"]]]]]],"^T","~$taoensso.timbre/level>=","^8","taoensso/timbre.cljs","^<",14,"^71",["^S",[["~$x","~$y"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",167,"^75","^76","^;",167,"^77",2,"^78",true,"^R",["^S",["^6Z",["^S",[["~$x","~$y"]]]]]],"~$set-config!",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",145,"^:",9,"^;",145,"^<",20,"^R",["^S",["^6Z",["^S",[["~$m"]]]]]],"^T","~$taoensso.timbre/set-config!","^8","taoensso/timbre.cljs","^<",20,"^71",["^S",[["~$m"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",145,"^75","^7?","^;",145,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["~$m"]]]]]],"~$-levels-vec",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",158,"^:",14,"^;",158,"^<",25,"^7:",true],"^T","~$taoensso.timbre/-levels-vec","^8","taoensso/timbre.cljs","^<",25,"~:const-expr",["^ ","^2V","~:vector","~:env",["^ ","~:context","~:expr"],"^39",["~:trace","~:debug","~:info","~:warn","~:error","~:fatal","~:report"],"~:items",[["^ ","^2V","^7:","~:val","^8M","^8J",["^ ","^8K","^8L"],"^39","^8M","^6V","~$cljs.core/Keyword"],["^ ","^2V","^7:","^8U","^8N","^8J",["^ ","^8K","^8L"],"^39","^8N","^6V","^8V"],["^ ","^2V","^7:","^8U","^8O","^8J",["^ ","^8K","^8L"],"^39","^8O","^6V","^8V"],["^ ","^2V","^7:","^8U","^8P","^8J",["^ ","^8K","^8L"],"^39","^8P","^6V","^8V"],["^ ","^2V","^7:","^8U","^8Q","^8J",["^ ","^8K","^8L"],"^39","^8Q","^6V","^8V"],["^ ","^2V","^7:","^8U","^8R","^8J",["^ ","^8K","^8L"],"^39","^8R","^6V","^8V"],["^ ","^2V","^7:","^8U","^8S","^8J",["^ ","^8K","^8L"],"^39","^8S","^6V","^8V"]],"~:children",["^8T"],"^6V","^89"],"^:",1,"^7:",true,"^9",158,"^;",158,"^6V","^89"],"~$swap-config!",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",141,"^:",7,"^;",141,"^<",19,"^R",["^S",["^6Z",["^S",[["~$f","~$&","^13"]]]]],"^80",["^ ","^74",true,"^81",1,"^77",1,"^71",[["^S",["~$f","^13"]]],"^R",["^S",[["~$f","~$&","^13"]]],"^73",["^S",[null]]]],"^T","~$taoensso.timbre/swap-config!","^8","taoensso/timbre.cljs","^<",19,"^80",["^ ","^74",true,"^81",1,"^77",1,"^71",[["^S",["~$f","^13"]]],"^R",["^S",[["~$f","~$&","^13"]]],"^73",["^S",[null]]],"^71",[["^S",["~$f","^13"]]],"^72",null,"^81",1,"^73",["^S",[null]],"^:",1,"^74",true,"^83",[["^ ","^81",1,"^74",true]],"^9",141,"^75","^7?","^;",141,"^77",1,"^78",true,"^R",["^S",[["~$f","~$&","^13"]]]],"~$console-?appender",["^ ","^T","~$taoensso.timbre/console-?appender","^8","taoensso/timbre.cljs","^9",754,"^:",10,"^;",754,"^<",32,"^5",["^ ","^8","taoensso/timbre.cljs","^9",754,"^:",15,"^;",754,"^<",32]],"~$str-println",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",758,"^:",9,"^;",758,"^<",20,"^R",["^S",["^6Z",["^S",[["~$&","^7J"]]]]],"^80",["^ ","^74",true,"^81",0,"^77",0,"^71",[["^S",["^7J"]]],"^R",["^S",[["~$&","^7J"]]],"^73",["^S",[null]]]],"^T","~$taoensso.timbre/str-println","^8","taoensso/timbre.cljs","^<",20,"^80",["^ ","^74",true,"^81",0,"^77",0,"^71",[["^S",["^7J"]]],"^R",["^S",[["~$&","^7J"]]],"^73",["^S",[null]]],"^71",[["^S",["^7J"]]],"^72",null,"^81",0,"^73",["^S",[null]],"^:",3,"^74",true,"^83",[["^ ","^81",0,"^74",true,"^6V",["^O",["^7?","^7L"]]]],"^9",758,"^75","^7?","^;",758,"^77",0,"^78",true,"^R",["^S",[["~$&","^7J"]]]],"~$set-level!",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",148,"^:",11,"^;",148,"^<",21,"^R",["^S",["^6Z",["^S",[["^12"]]]]]],"^T","~$taoensso.timbre/set-level!","^8","taoensso/timbre.cljs","^<",21,"^71",["^S",[["^12"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",148,"^75","^7?","^;",148,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["^12"]]]]]],"~$default-output-fn",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",35,"^:",7,"^;",35,"^<",24,"^R",["^S",["^6Z",["^S",[["~$data"],["^1?","^95"]]]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.","^80",["^ ","^74",false,"^81",2,"^77",2,"^71",["^S",[["^95"],["^1?","^95"]]],"^R",["^S",[["^95"],["^1?","^95"]]],"^73",["^S",[null,null]]]],"^T","~$taoensso.timbre/default-output-fn","^8","taoensso/timbre.cljs","^<",24,"^80",["^ ","^74",false,"^81",2,"^77",2,"^71",["^S",[["^95"],["^1?","^95"]]],"^R",["^S",[["^95"],["^1?","^95"]]],"^73",["^S",[null,null]]],"^71",["^S",[["^95"],["^1?","^95"]]],"^72",null,"^81",2,"^73",["^S",[null,null]],"^:",1,"^74",false,"^83",[["^ ","^81",1,"^74",false,"^6V","^7?"],["^ ","^81",2,"^74",false,"^6V","^7L"]],"^9",35,"^;",35,"^77",2,"^78",true,"^R",["^S",[["^95"],["^1?","^95"]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts."],"~$default-out",["^ ","^T","~$taoensso.timbre/default-out","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",33,"^8<",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",22,"^;",54,"^<",33,"^8<",true]],"~$ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",176,"^:",25,"^;",176,"^<",34,"^6T",true],"^6T",true,"^T","~$taoensso.timbre/ns-filter","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",176,"^;",176,"^6V","^6W","^7","Returns true iff given ns passes white/black lists."],"~$println-appender",["^ ","^T","~$taoensso.timbre/println-appender","^8","taoensso/timbre.cljs","^9",57,"^:",8,"^;",57,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",57,"^:",13,"^;",57,"^<",29]],"~$vrest",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",305,"^:",8,"^;",305,"^<",13,"^6T",true,"^R",["^S",["^6Z",["^S",[["~$v"]]]]]],"^6T",true,"^T","~$taoensso.timbre/vrest","^8","taoensso/timbre.cljs","^<",13,"^71",["^S",[["~$v"]]],"^72",null,"^73",["^S",[null,null]],"^:",1,"^74",false,"^9",305,"^75",["^O",["^89","^7?"]],"^;",305,"^77",1,"^78",true,"^R",["^S",["^6Z",["^S",[["~$v"]]]]]],"~$ordered-levels",["^ ","^T","~$taoensso.timbre/ordered-levels","^8","taoensso/timbre.cljs","^9",755,"^:",3,"^;",755,"^<",22,"^5",["^ ","^8","taoensso/timbre.cljs","^9",755,"^:",8,"^;",755,"^<",22],"^6V","^89"],"~$-compile-ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",175,"^:",16,"^;",175,"^<",34,"^6T",true],"^6T",true,"^T","~$taoensso.timbre/-compile-ns-filter","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",175,"^;",175,"^6V","^6W"],"~$get-hostname",["^ ","^T","~$taoensso.timbre/get-hostname","^8","taoensso/timbre.cljs","^9",262,"^:",1,"^;",262,"^<",22,"^8<",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",262,"^:",10,"^;",262,"^<",22,"^8<",true]],"~$stacktrace",["^ ","^6Y",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",726,"^:",7,"^;",726,"^<",17,"^R",["^S",["^6Z",["^S",[["~$err"],["^9F","^1?"]]]]],"^80",["^ ","^74",false,"^81",2,"^77",2,"^71",["^S",[["^9F"],["^9F","^1?"]]],"^R",["^S",[["^9F"],["^9F","^1?"]]],"^73",["^S",[null,null]]]],"^T","~$taoensso.timbre/stacktrace","^8","taoensso/timbre.cljs","^<",17,"^80",["^ ","^74",false,"^81",2,"^77",2,"^71",["^S",[["^9F"],["^9F","^1?"]]],"^R",["^S",[["^9F"],["^9F","^1?"]]],"^73",["^S",[null,null]]],"^71",["^S",[["^9F"],["^9F","^1?"]]],"^72",null,"^81",2,"^73",["^S",[null,null]],"^:",1,"^74",false,"^83",[["^ ","^81",1,"^74",false,"^6V","^7?"],["^ ","^81",2,"^74",false,"^6V","^7L"]],"^9",726,"^;",726,"^77",2,"^78",true,"^R",["^S",[["^9F"],["^9F","^1?"]]]]],"^36",["^ ","^L","^L","^2[","^L","^W","^W","^38","^W","^32","^32"],"~:cljs.analyzer/constants",["^ ","^34",["^O",["~:given","~:ns-whitelist","~:inherit","^8S","~:fn","~:hash","^5","~:hash_","~:ns-blacklist","~:instant","~:rate-limit","~:else","~:config","~:vargs","~:output_","~:msg_","~:middleware-fn","^8P","^8M","~:err","~:?file","^8N","~:hostname_","~:error-level?","~:appender","~:appender-id","~:?ns-str","~:enabled?","~:middleware","^8R","~:level","~:output-fn","~:?err","~:vargs_","^8O","~:stacktrace-fonts","~:no-stacktrace?","~:timestamp_","^8K","~:?line","~:min-level","~:f","^8Q","~:console","~:?err_","~:?meta","~:location","~:auto","~:p","~:?msg-fmt","~:async?","~:appenders"]],"~:order",["^::","^:9","^:5","^:7","^9V","^:2","^9Y","^9Z","^:;","^:<","^9J","^9O","^:4","^:6","^:E","^8N","^:>","^8M","^8O","^8P","^8Q","^8R","^8S","^9I","^9R","^:B","~:f","^5","^9X","^9P","^9S","^9T","^9[","^8K","^:?","^:@","^:C","^:8","~:p","^:A","^9N","^9M","^:3","^:=","^9Q","^9L","^:D","^9K","^:1","^:0","^9U","^9W"]],"^3>",["^ ","^35",["^O",[]],"^36",["^O",[]]],"^3?",["^ "],"^3@",["^33","^32","^2Y","^L","^30"]],"^V","^W","~:ns-specs",["^ "],"~:ns-spec-vars",["^O",[]],"~:compiler-options",["^3N",[["^:I","~:static-fns"],true,["^:I","~:shadow-tweaks"],null,["^:I","~:elide-asserts"],true,["^:I","~:optimize-constants"],null,["^:I","^3E"],null,["^:I","~:external-config"],null,["^:I","~:tooling-config"],null,["^:I","~:emit-constants"],null,["^:I","~:load-tests"],false,["^:I","~:form-size-threshold"],null,["^:I","~:infer-externs"],true,["^:I","^3G"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^:I","~:fn-invoke-direct"],null,["^:I","~:source-map"],null]]]