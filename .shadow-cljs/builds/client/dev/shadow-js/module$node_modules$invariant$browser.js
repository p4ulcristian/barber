["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/invariant/browser.js"],"~:js","shadow$provide.module$node_modules$invariant$browser=function(global,require,module,exports){module.exports=function(condition,format,a,b,c,d,e,f){if(void 0===format)throw Error(\"invariant requires an error message argument\");if(!condition){if(void 0===format)condition=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var args=[a,b,c,d,e,f],argIndex=0;condition=Error(format.replace(/%s/g,function(){return args[argIndex++]}));\ncondition.name=\"Invariant Violation\"}condition.framesToPop=1;throw condition;}}}","~:source","shadow$provide[\"module$node_modules$invariant$browser\"] = function(global,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["framesToPop","name"]],"~:compiled-at",1577334979951,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$invariant$browser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiDlGD,MAAAC,QAAA,CA5BgBC,QAAQ,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,CAApB,CAAuBC,CAAvB,CAA0BC,CAA1B,CAA6BC,CAA7B,CAAgCC,CAAhC,CAAmCC,CAAnC,CAAsC,CAE1D,GAAeC,IAAAA,EAAf,GAAIP,MAAJ,CACE,KAAUQ,MAAJ,CAAU,8CAAV,CAAN,CAIJ,GAAI,CAACT,SAAL,CAAgB,CAEd,GAAeQ,IAAAA,EAAf,GAAIP,MAAJ,CACES,SAAA,CAAYD,KAAJ,CACN,+HADM,CADV,KAKO,CACL,IAAIE,KAAO,CAACT,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAaC,CAAb,CAAgBC,CAAhB,CAAX,CACIK,SAAW,CACfF,UAAA,CAAYD,KAAJ,CACNR,MAAAY,QAAA,CAAe,KAAf,CAAsB,QAAQ,EAAG,CAAE,MAAOF,KAAA,CAAKC,QAAA,EAAL,CAAT,CAAjC,CADM,CAGRF;SAAAI,KAAA,CAAa,qBANR,CASPJ,SAAAK,YAAA,CAAoB,CACpB,MAAML,UAAN,CAjBc,CAP4C,CArBoC;\",\n\"sources\":[\"node_modules/invariant/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$invariant$browser\\\"] = function(global,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n'use strict';\\n\\n/**\\n * Use invariant() to assert state which your program assumes to be true.\\n *\\n * Provide sprintf-style format (only %s is supported) and arguments\\n * to provide information about what broke and what you were\\n * expecting.\\n *\\n * The invariant message will be stripped in production, but the invariant\\n * will remain to ensure logic does not differ in production.\\n */\\n\\nvar invariant = function(condition, format, a, b, c, d, e, f) {\\n  if (process.env.NODE_ENV !== 'production') {\\n    if (format === undefined) {\\n      throw new Error('invariant requires an error message argument');\\n    }\\n  }\\n\\n  if (!condition) {\\n    var error;\\n    if (format === undefined) {\\n      error = new Error(\\n        'Minified exception occurred; use the non-minified dev environment ' +\\n        'for the full error message and additional helpful warnings.'\\n      );\\n    } else {\\n      var args = [a, b, c, d, e, f];\\n      var argIndex = 0;\\n      error = new Error(\\n        format.replace(/%s/g, function() { return args[argIndex++]; })\\n      );\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // we don't care about invariant's own frame\\n    throw error;\\n  }\\n};\\n\\nmodule.exports = invariant;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"invariant\",\"condition\",\"format\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"undefined\",\"Error\",\"error\",\"args\",\"argIndex\",\"replace\",\"name\",\"framesToPop\"]\n}\n"]