["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mapbox/point-geometry/index.js"],"~:js","shadow$provide.module$node_modules$$mapbox$point_geometry$index=function(global,require,module,exports){function Point(x,y){this.x=x;this.y=y}module.exports=Point;Point.prototype={clone:function(){return new Point(this.x,this.y)},add:function(p){return this.clone()._add(p)},sub:function(p){return this.clone()._sub(p)},multByPoint:function(p){return this.clone()._multByPoint(p)},divByPoint:function(p){return this.clone()._divByPoint(p)},mult:function(k){return this.clone()._mult(k)},div:function(k){return this.clone()._div(k)},\nrotate:function(a){return this.clone()._rotate(a)},rotateAround:function(a,p){return this.clone()._rotateAround(a,p)},matMult:function(m){return this.clone()._matMult(m)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(other){return this.x===other.x&&this.y===other.y},dist:function(p){return Math.sqrt(this.distSqr(p))},distSqr:function(p){var dx=\np.x-this.x;p=p.y-this.y;return dx*dx+p*p},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(b){return Math.atan2(this.y-b.y,this.x-b.x)},angleWith:function(b){return this.angleWithSep(b.x,b.y)},angleWithSep:function(x,y){return Math.atan2(this.x*y-this.y*x,this.x*x+this.y*y)},_matMult:function(m){var y=m[2]*this.x+m[3]*this.y;this.x=m[0]*this.x+m[1]*this.y;this.y=y;return this},_add:function(p){this.x+=p.x;this.y+=p.y;return this},_sub:function(p){this.x-=p.x;this.y-=p.y;return this},\n_mult:function(k){this.x*=k;this.y*=k;return this},_div:function(k){this.x/=k;this.y/=k;return this},_multByPoint:function(p){this.x*=p.x;this.y*=p.y;return this},_divByPoint:function(p){this.x/=p.x;this.y/=p.y;return this},_unit:function(){this._div(this.mag());return this},_perp:function(){var y=this.y;this.y=this.x;this.x=-y;return this},_rotate:function(angle){var cos=Math.cos(angle);angle=Math.sin(angle);var y=angle*this.x+cos*this.y;this.x=cos*this.x-angle*this.y;this.y=y;return this},_rotateAround:function(angle,\np){var cos=Math.cos(angle);angle=Math.sin(angle);var y=p.y+angle*(this.x-p.x)+cos*(this.y-p.y);this.x=p.x+cos*(this.x-p.x)-angle*(this.y-p.y);this.y=y;return this},_round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}};Point.convert=function(a){return a instanceof Point?a:Array.isArray(a)?new Point(a[0],a[1]):a}}","~:source","shadow$provide[\"module$node_modules$$mapbox$point_geometry$index\"] = function(global,require,module,exports) {\n'use strict';\n\nmodule.exports = Point;\n\n/**\n * A standalone point geometry with useful accessor, comparison, and\n * modification methods.\n *\n * @class Point\n * @param {Number} x the x-coordinate. this could be longitude or screen\n * pixels, or any other sort of unit.\n * @param {Number} y the y-coordinate. this could be latitude or screen\n * pixels, or any other sort of unit.\n * @example\n * var point = new Point(-77, 38);\n */\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n\n    /**\n     * Clone this point, returning a new point that can be modified\n     * without affecting the old one.\n     * @return {Point} the clone\n     */\n    clone: function() { return new Point(this.x, this.y); },\n\n    /**\n     * Add this point's x & y coordinates to another point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    add:     function(p) { return this.clone()._add(p); },\n\n    /**\n     * Subtract this point's x & y coordinates to from point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    sub:     function(p) { return this.clone()._sub(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    multByPoint:    function(p) { return this.clone()._multByPoint(p); },\n\n    /**\n     * Divide this point's x & y coordinates by point,\n     * yielding a new point.\n     * @param {Point} p the other point\n     * @return {Point} output point\n     */\n    divByPoint:     function(p) { return this.clone()._divByPoint(p); },\n\n    /**\n     * Multiply this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    mult:    function(k) { return this.clone()._mult(k); },\n\n    /**\n     * Divide this point's x & y coordinates by a factor,\n     * yielding a new point.\n     * @param {Point} k factor\n     * @return {Point} output point\n     */\n    div:     function(k) { return this.clone()._div(k); },\n\n    /**\n     * Rotate this point around the 0, 0 origin by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @return {Point} output point\n     */\n    rotate:  function(a) { return this.clone()._rotate(a); },\n\n    /**\n     * Rotate this point around p point by an angle a,\n     * given in radians\n     * @param {Number} a angle to rotate around, in radians\n     * @param {Point} p Point to rotate around\n     * @return {Point} output point\n     */\n    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },\n\n    /**\n     * Multiply this point by a 4x1 transformation matrix\n     * @param {Array<Number>} m transformation matrix\n     * @return {Point} output point\n     */\n    matMult: function(m) { return this.clone()._matMult(m); },\n\n    /**\n     * Calculate this point but as a unit vector from 0, 0, meaning\n     * that the distance from the resulting point to the 0, 0\n     * coordinate will be equal to 1 and the angle from the resulting\n     * point to the 0, 0 coordinate will be the same as before.\n     * @return {Point} unit vector point\n     */\n    unit:    function() { return this.clone()._unit(); },\n\n    /**\n     * Compute a perpendicular point, where the new y coordinate\n     * is the old x coordinate and the new x coordinate is the old y\n     * coordinate multiplied by -1\n     * @return {Point} perpendicular point\n     */\n    perp:    function() { return this.clone()._perp(); },\n\n    /**\n     * Return a version of this point with the x & y coordinates\n     * rounded to integers.\n     * @return {Point} rounded point\n     */\n    round:   function() { return this.clone()._round(); },\n\n    /**\n     * Return the magitude of this point: this is the Euclidean\n     * distance from the 0, 0 coordinate to this point's x and y\n     * coordinates.\n     * @return {Number} magnitude\n     */\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Judge whether this point is equal to another point, returning\n     * true or false.\n     * @param {Point} other the other point\n     * @return {boolean} whether the points are equal\n     */\n    equals: function(other) {\n        return this.x === other.x &&\n               this.y === other.y;\n    },\n\n    /**\n     * Calculate the distance from this point to another point\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    /**\n     * Calculate the distance from this point to another point,\n     * without the square root step. Useful if you're comparing\n     * relative distances.\n     * @param {Point} p the other point\n     * @return {Number} distance\n     */\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    /**\n     * Get the angle from the 0, 0 coordinate to this point, in radians\n     * coordinates.\n     * @return {Number} angle\n     */\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    /**\n     * Get the angle from this point to another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    /**\n     * Get the angle between this point and another point, in radians\n     * @param {Point} b the other point\n     * @return {Number} angle\n     */\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    /*\n     * Find the angle of the two vectors, solving the formula for\n     * the cross product a x b = |a||b|sin(θ) for θ.\n     * @param {Number} x the x-coordinate\n     * @param {Number} y the y-coordinate\n     * @return {Number} the angle in radians\n     */\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _multByPoint: function(p) {\n        this.x *= p.x;\n        this.y *= p.y;\n        return this;\n    },\n\n    _divByPoint: function(p) {\n        this.x /= p.x;\n        this.y /= p.y;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _rotateAround: function(angle, p) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),\n            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n/**\n * Construct a point from an array if necessary, otherwise if the input\n * is already a Point, or an unknown type, return it unchanged\n * @param {Array<Number>|Point|*} a any kind of input value\n * @return {Point} constructed point, or passed-through value.\n * @example\n * // this\n * var point = Point.convert([0, 1]);\n * // is equivalent to\n * var point = new Point(0, 1);\n */\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["_round","_mult","_add","_unit","sub","_perp","prototype","_matMult","x","convert","perp","angleWith","mult","rotateAround","angleTo","angle","angleWithSep","_rotateAround","_multByPoint","mag","_rotate","_div","_divByPoint","div","matMult","y","clone","unit","multByPoint","_sub","add","dist","distSqr","round","rotate","divByPoint","equals"]],"~:compiled-at",1577908996492,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mapbox$point_geometry$index.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@mapbox/point-geometry/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mapbox$point_geometry$index\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nmodule.exports = Point;\\n\\n/**\\n * A standalone point geometry with useful accessor, comparison, and\\n * modification methods.\\n *\\n * @class Point\\n * @param {Number} x the x-coordinate. this could be longitude or screen\\n * pixels, or any other sort of unit.\\n * @param {Number} y the y-coordinate. this could be latitude or screen\\n * pixels, or any other sort of unit.\\n * @example\\n * var point = new Point(-77, 38);\\n */\\nfunction Point(x, y) {\\n    this.x = x;\\n    this.y = y;\\n}\\n\\nPoint.prototype = {\\n\\n    /**\\n     * Clone this point, returning a new point that can be modified\\n     * without affecting the old one.\\n     * @return {Point} the clone\\n     */\\n    clone: function() { return new Point(this.x, this.y); },\\n\\n    /**\\n     * Add this point's x & y coordinates to another point,\\n     * yielding a new point.\\n     * @param {Point} p the other point\\n     * @return {Point} output point\\n     */\\n    add:     function(p) { return this.clone()._add(p); },\\n\\n    /**\\n     * Subtract this point's x & y coordinates to from point,\\n     * yielding a new point.\\n     * @param {Point} p the other point\\n     * @return {Point} output point\\n     */\\n    sub:     function(p) { return this.clone()._sub(p); },\\n\\n    /**\\n     * Multiply this point's x & y coordinates by point,\\n     * yielding a new point.\\n     * @param {Point} p the other point\\n     * @return {Point} output point\\n     */\\n    multByPoint:    function(p) { return this.clone()._multByPoint(p); },\\n\\n    /**\\n     * Divide this point's x & y coordinates by point,\\n     * yielding a new point.\\n     * @param {Point} p the other point\\n     * @return {Point} output point\\n     */\\n    divByPoint:     function(p) { return this.clone()._divByPoint(p); },\\n\\n    /**\\n     * Multiply this point's x & y coordinates by a factor,\\n     * yielding a new point.\\n     * @param {Point} k factor\\n     * @return {Point} output point\\n     */\\n    mult:    function(k) { return this.clone()._mult(k); },\\n\\n    /**\\n     * Divide this point's x & y coordinates by a factor,\\n     * yielding a new point.\\n     * @param {Point} k factor\\n     * @return {Point} output point\\n     */\\n    div:     function(k) { return this.clone()._div(k); },\\n\\n    /**\\n     * Rotate this point around the 0, 0 origin by an angle a,\\n     * given in radians\\n     * @param {Number} a angle to rotate around, in radians\\n     * @return {Point} output point\\n     */\\n    rotate:  function(a) { return this.clone()._rotate(a); },\\n\\n    /**\\n     * Rotate this point around p point by an angle a,\\n     * given in radians\\n     * @param {Number} a angle to rotate around, in radians\\n     * @param {Point} p Point to rotate around\\n     * @return {Point} output point\\n     */\\n    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },\\n\\n    /**\\n     * Multiply this point by a 4x1 transformation matrix\\n     * @param {Array<Number>} m transformation matrix\\n     * @return {Point} output point\\n     */\\n    matMult: function(m) { return this.clone()._matMult(m); },\\n\\n    /**\\n     * Calculate this point but as a unit vector from 0, 0, meaning\\n     * that the distance from the resulting point to the 0, 0\\n     * coordinate will be equal to 1 and the angle from the resulting\\n     * point to the 0, 0 coordinate will be the same as before.\\n     * @return {Point} unit vector point\\n     */\\n    unit:    function() { return this.clone()._unit(); },\\n\\n    /**\\n     * Compute a perpendicular point, where the new y coordinate\\n     * is the old x coordinate and the new x coordinate is the old y\\n     * coordinate multiplied by -1\\n     * @return {Point} perpendicular point\\n     */\\n    perp:    function() { return this.clone()._perp(); },\\n\\n    /**\\n     * Return a version of this point with the x & y coordinates\\n     * rounded to integers.\\n     * @return {Point} rounded point\\n     */\\n    round:   function() { return this.clone()._round(); },\\n\\n    /**\\n     * Return the magitude of this point: this is the Euclidean\\n     * distance from the 0, 0 coordinate to this point's x and y\\n     * coordinates.\\n     * @return {Number} magnitude\\n     */\\n    mag: function() {\\n        return Math.sqrt(this.x * this.x + this.y * this.y);\\n    },\\n\\n    /**\\n     * Judge whether this point is equal to another point, returning\\n     * true or false.\\n     * @param {Point} other the other point\\n     * @return {boolean} whether the points are equal\\n     */\\n    equals: function(other) {\\n        return this.x === other.x &&\\n               this.y === other.y;\\n    },\\n\\n    /**\\n     * Calculate the distance from this point to another point\\n     * @param {Point} p the other point\\n     * @return {Number} distance\\n     */\\n    dist: function(p) {\\n        return Math.sqrt(this.distSqr(p));\\n    },\\n\\n    /**\\n     * Calculate the distance from this point to another point,\\n     * without the square root step. Useful if you're comparing\\n     * relative distances.\\n     * @param {Point} p the other point\\n     * @return {Number} distance\\n     */\\n    distSqr: function(p) {\\n        var dx = p.x - this.x,\\n            dy = p.y - this.y;\\n        return dx * dx + dy * dy;\\n    },\\n\\n    /**\\n     * Get the angle from the 0, 0 coordinate to this point, in radians\\n     * coordinates.\\n     * @return {Number} angle\\n     */\\n    angle: function() {\\n        return Math.atan2(this.y, this.x);\\n    },\\n\\n    /**\\n     * Get the angle from this point to another point, in radians\\n     * @param {Point} b the other point\\n     * @return {Number} angle\\n     */\\n    angleTo: function(b) {\\n        return Math.atan2(this.y - b.y, this.x - b.x);\\n    },\\n\\n    /**\\n     * Get the angle between this point and another point, in radians\\n     * @param {Point} b the other point\\n     * @return {Number} angle\\n     */\\n    angleWith: function(b) {\\n        return this.angleWithSep(b.x, b.y);\\n    },\\n\\n    /*\\n     * Find the angle of the two vectors, solving the formula for\\n     * the cross product a x b = |a||b|sin(\\u03b8) for \\u03b8.\\n     * @param {Number} x the x-coordinate\\n     * @param {Number} y the y-coordinate\\n     * @return {Number} the angle in radians\\n     */\\n    angleWithSep: function(x, y) {\\n        return Math.atan2(\\n            this.x * y - this.y * x,\\n            this.x * x + this.y * y);\\n    },\\n\\n    _matMult: function(m) {\\n        var x = m[0] * this.x + m[1] * this.y,\\n            y = m[2] * this.x + m[3] * this.y;\\n        this.x = x;\\n        this.y = y;\\n        return this;\\n    },\\n\\n    _add: function(p) {\\n        this.x += p.x;\\n        this.y += p.y;\\n        return this;\\n    },\\n\\n    _sub: function(p) {\\n        this.x -= p.x;\\n        this.y -= p.y;\\n        return this;\\n    },\\n\\n    _mult: function(k) {\\n        this.x *= k;\\n        this.y *= k;\\n        return this;\\n    },\\n\\n    _div: function(k) {\\n        this.x /= k;\\n        this.y /= k;\\n        return this;\\n    },\\n\\n    _multByPoint: function(p) {\\n        this.x *= p.x;\\n        this.y *= p.y;\\n        return this;\\n    },\\n\\n    _divByPoint: function(p) {\\n        this.x /= p.x;\\n        this.y /= p.y;\\n        return this;\\n    },\\n\\n    _unit: function() {\\n        this._div(this.mag());\\n        return this;\\n    },\\n\\n    _perp: function() {\\n        var y = this.y;\\n        this.y = this.x;\\n        this.x = -y;\\n        return this;\\n    },\\n\\n    _rotate: function(angle) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle),\\n            x = cos * this.x - sin * this.y,\\n            y = sin * this.x + cos * this.y;\\n        this.x = x;\\n        this.y = y;\\n        return this;\\n    },\\n\\n    _rotateAround: function(angle, p) {\\n        var cos = Math.cos(angle),\\n            sin = Math.sin(angle),\\n            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),\\n            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\\n        this.x = x;\\n        this.y = y;\\n        return this;\\n    },\\n\\n    _round: function() {\\n        this.x = Math.round(this.x);\\n        this.y = Math.round(this.y);\\n        return this;\\n    }\\n};\\n\\n/**\\n * Construct a point from an array if necessary, otherwise if the input\\n * is already a Point, or an unknown type, return it unchanged\\n * @param {Array<Number>|Point|*} a any kind of input value\\n * @return {Point} constructed point, or passed-through value.\\n * @example\\n * // this\\n * var point = Point.convert([0, 1]);\\n * // is equivalent to\\n * var point = new Point(0, 1);\\n */\\nPoint.convert = function (a) {\\n    if (a instanceof Point) {\\n        return a;\\n    }\\n    if (Array.isArray(a)) {\\n        return new Point(a[0], a[1]);\\n    }\\n    return a;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Point\",\"x\",\"y\",\"prototype\",\"clone\",\"add\",\"p\",\"_add\",\"sub\",\"_sub\",\"multByPoint\",\"_multByPoint\",\"divByPoint\",\"_divByPoint\",\"mult\",\"k\",\"_mult\",\"div\",\"_div\",\"rotate\",\"a\",\"_rotate\",\"rotateAround\",\"_rotateAround\",\"matMult\",\"m\",\"_matMult\",\"unit\",\"_unit\",\"perp\",\"_perp\",\"round\",\"_round\",\"mag\",\"Math\",\"sqrt\",\"equals\",\"other\",\"dist\",\"distSqr\",\"dx\",\"dy\",\"angle\",\"atan2\",\"angleTo\",\"b\",\"angleWith\",\"angleWithSep\",\"cos\",\"sin\",\"convert\",\"Point.convert\",\"Array\",\"isArray\"]\n}\n"]