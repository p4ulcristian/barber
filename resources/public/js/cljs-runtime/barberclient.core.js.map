{"version":3,"sources":["barberclient/core.cljs"],"mappings":"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","names":["js/flatpickr.l10ns.default","js/barberclient","js/barberclient.core","js/barberclient.core.app-state","barberclient.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","barberclient.core/google-map-styles","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON","barberclient.core/tr","the-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","barberclient.core/get-month-name","number","G__75099","barberclient.core/validate-email","email","pattern","and__4120__auto__","cljs.core/re-matches","barberclient.core/validate-phone","text","barberclient.core/validate-name","barberclient.core/to-readable-date","date-str","vec__75100","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","year","month","day","clojure.string.split.cljs$core$IFn$_invoke$arity$2","barberclient.core/ready-anim","element","js/document","js/window","barberclient.core/get-day-from-date","date","js/Date","day-code","G__75103","p__75104","map__75105","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","barberclient.core/ajax-get","url","handler","error-handler","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","p__75107","map__75108","barberclient.core/ajax-post","params","ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic","barberclient.core/flatpickr","props","js/module$node_modules$react_flatpickr$build$index.default","barberclient.core/get-init-data","p1__75110#","data","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","employees","services","js/console","cljs.core/first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","js/window.alert","p1__75111#","time","cljs.core/second","js/parseInt","p1__75112#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","p1__75113#","barberclient.core/two-digits","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","barberclient.core/convert-to-time","hours","cljs.core/quot","minutes","cljs.core/mod","barberclient.core/get-today-str","today","barberclient.core/convert-to-opening-hours","the-vector","cljs.core/empty?","vec__75114","start","end","barberclient.core/router","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","barberclient.core/set-chosen","the-key","the-data","cljs.core/assoc-in","barberclient.core/get-chosen","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","barberclient.core/has-chosen?","barberclient.core/convert-free-times-to-reservation-times","coll","length","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","iter__4523__auto__","s__75118","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__75120","cljs.core/chunk-buffer","i__75119","vec__75121","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75117","cljs.core/chunk-rest","vec__75128","cljs.core/cons","cljs.core/rest","brake-start","brake-end","mod-on-start","s__75125","b__75127","i__75126","iter__75124","s__75132","b__75134","i__75133","iter__75131","multiplier","cljs.core.range.cljs$core$IFn$_invoke$arity$1","barberclient.core/free-times->emp","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","till-now","this-one","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$2","a","cljs.core/PersistentVector","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","barberclient.core/merge-free-times","cljs.core/vec","barberclient.core/get-free-times","employee","p1__75135#","brakes-emp","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","barberclient.core/get-free-dates","p1__75136#","new-free-dates","any-free?","barberclient.core/employee","barberclient.core/employees-step","p1__75137#","p2__75138#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","barberclient.core/service","G__75140","cljs.core/Keyword","barberclient.core/services-step","G__75144","p1__75141#","p2__75142#","barberclient.core/one-brake","cljs.core/rand-nth","this-id","p1__75145#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","barberclient.core/decide-day-section","p__75148","vec__75149","barberclient.core/day-section","new-coll","G__75152","p1__75146#","p2__75147#","barberclient.core/date-step","old-times","the-times","reagent.core/create-class","G__75154","cljs.core/clj->js","selected-dates","instance","p1__75153#","cljs.core/group-by","barberclient.core/reserve!","reservation-data","service","language","user-data","res-map","p1__75155#","p1__75156#","G__75157","barberclient.core/reserve-step","p1__75158#","p1__75159#","p1__75160#","p1__75161#","p1__75162#","p1__75163#","G__75165","G__75166","G__75167","cljs.core/not","p1__75164#","validation","barberclient.core/sending-reservation","new-button","G__75168","G__75169","barberclient.core/steps","barberclient.core/get-el","id","barberclient.core/add-event-listener","el","type","callback","barberclient.core/remove-event-listener","barberclient.core/modal","last-open?","open-fn","cljs.core/reset!","close-fn","esc-listener","no-fn","yes-fn","no-event","enter-listener","yes-event","barberclient.core/header","barberclient.core/with-icon","icon","content","barberclient.core/contact","shop","address","barberclient.core/opening-hours","opening","barberclient.core/google-icon","js/google.maps.Size","js/google.maps.Point","barberclient.core/home-did-mount","this","coordinates","lat","lng","latlng","js/google.maps.LatLng","map-canvas","reagent.core/dom-node","map-options","js/google.maps.Map","the-marker","js/google.maps.Marker","barberclient.core/home-render","barberclient.core/google-maps","p1__75170#","barberclient.core/footer","barberclient.core/one-lng","name","is-active?","barberclient.core/language-button","barberclient.core/client-page","barberclient.core/mount-root","reagent.core.render.cljs$core$IFn$_invoke$arity$2","barberclient.core/?csrf-token","p__75171","map__75172","barberclient.core/local-uri?","uri","cljs.core/re-find","barberclient.core/default-headers","request","p1__75174#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","barberclient.core/load-interceptors!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","ajax.core/default-interceptors","cljs.core/conj","G__75175","ajax.core/to-interceptor","barberclient.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","cljs.core/chunk-first"],"sourcesContent":["(ns barberclient.core\n  (:require\n    [reagent.core :as reagent :refer [atom]]\n    [reagent.session :as session]\n    [reitit.frontend :as reitit]\n    [clerk.core :as clerk]\n    [react-flatpickr :default Flatpickr]\n    [ajax.core :as ajax :refer [GET POST]]\n    [\"flatpickr/dist/l10n/hu.js\" :refer (Hungarian)]\n    ;[\"flatpickr/dist/l10n/en.js\" :refer (English)]\n    [accountant.core :as accountant]\n    [cljs.reader :refer [read-string]]))\n\n(set! (.-firstDayOfWeek js/flatpickr.l10ns.default) 1)\n\n(defonce app-state\n  (atom {:language :hu\n         :employees nil\n         :services nil\n         :opening-hours nil\n         :cart []\n         :user-data {:name nil\n                     :email nil\n                     :phone nil\n                     :agreement false\n                     :marketing false}\n         :validation {:name nil\n                      :email nil\n                      :phone nil}\n         :free-dates []\n         :free-times []\n         :today nil\n         :sending nil\n         :modal false\n         :reservation {}\n         :shop-data nil}))\n\n(def google-map-styles\n  (js->clj (.parse js/JSON\n                   \"[\\n  {\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#212121\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"elementType\\\": \\\"labels.icon\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"visibility\\\": \\\"off\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#757575\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"elementType\\\": \\\"labels.text.stroke\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#212121\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"administrative\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#757575\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"administrative.country\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#9e9e9e\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"administrative.land_parcel\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"visibility\\\": \\\"off\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"administrative.locality\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#bdbdbd\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"poi\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#757575\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"poi.park\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#181818\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"poi.park\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#616161\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"poi.park\\\",\\n    \\\"elementType\\\": \\\"labels.text.stroke\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#1b1b1b\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road\\\",\\n    \\\"elementType\\\": \\\"geometry.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#2c2c2c\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#8a8a8a\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road.arterial\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#373737\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road.highway\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#3c3c3c\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road.highway.controlled_access\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#4e4e4e\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"road.local\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#616161\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"transit\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#757575\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"water\\\",\\n    \\\"elementType\\\": \\\"geometry\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#000000\\\"\\n      }\\n    ]\\n  },\\n  {\\n    \\\"featureType\\\": \\\"water\\\",\\n    \\\"elementType\\\": \\\"labels.text.fill\\\",\\n    \\\"stylers\\\": [\\n      {\\n        \\\"color\\\": \\\"#3d3d3d\\\"\\n      }\\n    ]\\n  }\\n]\\n\")))\n\n(defn tr [the-map]\n  (get the-map (:language @app-state) \"not found\"))\n\n(defn get-month-name [number]\n  (case number\n    \"01\" (tr {:hu \"jan.\" :en\"jan.\"})\n    \"02\" (tr {:hu \"febr.\" :en \"febr.\"})\n    \"03\" (tr {:hu \"marc.\":en\"marc.\"})\n    \"04\" (tr {:hu \"\u00e1pr.\" :en \"apr.\"})\n    \"05\" (tr {:hu \"m\u00e1j.\":en\"may\"})\n    \"06\" (tr {:hu \"j\u00fan.\" :en \"june\"})\n    \"07\" (tr {:hu \"j\u00fal.\" :en \"july\"})\n    \"08\" (tr {:hu \"aug.\" :en \"aug.\"})\n    \"09\" (tr {:hu \"szept.\" :en \"sept.\"})\n    \"10\" (tr {:hu \"okt.\" :en \"oct.\"})\n    \"11\" (tr {:hu \"nov.\" :en \"nov.\"})\n    \"12\" (tr {:hu \"dec.\" :en \"dec.\"})\n    \"no such month\"))\n\n\n(defn validate-email\n  [email]\n  (let [pattern #\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\"]\n    (if (and (string? email) (re-matches pattern email))\n      true\n      false)))\n\n(defn validate-phone\n  [text]\n  (let [pattern #\"[0-9]{9}\"]\n    (if (re-matches pattern text)\n      true\n      false)))\n\n(defn validate-name\n  [text]\n  (let [pattern #\".{3,50}\"]\n    (if (re-matches pattern text)\n      true\n      false)))\n\n(defn to-readable-date [date-str]\n  (let [[year month day] (clojure.string/split date-str \"-\")]\n    (str year \" \" (get-month-name month) \" \"\n         day)))\n\n\n(defn ready-anim []\n  (let [element (.getElementById js/document \"x-loader\")]\n    (.add (.-classList element) \"animated-hide\")\n    (.setTimeout js/window\n                 #(aset (.-style element) \"display\" \"none\")\n                 1500)))\n\n(defn get-day-from-date [year month day]\n  (let [date (new js/Date year (dec month) day)\n        day-code (.getDay date)]\n    (case day-code\n      1 :monday\n      2 :tuesday\n      3 :wednesday\n      4 :thursday\n      5 :friday\n      6 :saturday\n      0 :sunday\n      :unknown)))\n\n\n\n\n\n(defn ajax-get [{:keys [url handler error-handler]}]\n  (GET url\n       {:handler handler\n        :error-handler error-handler}))\n\n\n(defn ajax-post [{:keys [url handler error-handler params]}]\n  (POST url\n        {:handler handler\n         :params params\n         :error-handler error-handler}))\n\n(defn flatpickr [props]\n  [:> Flatpickr props])\n\n\n(defn get-init-data []\n  (ajax-get {:url \"/get-employees-and-services\"\n             :handler #(let [data (read-string %)\n                             employees (:employees data)\n                             services (:services data)]\n                         (.log js/console (str \"wat\" (first data)))\n                         (swap! app-state assoc\n                                :employees employees\n                                :services services)\n                         (ready-anim))\n\n             :error-handler #(js/window.alert \"Error get-employees-and-services\")})\n  (ajax-get {:url \"/server-time\"\n             :handler #(swap! app-state assoc :actual-time (let [time (clojure.string/split\n                                                                        (second (read-string %))\n                                                                        \":\")]\n                                                             (+\n                                                               (* 60 (js/parseInt (first time)))\n                                                               (js/parseInt (second time))))\n                              :actual-date (first (read-string %)))})\n\n  (ajax-get {:url \"/min-max-date\"\n             :handler #(swap! app-state assoc\n                              :min-max-date (read-string %))\n             :error-handler #(js/window.alert \"Error today\")})\n  (ajax-get {:url \"/shop-data\"\n             :handler #(swap! app-state assoc\n                              :shop-data (read-string %))\n             :error-handler #(js/window.alert \"Error shop-data\")}))\n\n(defn two-digits [number]\n  (if (= (count (str number)) 1)\n    (str \"0\" number)\n    (str number)))\n\n(defn convert-to-time [number]\n  (let [hours (two-digits (quot number 60))\n        minutes (two-digits (mod number 60))]\n    (str hours \":\" minutes)))\n\n(defn get-today-str []\n  (let [today (js/Date.)\n        year (.getFullYear today)\n        month (two-digits (inc (.getMonth today)))\n        date (two-digits (.getDate today))]\n    (str year \"-\" month \"-\" date)))\n\n(defn convert-to-opening-hours [the-vector]\n  (if (or (nil? the-vector)\n          (empty? the-vector))\n    (tr {:hu \"Z\u00e1rva\" :en \"Closed\"})\n    (let [[start end] the-vector]\n      (str (convert-to-time start)\n           \" - \"\n           (convert-to-time end)))))\n\n\n\n\n(def router\n  (reitit/router\n    [[\"/\" :index]]))\n\n(defn set-chosen [the-key the-data]\n  (swap! app-state assoc-in [:reservation the-key] the-data))\n\n(defn get-chosen [the-key]\n  (get-in @app-state [:reservation the-key]))\n\n(defn has-chosen? [the-key]\n  (if (get-in @app-state [:reservation the-key])\n    true false))\n\n\n(defn convert-free-times-to-reservation-times [coll]\n  (let [length (:length (get-chosen :service))]\n    (reduce concat\n            (for [[brake-start brake-end] coll]\n              (let [mod-on-start (mod brake-start 30)\n                    brake-start (if (= 0 mod-on-start)\n                                  brake-start\n                                  (+ brake-start (- 30 mod-on-start)))]\n                (if (<= brake-start (- brake-end length))\n                  (for [multiplier (range (inc (quot (- (- brake-end length)\n                                                        brake-start)\n                                                     30)))]\n                    (+ brake-start (* 30 multiplier)))))))))\n\n\n\n\n(defn free-times->emp [coll]\n  (dissoc (reduce\n            (fn [till-now this-one]\n              (apply assoc till-now\n                     (apply concat (map (fn [a]\n                                          (vector a\n                                                  (conj (get till-now a [])\n                                                        (:employee this-one))))\n                                        (convert-free-times-to-reservation-times\n                                          (:free-times this-one))))))\n            {}\n            coll)\n          nil))\n    ;(convert-free-times-to-reservation-times (:free-times (first coll))))\n\n\n\n\n\n(defn merge-free-times [coll]\n  (vec (map first coll)))\n\n(defn get-free-times [employee date]\n  (ajax-get {:url (str \"/get-free-times/\" employee\n                       \"/\" date)\n             :handler #(do\n                         (let [brakes-emp (free-times->emp (read-string %))]\n                           ;(.log js/console (str \"hello: \" brakes-emp))\n                           (swap! app-state assoc\n                                  :brakes-emp brakes-emp\n                                  :free-times (vec (sort (merge-free-times brakes-emp))))))\n             :error-handler #(.alert js/window \"error free-times\")}))\n\n\n(defn get-free-dates [employee length]\n  (ajax-get {:url (str \"/get-free-dates/\" employee\n                       \"/\" length)\n             :handler #(let [new-free-dates (read-string %)\n                             any-free? (not (empty? new-free-dates))]\n                         (swap! app-state assoc :free-dates new-free-dates)\n                         (if any-free?\n                           (do\n                             (set-chosen :date (first new-free-dates))\n                             (get-free-times employee (first new-free-dates)))))\n\n             :error-handler #(.alert js/window \"error free dates\")}))\n\n(defn employee [data]\n  [:div.uk-text-center.one-item\n   {:role \"button\"\n    :on-click #(set-chosen :employee data)}\n   (str (:name data))])\n\n(defn employees-step []\n  [:div.uk-card.uk-card-default.one-step.playfair.uk-animation-fade\n   [:h3.playfair.one-title {:role \"button\"\n                            :on-click #(do\n                                         (swap! app-state assoc :free-times [])\n                                         (set-chosen :employee nil)\n                                         (set-chosen :start nil))}\n    (if\n      (has-chosen? :employee)\n      (str (:name (get-chosen :employee)))\n      (tr {:hu \"V\u00e1lassz barbert\" :en \"Choose barber\"}))]\n   (if-not\n     (has-chosen? :employee)\n     [:div\n      [employee {:name (tr {:hu \"B\u00e1rki\" :en \"Anyone\"})\n                 :_id \"0\"}]\n      (map-indexed #(-> ^{:key %1}[employee %2])\n                   (sort-by :priority (:employees @app-state)))])])\n\n\n(defn service [data]\n  [:div.one-item.uk-grid-collapse\n   {:data-uk-grid true\n    :on-click #(set-chosen :service data)\n    :role \"button\"}\n   [:div.uk-width-auto\n    (str (case (:language @app-state)\n           :en (:enname data)\n           :hu (:name data)\n           \"not found\"))]\n   [:div.uk-width-expand.uk-text-right\n    (str (:price data) \" Ft\")]])\n\n(defn services-step []\n  [:div.uk-card.uk-card-default.one-step.playfair.uk-animation-fade\n   [:h3.playfair.one-title {:role \"button\"\n                            :on-click #(do\n                                         (swap! app-state assoc :free-times [])\n                                         (set-chosen :start nil)\n                                         (set-chosen :service nil))}\n    (if\n      (has-chosen? :service)\n      (str (case (:language @app-state)\n             :en (:enname (get-chosen :service))\n             :hu (:name (get-chosen :service))\n             \"not found\"))\n      (tr {:hu \"V\u00e1lassz szolg\u00e1ltat\u00e1st\" :en \"Choose service\"}))]\n   (if-not\n     (has-chosen? :service)\n     [:div\n      (map-indexed #(-> ^{:key %1}[service %2])\n                   (sort-by :priority (:services @app-state)))])])\n\n\n\n\n\n\n\n\n\n\n(defn one-brake [time]\n  [:div.playfair {:style {:padding-top \"10px\"\n\n                          :padding-left \"5px\"\n                          :padding-right \"5px\"}};}}\n   [:div.one-brake\n    {:class (if\n              (= time\n                 (get-chosen :start))\n              \"active-brake\")\n     :on-click (fn [a]\n                 (set-chosen :start time)\n                 (.log js/console (str \"hello: \" (rand-nth (get (:brakes-emp @app-state) time))))\n                 (set-chosen :employee (let [this-id (rand-nth (get (:brakes-emp @app-state) time))]\n                                         (first (filter\n                                                  #(= this-id (:_id %))\n                                                  (:employees @app-state))))))}\n\n    (str\n      (convert-to-time time))]])\n\n(defn decide-day-section [number]\n  (cond\n    (< number 720)\n    :morning\n    (and\n      (>= number 720)\n      (< number 1080))\n    :afternoon\n    :else :evening))\n\n\n(defn day-section [[the-key coll]]\n  (let [new-coll coll]\n    [:div\n     (if (not (empty? new-coll))\n       [:h4.uk-margin-remove-bottom.uk-margin-small-left.playfair.one-title\n        (case the-key\n          :morning (tr {:hu \"D\u00e9lel\u0151tt\" :en \"Morning\"})\n          :afternoon (tr {:hu \"D\u00e9lut\u00e1n\" :en \"Afternoon\"})\n          :evening (tr {:hu \"Este\" :en \"Evening\"})\n          \"no such thing\")])\n     [:div.uk-grid-collapse.uk-flex.uk-flex-center.uk-padding-small {:data-uk-grid true}\n      ;(str new-coll)\n      (map-indexed\n        #(-> ^{:key %1}[one-brake %2])\n        new-coll)]]))\n\n(defn date-step []\n  (let [old-times (fn [] (:free-times @app-state))\n        the-times (fn [] (if (= (:actual-date @app-state)\n                                (:date (:reservation @app-state)))\n                           (filter\n                             (fn [a] (< (+ (:actual-time @app-state) 120)\n                                        a))\n                             (old-times))\n                           (old-times)))]\n    (reagent/create-class\n      {:component-did-mount #(get-free-dates\n                               (:_id (get-chosen :employee))\n                               (:length (get-chosen :service)))\n       :reagent-render\n       (fn []\n         [:div.uk-card.uk-card-default.one-step.uk-animation-fade\n          [:h3.playfair.one-title {:on-click #(do\n                                                (set-chosen :start nil))}\n           (if\n             (has-chosen? :date)\n             (str (to-readable-date (get-chosen :date))\n                  (if (has-chosen? :start)\n                    (str \" - \"(convert-to-time (get-chosen :start)))))\n             (tr {:hu \"V\u00e1lassz napot\" :en \"Choose date\"}))]\n          (if-not\n            (has-chosen? :start)\n            [:div\n             [:div.uk-flex-center.uk-flex.uk-padding-small\n              (if (not (empty? (:free-dates @app-state)))\n                (case (:language @app-state)\n                  :en ^{:key 2}[flatpickr {:value (get-chosen :date)\n                                           :options {:enable (clj->js (:free-dates @app-state))\n                                                     :dateformat \"Y-m-d\"\n                                                     :minDate (first (:min-max-date @app-state))\n                                                     :maxDate (second (:min-max-date @app-state))\n                                                     :inline true\n                                                     :locale \"default\"\n                                                     :onChange (fn [selected-dates date-str instance]\n                                                                 (set-chosen :start nil)\n                                                                 (get-free-times\n                                                                   (:_id (get-chosen :employee))\n                                                                   date-str)\n                                                                 (set-chosen :date date-str))}}]\n                  :hu ^{:key 1}[flatpickr {:value (get-chosen :date)\n                                           :options {:enable (clj->js (:free-dates @app-state))\n                                                     :dateformat \"Y-m-d\"\n                                                     :minDate (first (:min-max-date @app-state))\n                                                     :maxDate (second (:min-max-date @app-state))\n                                                     :inline true\n                                                     :locale \"hu\"\n                                                     :onChange (fn [selected-dates date-str instance]\n                                                                (set-chosen :start nil)\n                                                                (get-free-times\n                                                                  (:_id (get-chosen :employee))\n                                                                  date-str)\n                                                                (set-chosen :date date-str))}}]\n                  \"default\")\n                [:div.uk-text-center.playfair\n                 (tr {:hu \"Nincs id\u0151pont. Pr\u00f3b\u00e1ld meg egy m\u00e1sik barberrel vagy szolg\u00e1ltat\u00e1ssal!\"\n                      :en \"No appointments available. Try with another barber or service!\"})])]\n             [:div\n              {:style {:padding-bottom \"20px\"}}\n              ;(str (convert-free-times-to-reservation-times (:free-times @app-state)))\n              (if (not (empty? (the-times)))\n                (map\n                  #(-> ^{:key (first %)}[day-section %])\n                  (group-by decide-day-section\n                            (the-times)))\n                [:div.uk-text-center.uk-padding-small\n                 {:style {:font-size \"1.3em\"}}\n                 (tr {:hu \"A mai napra sajnos m\u00e1r nem tudsz foglalni.\"\n                      :en \"Unfortunately there are no more reservations for today\"})])]])])})))\n\n\n\n\n\n(defn reserve! []\n  (let [reservation-data (:reservation @app-state)\n        employee (:_id (:employee reservation-data))\n        service (:_id (:service reservation-data))\n        date (:date reservation-data)\n        start (:start reservation-data)\n        language (:language @app-state)\n        user-data (:user-data @app-state)\n        res-map {:employee employee\n                 :service-id service\n                 :date date\n                 :start start\n                 :length (:length (:service reservation-data))\n                 :language language\n                 :shop (:_id (:shop-data @app-state))\n                 :user (if\n                         (:phone (:validation @app-state))\n                         user-data\n                         (dissoc user-data :phone))}]\n    (swap! app-state assoc :sending :loading)\n    (ajax-post {:url \"/reserve\"\n                :params res-map\n                :handler #(swap! app-state assoc :sending (case %\n                                                            \"reserved\" :reserved\n                                                            \"success\" :success\n                                                            %))\n                :error-handler #(swap! app-state assoc :sending :fail\n                                       :sending-error (str %))})))\n    ;(swap! app-state assoc :sending :loading)))\n\n(defn reserve-step []\n  (reagent/create-class\n    {:component-did-mount #()\n     :reagent-render\n     (fn []\n       [:div.uk-card.uk-card-default.one-step\n        [:h3.playfair.one-title\n         (tr {:hu \"Foglal\u00e1s r\u00e9szletei\" :en \"Reservation details\"})]\n        [:div.uk-flex-center.uk-flex.uk-padding\n         [:form.uk-width-medium\n          [:div.uk-margin\n           [:div.uk-inline.uk-width-1-1\n            [:span.uk-form-icon {:data-uk-icon \"icon: mail\"}]\n            [:input.uk-input {:class (case (:email (:validation @app-state))\n                                       true \"good-input\"\n                                       false \"bad-input\"\n                                       nil)\n                              :value (get-in @app-state [:user-data :email])\n                              :on-blur #(swap! app-state assoc-in [:validation :email] (validate-email (-> % .-target .-value)))\n                              :on-change #(swap! app-state assoc-in [:user-data :email] (-> % .-target .-value))\n                              :type \"text\" :placeholder (tr {:hu \"E-mail\" :en \"Email\"})}]]]\n          [:div.uk-margin\n           [:div.uk-inline.uk-width-1-1\n            [:span.uk-form-icon {:data-uk-icon \"icon: user\"}]\n            [:input.uk-input {:class (case (:name (:validation @app-state))\n                                       true \"good-input\"\n                                       false \"bad-input\"\n                                       nil)\n                              :on-blur #(swap! app-state assoc-in [:validation :name] (validate-name (-> % .-target .-value)))\n                              :value (get-in @app-state [:user-data :name])\n                              :max-length \"50\"\n                              :on-change #(swap! app-state assoc-in [:user-data :name] (-> % .-target .-value))\n                              :type \"text\" :placeholder (tr {:hu \"N\u00e9v\" :en \"Name\"})}]]]\n\n          [:div.uk-margin\n           [:div.uk-grid-collapse.uk-width-1-1.uk-grid {:data-uk-grid \"true\"}\n            [:div.uk-input.uk-width-auto.uk-padding-remove-vertical\n             [:span {:style {:margin-left \"7px\" :margin-right \"7px\"}\n                     :data-uk-icon \"icon: receiver\"}]\n             [:span \"+36\"]]\n            [:div.uk-width-expand\n             [:input.uk-input {:class (case (:phone (:validation @app-state))\n                                        true \"good-input\"\n                                        false \"bad-input\"\n                                        nil)\n                               :value (get-in @app-state [:user-data :phone])\n                               :on-change #(swap! app-state assoc-in [:user-data :phone]\n                                                  (-> % .-target .-value))\n                               :on-blur #(swap! app-state assoc-in [:validation :phone] (validate-phone (-> % .-target .-value)))\n                               :type \"tel\"\n                               :max-length \"9\"\n                               :placeholder (tr {:hu \"Telefonsz\u00e1m\" :en \"Phone number\"})}]]]]\n\n          [:div.uk-margin.uk-grid-small.uk-child-width-auto.uk-grid\n           [:label\n            [:input.uk-checkbox {:type \"checkbox\"\n                                 :on-change #(swap! app-state assoc-in [:user-data :agreement] (not (:agreement (:user-data @app-state))))\n                                 :checked (:agreement (:user-data @app-state))}]\n            [:span.uk-margin-small-left\n             (tr {:hu \"Elfogadom a \"\n                  :en \"I accept the conditions of the \"})]\n            [:a\n             {;:on-click #(js/window.open \"http://localhost:3000/files/szeged-hozzajarulo.pdf\")\n              :target \"_blank\"\n              :href (str \"http://localhost:3000/files/\" (:_id (:shop-data @app-state))\n                                                        \"-hozzajarulo.pdf\")}\n             (tr {:hu \"hozz\u00e1j\u00e1rul\u00f3 nyilatkozat\"\n                  :en \"statement of consent\"})]\n            (tr {:hu \" \u00e9s az \"\n                 :en \" and the \"})\n            [:a\n             {:target \"_blank\"\n              :href (str \"http://localhost:3000/files/\"\n                         (:_id (:shop-data @app-state))\n                         \"-altalanos.pdf\")}\n             (tr {:hu \"adatkezel\u00e9si t\u00e1j\u00e9koztat\u00f3\"\n                  :en \"data management informant\"})]\n            (tr {:hu \" felt\u00e9teleit.\"\n                 :en \"\"})]]\n\n          [:div.uk-margin.uk-grid-small.uk-child-width-auto.uk-grid\n           [:label\n            [:input.uk-checkbox {:type \"checkbox\"\n                                 :on-change #(swap! app-state assoc-in [:user-data :marketing] (not (:marketing (:user-data @app-state))))\n                                 :checked (:marketing (:user-data @app-state))}]\n            [:span.uk-margin-small-left\n             (tr {:hu \"Hozz\u00e1j\u00e1rulok, hogy szem\u00e9lyreszabott aj\u00e1nlatokat \u00e9s marketing tartalm\u00fa leveleket kapjak.\"\n                  :en \"You allow receiving marketing communications from us.\"})]]]\n          (let [user-data (:user-data @app-state)\n                validation (:validation @app-state)]\n            [:button.uk-button.uk-button-default.uk-align-center.uk-margin-remove-bottom.uk-margin-small-top.uk-animation-fade\n             {:disabled (if\n                          (and (:email validation) (:name validation)\n                               (:agreement user-data))\n                          false\n                          true)\n\n              :on-click #(do\n                           (.preventDefault %)\n                           (swap! app-state assoc :modal true))}\n             (tr {:hu \"Foglal\u00e1s\"\n                  :en \"Reserve\"})])]]])}))\n\n\n\n\n(defn sending-reservation []\n  (let [new-button [:button.uk-button.uk-button-default.uk-button-small.uk-margin-top\n                    {:on-click #(do\n                                  (.log js/console (str @app-state))\n                                  (swap! app-state assoc :sending nil)\n                                  (set-chosen :start nil)\n                                  (set-chosen :date nil)\n                                  (get-free-dates\n                                    (:_id (get-chosen :employee))\n                                    (:length (get-chosen :service))))}\n\n                    (tr {:hu \"\u00daj foglal\u00e1s\"\n                         :en \"New reservation\"})]]\n\n    (if (:sending @app-state)\n      [:div.uk-card.uk-card-default.one-step\n       [:h3.playfair.one-title {:on-click #()}\n        (tr\n          (case (:sending @app-state)\n            :loading {:hu \"Feldolgoz\u00e1s alatt...\" :en \"Processing...\"}\n            :success {:hu \"Igazold vissza foglal\u00e1sod!\" :en \"Confirm your reservation!\"}\n            :reserved {:hu \"Foglalt!\" :en \"Already reserved!\"}\n            :fail {:hu \"Sikertelen foglal\u00e1s\" :en \"Unsuccessful reservation\"}\n            {:hu \"Foglal\u00e1sok: \" :en \"Reservations: \"}))]\n       [:div\n        [:div.uk-flex-center.uk-flex.uk-padding-small\n         (case (:sending @app-state)\n           :loading [:div.uk-padding  {:data-uk-spinner \"true\"}]\n           :reserved [:div\n                      [:div.uk-text-center\n                       [:span (tr {:hu \"Id\u0151pontodat id\u0151k\u00f6zben m\u00e1s befoglalta. K\u00f6sz\u00f6nj\u00fck meg\u00e9rt\u00e9sed.\"\n                                   :en \"Your appointment is already reserved by somebody else. Thank you for your understanding.\"})]]\n                      [:div.uk-text-right\n                       new-button]]\n           :success [:div\n                     [:div.uk-text-center\n                      [:span \"Foglal\u00e1s\u00e1hoz a meger\u0151s\u00edt\u0151 emailt elk\u00fcldt\u00fck a(z) '\"]\n                      [:b (:email (:user-data @app-state))]\n                      [:span \"' email c\u00edmre.\"]]\n                     [:div.uk-text-right.uk-margin-large-top\n                      new-button]]\n           :fail [:div (tr {:hu \"A foglal\u00e1s meghi\u00fasult\"\n                            :en \"Reservation failed\"})\n                  [:div (tr {:hu \"A hiba oka: \"\n                             :en \"The reason:\"})\n                   (str (:sending-error @app-state))]\n                  [:div new-button]]\n           (str (:sending @app-state)))]]])))\n\n\n\n(defn steps []\n  [:div.uk-padding\n   [:div.uk-width-large.uk-align-center\n    (if (= nil (:sending @app-state))\n      [:div\n        [employees-step]\n        (if\n          (has-chosen? :employee)\n          [services-step])\n        (if (and\n              (has-chosen? :employee)\n              (has-chosen? :service))\n          [date-step])\n        (if (has-chosen? :start)\n          [reserve-step])])\n    [sending-reservation]]\n   [:div\n    {:style {:background \"url(/main.jpg)\"\n             :background-size \"cover\"\n             :background-repeat \"no-repeat\";\n             :background-position \"center\";\n             :background-color \"#222\"\n             :position \"fixed\"\n             :top 0\n             :left 0\n             :z-index -1\n             :width \"100%\"\n             :height \"100vh\"}}]])\n\n\n\n\n\n\n(defn get-el [id]\n  (.getElementById js/document id))\n\n(defn add-event-listener [el type callback]\n  (.addEventListener el type callback false))\n\n(defn remove-event-listener [el type callback]\n  (.removeEventListener el type callback false))\n\n(defn modal []\n  (let [last-open? (atom false)\n        open-fn (fn [] (reset! last-open? true))\n        close-fn (fn [] (reset! last-open? false))\n        esc-listener (atom nil)\n        no-fn (fn []\n                (do\n                  (swap! app-state assoc :modal false)))\n\n        yes-fn (fn []\n                 (do\n                   (swap! app-state assoc :modal false)\n                   (reserve!)))\n        no-event (fn [a]\n                   (if @last-open?\n                     (if (= 27 (.-which a))\n                       (no-fn))))\n        enter-listener (atom nil)\n        yes-event (fn [a]\n                    (if @last-open?\n                      (if (= 13 (.-which a))\n                        (yes-fn))))]\n    (reagent/create-class\n      {:component-did-mount #(do\n                               (reset! esc-listener no-event)\n                               (reset! enter-listener yes-event)\n                               (add-event-listener js/window \"keydown\" @esc-listener)\n                               (add-event-listener js/window \"keydown\" @enter-listener))\n       :component-will-unmount #(do\n                                  (remove-event-listener js/window \"keydown\" @enter-listener)\n                                  (remove-event-listener js/window \"keydown\" @esc-listener))\n\n       :reagent-render\n       (fn []\n         [:div#modal.uk-inline.uk-animation-fade.uk-animation-fast\n          {:style {:position \"fixed\"\n                   :top 0\n                   :background \"rgba(0,0,0,0.7)\"\n                   :height \"100%\"\n                   :z-index 1000\n                   :width \"100%\"}}\n          [:div\n           {:style {:z-index 5000}}]\n          [:div.uk-position-center.uk-padding-small\n           {:style {:z-index 5001\n                    :background \"white\"\n                    :width \"400px\"\n                    :border-radius \"10px\"\n                    :border \"1px solid black\"}}\n           [:h4.uk-text-center.uk-heading-line [:span (tr {:hu \"Ez az email c\u00edmed?\"\n                                                           :en \"Is this your email address?\"})]]\n           [:p.uk-text.bigger.uk-text-center [:span.the-email (:email (:user-data @app-state))]]\n           (tr {:hu [:p.uk-text-bigger.uk-text-center\n                     \"Ha igen, az \\\"Elfogad\u00e1s\\\" gombra kattintva megkapod fi\u00f3kodba a meger\u0151s\u00edt\u0151 e-mailt ahol vissza tudod \"\n                     [:b \"igazolni\"]\n                     \" foglal\u00e1sodat.\"]\n                :en [:p.uk-text-bigger.uk-text-center\n                     \"If it's correct, click the \\\" Accept\\\" button and we'll send an e-mail to you where you can \"\n                     [:b \"confirm\"]\n                     \" your appointment.\"]})\n           [:div.uk-width-1-1.uk-flex\n            [:button.uk-button.uk-button-default.uk-flex-1\n             {:on-click no-fn}\n             (tr {:hu \"M\u00e9gse\"\n                  :en \"Cancel\"})]\n            [:button.uk-button.uk-button-default.uk-flex-1.uk-margin-left\n             {:on-click yes-fn}\n             (tr {:hu \"Foglal\u00e1s\"\n                  :en \"Reserve\"})]]]])})))\n\n(defn header []\n  [:div\n   {:style { :overflow \"auto\" :background \"#222\"}}\n   [:a\n    {:href \"/\"}\n    [:img.uk-align-center.uk-width-medium.uk-margin-remove-bottom\n     {:src (str \"https://szeged.barbershopbp.hu/logo/\" (:_id (:shop-data @app-state)))}]]])\n   ;(str @app-state)])\n\n(defn with-icon [icon content]\n  [:div.uk-width-large.uk-padding-small {:style {:margin-left \"-40px\"}\n                                         :class \"uk-grid-collapse\" :data-uk-grid true}\n    [:div.uk-width-auto.uk-flex.uk-flex-middle\n     [:span {:data-uk-icon (str \"icon: \" icon)}]]\n    [:div.uk-width-expand.uk-margin-left.uk-text-center\n     {:style {:margin-left \"-20px\"}}\n     content]])\n\n(defn contact []\n  [:div.uk-flex.uk-flex-center.uk-flex-column.uk-margin-bottom\n   {:class \"uk-width-1-1 uk-width-1-2@m\"}\n   [:h3.uk-text-center.playfair (tr {:hu \"Kapcsolat\" :en \"Contact\"})]\n   (let [shop (:shop-data @app-state)\n         address (:contact-address shop)]\n\n     [:div.uk-flex-center.uk-flex.uk-grid-collapse {:data-uk-grid true}\n      [:div.uk-width-large\n       [with-icon\n        \"location\"\n        [:div.uk-text-center\n         [:a {:href (:url address)\n              :target \"_blank\"}\n          [:div (:name address)]\n          [:div (:street address)]\n          [:div (:city address)]]]]\n       [with-icon\n        \"mail\"\n        [:div.uk-text-center\n         [:a {:target \"_blank\"\n              :href (str \"mailto:\" (:email shop))}\n          (:email shop)]]]\n\n       [with-icon\n        \"receiver\"\n        [:div.uk-text-center\n         [:a {:target \"_blank\"\n              :href (str \"tel:\" (:contact-phone shop))}\n           (:contact-phone shop)]]]\n       [with-icon\n        \"facebook\"\n        [:div.uk-text-center\n         [:a {:target \"_blank\"\n              :href (str \"https://www.facebook.com/\" (:facebook shop))}\n          (str \"@\" (:facebook shop))]]]]])])\n\n\n\n(defn opening-hours []\n  [:div.uk-flex.uk-flex-center.uk-flex-column.uk-margin-top\n   {:class \"uk-width-1-1 uk-width-1-2@m\"}\n   [:h3.uk-text-center.playfair (tr {:hu \"Nyitvatart\u00e1s\" :en \"Opening hours\"})]\n   (let [opening (:opening-hours (:shop-data @app-state))]\n     [:div.playfair.uk-grid-collapse.uk-child-width-1-1.uk-text-center.uk-width-large.uk-align-center.uk-margin-remove-top.uk-margin-bottom\n      {:data-uk-grid true}\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"H\u00e9tf\u0151\" :en \"Monday\"})]\n       [:div (convert-to-opening-hours (:monday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"Kedd\" :en \"Tuesday\"})]\n       [:div (convert-to-opening-hours (:tuesday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"Szerda\" :en \"Wednesday\"})]\n       [:div (convert-to-opening-hours (:wednesday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"Cs\u00fct\u00f6rt\u00f6k\" :en \"Thursday\"})]\n       [:div (convert-to-opening-hours (:thursday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"P\u00e9ntek\" :en \"Friday\"})]\n       [:div (convert-to-opening-hours (:friday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"Szombat\" :en \"Saturday\"})]\n       [:div (convert-to-opening-hours (:saturday opening))]]\n      [:div.uk-padding-small.uk-grid-collapse.uk-child-width-1-2.uk-text-center {:data-uk-grid true}\n       [:div (tr {:hu \"Vas\u00e1rnap\" :en \"Sunday\"})]\n       [:div (convert-to-opening-hours (:sunday opening))]]])])\n\n\n(def google-icon\n  {:url \"/img/barbershop.svg\"\n   :scaledSize (js/google.maps.Size. 40 40)\n   :origin (js/google.maps.Point. 0 0)\n   :anchor (js/google.maps.Point. 0 0)})\n\n ;\"AIzaSyAfwbhHb9Dq81Hh4K1I-_7xcho7B7IyCC0\"}\n(defn home-did-mount [this coordinates]\n  (let [lat (first coordinates)\n        lng (second coordinates)\n        latlng (js/google.maps.LatLng. lat lng)\n        map-canvas (reagent/dom-node this)\n        map-options (clj->js {\"center\" latlng\n                              \"zoom\" 17\n                              \"options\" {\"styles\" google-map-styles}})\n        the-map (js/google.maps.Map. map-canvas map-options)\n        the-marker (js/google.maps.Marker.\n                     (clj->js {:position latlng :map the-map :icon google-icon}))]\n    the-marker))\n\n(defn home-render []\n  [:div {:style {:height \"50vh\" :width \"100vw\"}}])\n\n\n(defn google-maps [coordinates]\n  (reagent/create-class {:reagent-render home-render\n                         :component-did-mount #(home-did-mount % coordinates)}))\n\n(defn footer []\n  (let [coordinates (:map-coordinates (:shop-data @app-state))]\n    [:div.uk-card.uk-card-secondary.uk-grid-collapse.playfair\n     {:data-uk-grid true\n      :style {:background \"#222\"}}\n     [opening-hours]\n     [contact]\n     (if coordinates\n       [google-maps coordinates])]))\n\n\n(defn one-lng [name the-key]\n  (let [is-active? (fn [] (= the-key (:language @app-state)))]\n    (fn [name the-key]\n      [:div\n       {:style {:border-top-left-radius \"5px\"\n                :border-bottom-left-radius \"5px\"\n                :background (if (is-active?) \"rgb(255, 226, 38)\" \"transparent\")}}\n       [:div {:on-click #(swap! app-state assoc :language the-key)\n              :style {:cursor \"pointer\"\n                      :padding \"3px 3px 3px 5px\"\n                      :border-top-left-radius \"5px\"\n                      :border-bottom-left-radius \"5px\"\n                      :transform (if (is-active?) \"translateX(-10px)\" \"inherit\")\n                      :transition \"0.2s ease-in\"\n                      :color (if (is-active?) \"#222\" \"white\")\n                      :background (if (is-active?)\n                                    \"rgb(255, 226, 38)\"\n                                    \"#222\")}}\n        [:b name]]])))\n\n(defn language-button []\n  [:div {:data-uk-sticky true}\n   [:div.uk-position-right.uk-margin-top\n\n    [:div\n     [:div.playfair {:style {:border-radius \"5px\"\n                             :font-size \"1.2em\"}}\n      [one-lng \"EN |\" :en]\n      [one-lng \"HU |\" :hu]]]]])\n\n\n(defn client-page []\n  [:div {:style {:min-height \"100vh\"}}\n   (comment [:div.uk-card.uk-card-default\n             (str (:brakes-emp @app-state)\n               \" - \" (:free-times @app-state))])\n   [language-button]\n   (if\n     (:modal @app-state)\n     [modal])\n   [header]\n   [:div.uk-flex.uk-flex-center.uk-flex-column\n    {:style {:min-height \"50vh\"}}\n    ;:background-size \"cover\"}}\n    [steps]]\n   [footer]])\n\n(defn mount-root []\n  (reagent/render [client-page] (.getElementById js/document \"app\")))\n\n\n\n;(defonce _start-once (sente/start!))\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(defn local-uri? [{:keys [uri]}]\n  (not (re-find #\"^\\w+?://\" uri)))\n\n\n(defn default-headers [request]\n  (if (local-uri? request)\n    (-> request\n        (update\n          :headers\n          #(merge\n             {\"Accept\" \"application/transit+json\"\n              \"x-csrf-token\" ?csrf-token}\n             %)))\n    request))\n\n\n(defn load-interceptors! []\n  (swap! ajax/default-interceptors\n         conj\n         (ajax/to-interceptor {:name \"default headers\"\n                               :request default-headers})))\n\n\n\n(defn init! []\n  (get-init-data)\n  (load-interceptors!)\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n    {:nav-handler\n     (fn [path]\n       (let [match (reitit/match-by-path router path)\n             current-page (:name (:data  match))\n             route-params (:path-params match)]\n         (reagent/after-render clerk/after-render!)\n         ;(dispatch [:add-to-db {:current-page current-page\n         ;                       :route-params route-params)\n         (clerk/navigate-page! path)))\n\n     :path-exists?\n     (fn [path]\n       (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n\n"]}