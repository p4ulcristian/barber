{"version":3,"sources":["barber/views.cljs"],"mappings":"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","names":["barber.views/step-minute","barber.views/sidebar-width","barber.views/react-slider","props","js/module$node_modules$react_slider$lib$components$ReactSlider$ReactSlider.default","barber.views/flatpickr","js/module$node_modules$react_flatpickr$build$index.default","p__25506","vec__25507","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","barber.views/one-edit-field","the-key","value","edit?","p__25515","map__25516","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","barber.views/editable","text","update-func","class","type","data","editing?","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","edit-text","reagent.core/create-class","this","old-argv","new-argv","cljs.core/rest","reagent.core/argv","new-data","cljs.core/first","old-data","cljs.core/second","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","p__25518","map__25519","cljs.core/deref","p1__25510#","p1__25511#","p1__25512#","p1__25513#","p1__25514#","G__25521","G__25522","G__25523","cljs.core/Keyword","js/isNaN","js/parseInt","G__25524","re-frame.core/dispatch","G__25525","cljs.core/not","p__25526","map__25527","barber.views/drag-drop-context","component","on-drag-start","on-drag-update","on-drag-end","js/module$node_modules$react_beautiful_dnd$dist$react_beautiful_dnd_cjs.DragDropContext","barber.views/label","title","barber.views/modify-employee-services","services","employee","id","emp-services","get-this-service","service-id","p1__25529#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","modified-service","mod-serv","dispatch-change","G__25531","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","overridden-service","service","emp-service","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__25530#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","the-service","barber.views/employee-services","show-services?","G__25532","re-frame.core/subscribe","barber.views/draggable-content","snapshot","G__25539","G__25540","G__25541","p1__25533#","p1__25534#","p1__25535#","p1__25536#","p1__25537#","p1__25538#","G__25542","G__25543","G__25544","G__25545","G__25546","G__25547","barber.views/dnd-draggable","idx","js/module$node_modules$react_beautiful_dnd$dist$react_beautiful_dnd_cjs.Draggable","provided","reagent.core/as-element","cljs.core/name","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","barber.views/dnd-droppable","js/module$node_modules$react_beautiful_dnd$dist$react_beautiful_dnd_cjs.Droppable","barber.views/dnd","coll","G__25551","p1__25550#","G__25552","G__25553","p1__25549#","p2__25548#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","G__25554","re-frame.core/dispatch-sync","a","G__25555","G__25556","barber.views/two-digits","number","barber.views/str-from-date","date","year","cljs-time.core/year","month","cljs-time.core/month","day","cljs-time.core/day","barber.views/get-tomorrow","date-str","vec__25557","date-splitted","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs_time.core.plus.cljs$core$IFn$_invoke$arity$2","cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$3","cljs_time.core.days.cljs$core$IFn$_invoke$arity$1","barber.views/get-yesterday","vec__25560","cljs_time.core.minus.cljs$core$IFn$_invoke$arity$2","barber.views/anim-to","element","timeout","the-map","js/TweenMax","cljs.core/clj->js","barber.views/set-gsap","p__25565","map__25566","barber.views/todo-input","on-save","on-stop","val","stop","save","v","clojure.string/trim","p1__25563#","p1__25564#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__25568","barber.views/get-el","js/document","barber.views/add-event-listener","el","callback","barber.views/remove-event-listener","barber.views/grid-width","barber.views/grid-height","barber.views/step-height","barber.views/border-width","barber.views/title-height","barber.views/abs","n","x__4219__auto__","y__4220__auto__","barber.views/round-to-grid","left","top","grid-left","cljs.core/quot","grid-right","grid-top","grid-bottom","final-left","final-top","barber.views/round-to-height","height","height-bot","height-top","barber.views/scroll-interval","barber.views/last-scroll-pos","barber.views/rect","barber.views/anim-frame-request","func","js/window","barber.views/get-service-by-id","G__25570","p1__25569#","js/barber","js/barber.views","js/barber.views.dragging?","barber.views/dragging?","barber.views/get-employee","emp","p1__25571#","G__25572","barber.views/extend-opening-hours","open-hours","barber.views/get-start","minutes","opening-hours","G__25573","selected-day","G__25574","get-pos-now","barber.views/convert-to-time","hours","cljs.core/mod","barber.views/hovered?","barber.views/one-event","start-left","start-top","start-height","the-event","length","drag-end-listener","drag-move-listener","scroll-listener","not-real-scroll?","dragged?","last-mouse-pos","calc-left","calc-top","left-temporary","top-temporary","height-temporary","remove-mouse-move","remove-mouse-up","remove-touch-move","remove-touch-end","remove-scroll","remove-all","is-touch?","event","clojure.string/includes?","get-pos","scroll-event","and__4120__auto__","stop-resize","G__25578","resize","rect-width","rect-height","new-height","mouse-down-resize","scroll-if-close","mouse-top","mouse-left","rect-left","scroll-width","inner-height","inner-width","how-much-scroll-y","how-much-scroll-x","px-number","on-pan-end","rounded","G__25579","on-pan","container","rect-top","position","click-left","click-top","new-left","new-top","on-pan-start","or__4131__auto__","cljs.core/map?","p1__25576#","p1__25577#","p1__25575#","cljs.core/some","G__25580","G__25581","G__25582","G__25583","barber.views/one-person","name","js/navigator.clipboard.writeText","barber.views/map-row-title","times","p1__25584#","p2__25585#","barber.views/only-positive","barber.views/map-column-title","employees","offset-top","col-i","barber.views/check-if-in-range","brakes","p1__25586#","start","finish","barber.views/is-break?","this-time","barber.views/one-cell","row-i","time","selected-date","G__25587","G__25588","G__25589","barber.views/map-calendar","rows","columns","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","barber.views/actual-time-sign","elapsed-time","now","js/Date","str-date","G__25590","in-minutes","interval","one-minute-step","G__25591","G__25592","all-minutes","x__4222__auto__","y__4223__auto__","barber.views/one-brake","column","row","barber.views/calendar","G__25595","G__25596","reservations","G__25597","G__25598","G__25599","this-open-hours","get-column-number","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","index","get-row-number","all-columns","all-rows","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$2","keydown-interval","G__25600","G__25601","running?","G__25602","b","p1__25594#","p2__25593#","col","p__25603","vec__25604","barber","barber-brakes","cljs.core/vector?","one-brake-data","cljs.core/random-uuid","vec__25607","barber.views/home-page","server-time","G__25610","post-request","G__25611","G__25612","G__25613","G__25614","G__25615","G__25616","G__25617","barber.views/calendar-loader","calendar-data-loaded?","G__25618","G__25619","G__25620","barber.views/input-width","barber.views/input-wrapper","content","barber.views/simple-input","config","the-atom","p1__25621#","rand-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","barber.views/date-input","p1__25622#","barber.views/convert-to-minutes","vec__25623","barber.views/time-input","p1__25626#","p1__25627#","rand-id2","barber.views/select-employee","G__25630","p1__25629#","p2__25628#","barber.views/select-service","G__25634","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","p1__25631#","p1__25633#","p2__25632#","barber.views/reservation-editor","data-atom","editor-atom","user-data","G__25635","esc-listener","no-fn","G__25636","yes-fn","G__25637","G__25638","esc-fn","enter-listener","enter-fn","cljs.core/contains?","barber.views/menu-item","menu?","G__25639","barber.views/menu","barber.views/sidebar-content","G__25640","G__25641","editor-data","G__25642","user","G__25643","today","G__25644","selected-dates","instance","G__25645","barber.views/calendar-sidebar","open?","G__25646","last-open?","close-func","open-func","G__25647","barber.views/this-date","selected-date-and-day","G__25648","G__25649","G__25650","G__25651","day-name","day-key","G__25652","month-name","month-number","G__25653","date-in-str","vec__25654","G__25657","G__25658","cljs.core/count","G__25659","G__25660","barber.views/calendar-page","websocket?","G__25661","G__25662","barber.views/modal","sidebar-open?","G__25663","modal-state","G__25664","open-fn","close-fn","G__25665","fexpr__25666","G__25667","fexpr__25668","no-event","yes-event","barber.views/brakes-slider","brake-coll","brake-types","G__25671","brake-not-exists?","this-brake","cljs.core/empty?","p1__25669#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","add-brakes","p1__25670#","state","cljs.core/odd?","G__25672","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","barber.views/toggle-remove-add","item","p1__25673#","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","p1__25674#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","barber.views/employee-for-brake","p1__25675#","barber.views/employees-for-brakes","emps","G__25678","p1__25676#","p2__25677#","barber.views/brake-type","selected-brake-types","selected-brakes","G__25681","p1__25680#","p2__25679#","vec__25682","barber.views/brake-types","G__25687","p1__25685#","p2__25686#","barber.views/table-for-brakes","table-data","G__25693","get-emp","p1__25688#","p1__25689#","p2__25690#","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/set","p1__25691#","p2__25692#","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","p__25694","vec__25695","the-idx","time1","time2","cljs.core/group-by","barber.views/brakes","selected-employees","selected-brake-type","G__25698","G__25699","G__25700","G__25701","G__25702","barber.views/clients-page","clients","G__25705","the-count","G__25706","G__25707","G__25708","p1__25703#","p2__25704#","G__25709","barber.views/current-page","actual-page","G__25710","route-params","G__25711","G__25712"],"sourcesContent":["(ns barber.views\n  (:require [reagent.core  :as reagent :refer [atom]]\n            [\"react\" :as react :refer (createElement)]\n            [re-frame.core :refer [subscribe dispatch dispatch-sync]]\n            [clojure.string :as str]\n            [cljs-time.core :as time]\n            [react-flatpickr :default Flatpickr]\n            [react-slider :default ReactSlider]\n            [\"flatpickr/dist/l10n/hu.js\" :refer (Hungarian)]\n            [react-beautiful-dnd :refer (DragDropContext Droppable Draggable)]))\n\n\n            ;[cljsjs.react-beautiful-dnd :refer [DragDropContext Droppable Draggable]]))\n\n\n(def step-minute 15)\n\n(def sidebar-width 340)\n;(def drag-drop-context (reagent/adapt-react-class DragDropContext))\n\n\n(comment (defn netflix-counter [id content props]\n           (reagent/create-class\n             {:component-did-mount #(dispatch [:netflix-counter-init id])\n              :component-did-update #(dispatch [:netflix-counter id])\n              :reagent-render (content props)})))\n\n\n\n\n(defn react-slider [props]\n  [:> ReactSlider props])\n\n\n\n;(def drag-drop-context (reagent/adapt-react-class DragDropContext))\n;(def droppable (reagent/adapt-react-class Droppable))\n;(def draggable (reagent/adapt-react-class Draggable))\n(defn flatpickr [props]\n  [:> Flatpickr props])\n; Example drag-drop-context (typically wraps your whole app)\n\n\n(defn one-edit-field [[the-key value] edit?]\n  [:div])\n\n\n(defn editable [{:keys [text update-func class type]} data]\n  (let [editing? (atom false)\n        edit-text (atom text)]\n    (reagent/create-class\n      {:component-did-update (fn [this old-argv]                ;; reagent provides you the entire \"argv\", not just the \"props\"\n                               (let [new-argv (rest (reagent/argv this))\n                                     new-data (first new-argv)\n                                     old-data (second old-argv)]\n                                 (if (not= (:text new-data)\n                                           (:text old-data))\n                                   (do\n                                     (reset! edit-text (:text new-data))\n                                     (reset! editing? false)))))\n\n       :reagent-render\n       (fn [{:keys [text update-func class type]} data]\n         [:div.editable {:class class}\n          (if @editing?\n            [:div.uk-flex\n             [:input.uk-input.uk-input-small\n              {:style       {:height \"auto\"\n                             :min-width \"40px\"}\n               :type type\n               :on-key-down #(case (.-which %)\n                               13 (do\n                                    (.stopPropagation %)\n                                    (update-func @edit-text)\n                                    (reset! editing? false))\n                               27 (do\n                                    (.stopPropagation %)\n                                    (reset! edit-text text)\n                                    (reset! editing? false))\n                               nil)\n               :on-change   #(do\n                               ;(if check-func (check-func %))\n                               (reset! edit-text\n                                       (case type\n                                         :text (-> % .-target .-value)\n                                         :number (if (js/isNaN (js/parseInt (-> % .-target .-value)))\n                                                   0\n                                                   (js/parseInt (-> % .-target .-value)))\n                                         (-> % .-target .-value))))\n               :auto-focus  true\n               :value       @edit-text}]\n             [:div [:span.uk-text-middle {:data-uk-icon    \"close\"\n                                          :data-uk-tooltip \"M\u00e9gsem\"\n                                          :style           {:min-height \"20px\"\n                                                            :min-width \"30px\"\n                                                            :cursor \"pointer\"}\n                                          :on-click        #(do\n                                                              (.stopPropagation %)\n                                                              (reset! edit-text text)\n                                                              (reset! editing? false))}]]\n             [:div [:span.uk-text-middle {:data-uk-icon    \"check\"\n                                          :data-uk-tooltip \"Ment\u00e9s\"\n                                          :style           {:min-height \"20px\"\n                                                            :min-width \"30px\"\n                                                            :cursor \"pointer\"}\n                                          :on-click        #(do\n                                                              (.stopPropagation %)\n                                                              (dispatch [:set-modal\n                                                                         {:open? true\n                                                                          :content \"Biztos m\u00f3dos\u00edtod?\"\n                                                                          :no-fn (fn [] (reset! edit-text text))\n                                                                          :yes-fn (fn [] (update-func @edit-text))}])\n                                                              (reset! editing? false))}]]]\n            [:div.editable.uk-flex\n             [:div\n              [:b text]]\n             [:span {:width           \"40px\"\n                     :on-click        #(do\n                                         (.stopPropagation %)\n                                         (reset! editing? (not @editing?)))\n                     :data-uk-tooltip \"Szerkeszt\u00e9s\"\n                     :data-uk-icon    \"pencil\" :style {:transform     \"translate(0px, -5px)\"\n                                                       :margin-bottom \"10px\"}}]])])})))\n\n\n\n(defn drag-drop-context [component {:keys [on-drag-start on-drag-update on-drag-end]}]\n  (let []\n    [:> DragDropContext\n     {:onDragStart  on-drag-start\n      :onDragUpdate on-drag-update\n      :onDragEnd    on-drag-end}\n     component]))\n\n(defn label [title component]\n  [:div.uk-flex\n   [:div.uk-margin-small-right title \" \"]\n   component])\n\n\n(defn modify-employee-services [services employee]\n  (let [id (:_id employee)\n        emp-services (:services employee)\n        get-this-service (fn [service-id] (first (filter #(= service-id (:_id %))\n                                                         emp-services)))\n        modified-service (fn [service-id] (let [mod-serv (get-this-service service-id)]\n                                            (if mod-serv mod-serv {})))\n        dispatch-change (fn [id service-id the-key value]\n                          (dispatch [:modify-employee-service id\n                                     (assoc (modified-service service-id)\n                                       the-key value)]))\n        overridden-service (fn [service]\n                             (let [emp-service (get-this-service (:_id service))]\n                               (if emp-service (merge service emp-service)\n                                               service)))]\n\n    [:div\n     (str employee)\n     [:table.uk-table.uk-table-hover\n      [:tr\n       [:th \"N\u00e9v\"]\n       [:th \"Hossz\"]\n       [:th \"\u00c1r\"]\n       [:th \"Rejtett?\"]]\n      (map #(-> ^{:key (random-uuid)} (let [the-service (overridden-service %)\n                                            service-id (:_id the-service)]\n                                        [:tr\n                                         [:td (:name the-service)]\n                                         [:td [editable {:type :text\n                                                         :text (:length the-service)\n                                                         :update-func (fn [value] (dispatch-change service-id id :length value))}]]\n                                         [:td [editable {:type :text\n                                                         :text (:price the-service)\n                                                         :update-func (fn [value] (dispatch-change service-id id :price value))}]]\n                                         [:td [:input.uk-checkbox\n                                               {:on-change (fn [value] (dispatch-change service-id id :hidden? value))\n                                                :type \"checkbox\" :value true}\n                                               (:available? the-service)]]]))\n           services)]]))\n\n\n(defn employee-services [employee]\n  (let [show-services? (atom false)\n        services (subscribe [:data :services])]\n    (fn [id]\n      [:div\n       [:div.uk-text-right [:a\n                            {:on-click #(reset! show-services? (not @show-services?))}\n                            \"Szolg\u00e1ltat\u00e1sok...\"]]\n       (if @show-services? [modify-employee-services @services employee])])))\n\n(defn draggable-content [the-key data snapshot]\n  [:div\n   [:button.uk-button.uk-button-default.uk-position-top-right.uk-button-small\n    {:on-click #(do\n                  (dispatch [:set-modal\n                             {:open? true\n                              :content \"Biztos m\u00f3dos\u00edtod?\"\n                              :no-fn (fn []) ;(reset! edit-text text))\n                              :yes-fn (fn [] (dispatch [:remove-employee-service the-key (:_id data)]))}]))}\n\n    [:span {:data-uk-icon \"close\"}]]\n   (case the-key\n     :employees [:<>\n                 [:div [:b {:class (if (.-isDragging snapshot) \"dnd-title-drag\" \"dnd-title\")\n                            :style {:font-size \"1.3em\"}}\n                        [editable {:text (:name data)\n                                   :type :text\n                                   :update-func #(dispatch [:modify-item the-key :name (:_id data)  %])}]]]\n                 ;[:div \"Id: \" [:b (:id data)]]\n                 [:div \"Prio: \"  [:b (inc (:priority data))]]\n                 [employee-services data]]\n     :services [:<>\n\n                [:div [:b {:class (if (.-isDragging snapshot) \"dnd-title-drag\" \"dnd-title\")\n                           :style {:font-size \"1.3em\"}}\n                       [editable {:type :text\n                                  :text (:name data)\n                                  :update-func #(dispatch [:modify-item the-key :name (:_id data) %])}]]]\n\n                [label \"N\u00e9v(en): \" [editable {:type :text\n                                              :text (:enname data)\n                                              :update-func #(dispatch [:modify-item the-key :enname (:_id data) %])}]]\n                [label \"Hossz: \" [editable {:text (:length data)\n                                            :type :number\n                                            :update-func  #(dispatch [:modify-item the-key :length (:_id data) %])}]]\n\n                [label \"\u00c1r: \" [editable {:text (:price data)\n                                         :type :number\n                                         :update-func  #(dispatch [:modify-item the-key :price (:_id data) %])}]]\n                [label \"Sz\u00edn: \" [editable {:text (:color data)\n                                           :type :color\n                                           :update-func  #(dispatch [:modify-item the-key :color (:_id data) %])}]]\n                [:div \"Prio: \" [:b (inc (:priority data))]]]\n     (str the-key data))])\n\n\n(defn dnd-draggable [data the-key]\n  (let [idx (:priority data)]\n    [:> Draggable\n     {:draggable-id (str \"draggable-\" idx)\n      :index idx}\n     (fn [provided snapshot]\n       (reagent/as-element\n         [:div.uk-width-1-1.uk-flex.uk-flex-center\n          [:div.uk-inline.draggable-row\n           (merge {:class (str\n                            (str \"dnd-\" (name the-key))\n                            (if (.-isDragging snapshot) \" dragged\"))\n                   :ref (.-innerRef provided)}\n                  (js->clj (.-draggableProps provided))\n                  (js->clj (.-dragHandleProps provided)))\n           [draggable-content the-key data snapshot]]]))]))\n\n\n(defn dnd-droppable [component the-key]\n  [:> Droppable {:droppable-id (name the-key)\n                 :type \"thing\"}\n   (fn [provided snapshot]\n     (reagent/as-element\n       [:div.droppable-dnd\n        (merge {:ref   (.-innerRef  provided)}\n               ;:class (when (.-isDraggingOver snapshot) :drag-over)}\n               (js->clj (.-droppableProps provided)))\n        component\n        (.-placeholder provided)]))])\n\n\n(defn dnd [the-key]\n  (let [coll (subscribe [:data the-key])]\n   (reagent/create-class\n     {:reagent-render (fn [the-key]\n                        [:div.uk-padding\n                         [:h2.uk-text-center.playfair.gold-text.uk-padding-small.uk-margin-top {:style {:border-radius \"10px\" :background \"#222\"}}\n                          (case the-key\n                           :employees \"Barberek\"\n                           :services \"Szolg\u00e1ltat\u00e1sok\"\n                           \"else\")]\n                         [:div.uk-width-1-1\n                          [:button.uk-align-center.uk-button.uk-button-primary\n                           {:on-click #(dispatch [:add-new the-key])}\n                           \"\u00daj hozz\u00e1ad\u00e1sa\"]]\n                         [drag-drop-context\n                          [dnd-droppable ;{:droppable-id \"droppable-1\" :type \"thing\"}\n                           (map-indexed\n                             #(-> ^{:key (:priority %2)}\n                                  [dnd-draggable %2 the-key])\n                             (sort-by :priority @coll))\n                           the-key]\n                          {:on-drag-end #(dispatch-sync [:drag-end the-key %\n                                                         {:open? true\n                                                          ; :title \"Barber pozici\u00f3j\u00e1nak m\u00f3dos\u00edt\u00e1sa\"\n                                                          :content \"Biztos \u00e1thelyezed?\"\n                                                          :yes-fn (fn [a] (dispatch [:modify-positions the-key]))\n                                                          :no-fn (fn [a] (dispatch [:restore-positions the-key]))}])}]])})))\n\n\n\n\n(defn two-digits [number]\n  (if (= (count (str number)) 1)\n     (str \"0\" number)\n     (str number)))\n\n(defn str-from-date [date]\n  (let [year (two-digits (time/year date))\n        month (two-digits (time/month date))\n        day (two-digits (time/day date))]\n    (str year \"-\" month \"-\" day)))\n\n\n(defn get-tomorrow [date-str]\n  (let [date-splitted (clojure.string/split date-str #\"-\")\n        [year month day] (map js/parseInt date-splitted)]\n    (str-from-date\n      (time/plus (time/date-time year month day) (time/days 1)))))\n\n(defn get-yesterday [date-str]\n  (let [date-splitted (clojure.string/split date-str #\"-\")\n        [year month day] (map js/parseInt date-splitted)]\n    (str-from-date\n      (time/minus (time/date-time year month day) (time/days 1)))))\n\n\n(defn anim-to [element timeout the-map]\n  (.to js/TweenMax element timeout (clj->js the-map)))\n\n(defn set-gsap [element the-map]\n  (.set js/TweenMax element (clj->js the-map)))\n\n\n\n\n(defn todo-input [{:keys [title on-save on-stop]}]\n  (let [val  (reagent/atom title)\n        stop #(do (reset! val \"\")\n                  (when on-stop (on-stop)))\n        save #(let [v (-> @val str str/trim)]\n                (on-save v)\n                (stop))]\n    (fn [props]\n      [:input (merge (dissoc props :on-save :on-stop :title)\n                     {:type        \"text\"\n                      :value       @val\n                      :class \"uk-input\"\n                      :auto-focus  true\n                      :on-blur     save\n                      :on-change   #(reset! val (-> % .-target .-value))\n                      :on-key-down #(case (.-which %)\n                                      13 (save)\n                                      27 (stop)\n                                      nil)})])))\n\n\n\n(defn get-el [id]\n  (.getElementById js/document id))\n\n(defn add-event-listener [el type callback]\n  (.addEventListener el type callback false))\n\n(defn remove-event-listener [el type callback]\n  (.removeEventListener el type callback false))\n\n\n(def grid-width 130)\n(def grid-height 100)\n(def step-height (/ grid-height 4))\n(def border-width 1.2)\n(def title-height 30)\n\n\n\n(defn abs [n] (max n (- 0 n)))\n\n(defn round-to-grid [left top]\n  (let [grid-left (* grid-width (quot left grid-width))\n        grid-right (* grid-width (inc (quot left grid-width)))\n        grid-top (* step-height (quot top step-height))\n        grid-bottom (* step-height (inc (quot top step-height)))\n        final-left (if (<\n                        (abs (- left grid-left))\n                        (abs (- left grid-right)))\n                     grid-left\n                     grid-right)\n        final-top (if (< (abs (- top grid-top))\n                         (abs (- top grid-bottom)))\n                    grid-top\n                    grid-bottom)]\n\n\n    [final-left final-top]))\n\n\n(defn round-to-height [height]\n  (let [height-bot (* step-height (quot height step-height))\n        height-top (* step-height (inc (quot height step-height)))]\n    (if (<\n          (abs (- height height-bot))\n          (abs (- height height-top)))\n      height-bot\n      height-top)))\n\n\n(def scroll-interval (atom nil))\n\n(def last-scroll-pos (atom 0))\n(def rect (atom nil))\n\n(defn anim-frame-request [func]\n      (. js/window (requestAnimationFrame func)))\n\n(defn get-service-by-id [id]\n  (let [services (fn [] (deref (subscribe [:data :services])))]\n    (first (filter #(= id (:_id %))\n                   (services)))))\n\n\n\n(defonce dragging? (atom false))\n\n(defn get-employee [number]\n  (let [emp (first (filter #(= number (:priority %))\n                           @(subscribe [:data :employees])))]\n    (:_id emp)))\n\n(defn extend-opening-hours [open-hours]\n  [(- (first open-hours) 60)\n   (+ (second open-hours) 60)])\n\n(defn get-start [minutes]\n  (let [opening-hours (subscribe [:data :opening-hours])\n        selected-day (subscribe [:data :selected-day])\n        get-pos-now (fn [] (first (extend-opening-hours (get @opening-hours @selected-day))))]\n    (+ (get-pos-now)\n       minutes)))\n\n(defn convert-to-time [number]\n  (let [hours (two-digits (quot number 60))\n        minutes (two-digits (mod number 60))]\n    (str hours \":\" minutes)))\n\n\n\n(def hovered? (atom false))\n\n(defn one-event [id start-left start-top start-height the-event]\n  (let [length (atom (* step-minute start-height))\n        drag-end-listener (atom nil)\n        drag-move-listener (atom nil)\n        scroll-listener (atom nil)\n        not-real-scroll? (atom false)\n        dragged? (atom false)\n        last-mouse-pos (atom [0 0])\n        calc-left (* start-left grid-width)\n        calc-top (* start-top step-height)\n        left-temporary (atom 0)\n        top-temporary (atom 0)\n        height-temporary (atom (* start-height step-height))\n        height (atom (* start-height step-height))\n        left (atom calc-left)\n        top (atom calc-top)\n        remove-mouse-move (fn [] (remove-event-listener js/window \"mousemove\" @drag-move-listener))\n        remove-mouse-up (fn [] (remove-event-listener js/window \"mouseup\" @drag-end-listener))\n        remove-touch-move (fn [] (remove-event-listener js/window \"touchmove\" @drag-move-listener))\n        remove-touch-end (fn [] (remove-event-listener js/window \"touchend\" @drag-end-listener))\n        remove-scroll (fn [] (remove-event-listener js/window \"scroll\" @scroll-listener))\n        remove-all (fn []\n                       (do\n                         (remove-mouse-move)\n                         (remove-mouse-up)\n                         (remove-touch-move)\n                         (remove-touch-end)\n                         (remove-scroll)))\n\n\n        is-touch? (fn [event] (clojure.string/includes? (.-type event) \"touch\"))\n        get-pos (fn [event]\n                    (if\n                      (is-touch? event)\n                      [(.-pageX (aget (.-touches event) 0))\n                       (.-pageY (aget (.-touches event) 0))]\n                      [(.-pageX event)\n                       (.-pageY event)]))\n        scroll-event (fn [a]\n                         (if (and @dragged? (not @not-real-scroll?))\n                           (do\n                               (reset! top (+ @top (- (.-scrollTop (.-documentElement js/document))\n                                                      @last-scroll-pos)))\n                               ;(reset! top-temporary (+ @top-temporary (- (.-scrollTop (.-documentElement js/document)) @last-scroll-pos)))\n                               (reset! last-mouse-pos (assoc @last-mouse-pos 1 (+ (second @last-mouse-pos)\n                                                                                  (- (.-scrollTop (.-documentElement js/document))\n                                                                                     @last-scroll-pos))))))\n                        (reset! last-scroll-pos (.-scrollTop (.-documentElement js/document))))\n\n\n\n\n\n\n        stop-resize (fn [a]\n                        (remove-all)\n                        (reset! dragged? false)\n                        (dispatch [:modify-reservation (:reservation-id the-event)\n                                   {:length (max 15 (* 15 (/ @height step-height)))}]))\n\n\n        resize (fn [a]\n                   (.stopPropagation a)\n                   (if @dragged?\n                     (let [rect-width (.-width @rect)\n                           rect-height (.-height @rect)\n                           new-height (+ @height-temporary (-\n                                                             (if (is-touch? a)\n                                                                 (.-pageY (aget (.-touches a) 0))\n                                                                 (.-pageY a))\n                                                             (second @last-mouse-pos)))]\n                       (if (< (+ @top new-height) rect-height)\n                         (do\n                           (reset! length (* 15\n                                             (/ (round-to-height new-height)\n                                                step-height)))\n                           (reset! last-mouse-pos (get-pos a))\n                           (reset! height-temporary new-height)\n                           (reset! height (round-to-height new-height)))))))\n\n\n        mouse-down-resize (fn [a]\n                            (.stopPropagation a)\n                            (reset! dragged? true)\n                            (reset! last-mouse-pos (get-pos a))\n                            (reset! last-scroll-pos (.-scrollTop (.-documentElement js/document)))\n                            (reset! drag-end-listener stop-resize)\n                            (reset! drag-move-listener resize)\n                            (if (is-touch? a)\n                              (do\n                                (add-event-listener js/window \"touchmove\" @drag-move-listener)\n                                (add-event-listener js/window  \"touchend\" @drag-end-listener)\n                                (add-event-listener js/window  \"touchcancel\" @drag-end-listener))\n                              (do\n                                (add-event-listener js/window \"mousemove\" @drag-move-listener)\n                                (add-event-listener js/window  \"mouseup\" @drag-end-listener))))\n\n\n        scroll-if-close (fn [a mouse-top mouse-left rect-left scroll-width rect-width rect-height]\n                            (let [inner-height (.-innerHeight js/window)\n                                  inner-width (.-innerWidth js/window)\n                                  how-much-scroll-y (- inner-height mouse-top)\n                                  how-much-scroll-x (- inner-width mouse-left)\n                                  px-number 5]\n                                 (if @scroll-interval (.clearInterval js/window @scroll-interval))\n                                 (do\n                                   (reset! not-real-scroll? true)\n                                   (reset! scroll-interval\n                                           (.setInterval js/window\n                                                         #(do\n                                                            (cond\n                                                              (< how-much-scroll-y 100) (do\n                                                                                          (set!\n                                                                                            (.-scrollTop (.-documentElement js/document))\n                                                                                            (+ (.-scrollTop (.-documentElement js/document)) px-number))\n                                                                                          (if (> (- rect-height @height)\n                                                                                                 (+ @top px-number))\n                                                                                            (reset! top (+ @top px-number)))\n                                                                                          (reset! last-mouse-pos (assoc @last-mouse-pos 1 (+ (second @last-mouse-pos) px-number))))\n                                                              (< mouse-top 100) (do\n                                                                                  (set!\n                                                                                    (.-scrollTop (.-documentElement js/document))\n                                                                                    (- (.-scrollTop (.-documentElement js/document)) px-number))\n                                                                                  (if (< 0 (- @top px-number))\n                                                                                    (reset! top (- @top px-number)))\n                                                                                  (reset! last-mouse-pos (assoc @last-mouse-pos 1 (- (second @last-mouse-pos) px-number))))\n                                                              (> mouse-left (- (+ rect-left rect-width) 50)) (do\n                                                                                                               (set!\n                                                                                                                 (.-scrollLeft (get-el \"scroll-container\"))\n                                                                                                                 (+ (.-scrollLeft (get-el \"scroll-container\")) px-number))\n                                                                                                               (if (< (+ @left px-number)\n                                                                                                                      (- scroll-width grid-width))\n                                                                                                                 (reset! left (+ @left px-number)))\n                                                                                                               (reset! last-mouse-pos (assoc @last-mouse-pos 0 (+ (first @last-mouse-pos) px-number))))\n\n                                                              (< mouse-left (+ rect-left 50))  (do\n                                                                                                 (set!\n                                                                                                   (.-scrollLeft (get-el \"scroll-container\"))\n                                                                                                   (- (.-scrollLeft (get-el \"scroll-container\")) px-number))\n                                                                                                 (if (> (- @left px-number) 0)\n                                                                                                   (reset! left (- @left px-number)))\n                                                                                                 (reset! last-mouse-pos (assoc @last-mouse-pos 0 (- (first @last-mouse-pos) px-number))))\n\n                                                              :else (do\n                                                                      (reset! not-real-scroll? false)\n                                                                      (.clearInterval js/window @scroll-interval))))\n                                                         0.01)))))\n\n\n\n\n\n\n        on-pan-end (fn [event]\n                       (reset! dragged? false)\n                       (reset! dragging? false)\n                       (if @scroll-interval (.clearInterval js/window @scroll-interval))\n                       (remove-all)\n                       (let [rounded (round-to-grid @left @top)]\n                         (reset! left (first rounded))\n                         (reset! top (second rounded))\n                         (reset! left-temporary @left)\n                         (reset! top-temporary @top)\n                         (dispatch [:modify-reservation\n                                    (:reservation-id the-event)\n                                    {:start (get-start (* 15 (quot (second rounded) step-height)))\n                                     :employee (get-employee (quot (first rounded)\n                                                                grid-width))}])))\n\n\n\n        on-pan (fn [a]\n                   (if @dragged?\n                     (let\n                       [container (get-el \"container\")\n                        scroll-width (.-scrollWidth container)\n                        rect-width (.-clientWidth container)\n                        rect-height (- (.-clientHeight container) title-height)\n                        rect-left (.-left @rect)\n                        rect-top (+ title-height (.-offsetTop container))\n                        position (get-pos a)\n                        click-left (first position)\n                        click-top (second position)\n                        new-left (- @left (- (first @last-mouse-pos) click-left)) ;uj baloldalt a mozgatas alapjan\n                        new-top (- @top (- (second @last-mouse-pos) click-top))] ;uj fent a mozgatas alapjan]\n\n                       (scroll-if-close a\n                                        (if\n                                          (clojure.string/includes? (.-type a) \"touch\")\n                                          (.-clientY (aget (.-touches a) 0))\n                                          (.-clientY a))\n                                        (if\n                                          (clojure.string/includes? (.-type a) \"touch\")\n                                          (.-clientX (aget (.-touches a) 0))\n                                          (.-clientX a))\n                                        rect-left\n                                        scroll-width\n                                        rect-width\n                                        rect-height)\n\n                       ;Left and Right Boundaries\n                       ;(.log js/console (str \"left: \" new-left\" gridwidth: \" scroll-width))\n\n                       (if (and\n                             (<= (+ rect-left (/ grid-width 2)) (first @last-mouse-pos))\n                             (<= (first @last-mouse-pos)\n                                 (- (+ rect-left (.-clientWidth container)) (/ grid-width 2)))\n                             (<= 0 new-left)\n                             (<= new-left (- scroll-width grid-width)))\n                         (do\n                           (reset! left new-left))\n\n                         (do\n                           (if\n                             (<= new-left 0)\n                             (reset! left 0))\n\n                           (if\n                             (<= (- scroll-width grid-width)\n                                 new-left)\n                             (do\n\n                               (reset! left (- scroll-width grid-width))))))\n\n                       ;Top and Bottom Boundaries\n\n                       (if\n                         (and\n                              (< click-top (+ rect-top (- rect-height (/ @height 2))))\n                              (> click-top (+ rect-top (/ @height 2))))\n                         (do\n                           (reset! top new-top))\n                         (if (<= click-top (+ rect-top (/ @height 2)))\n                           (reset! top 0)\n                           (reset! top (- rect-height @height))))\n                       (reset! last-mouse-pos [click-left click-top]))))\n\n\n        on-pan-start (fn [event]\n                       (let [position (get-pos event)]; (reset! dragging? true)\n                         (reset! rect (.getBoundingClientRect (get-el \"scroll-container\")))\n                         (reset! dragged? true)\n                         (reset! dragging? true)\n                         (.stopPropagation event)\n                         (reset! last-mouse-pos position)\n                         (reset! drag-end-listener on-pan-end)\n                         (reset! drag-move-listener on-pan)\n                         (reset! scroll-listener scroll-event)\n\n                         (if (is-touch? event)\n                           (do\n                             (add-event-listener js/window \"touchmove\" @drag-move-listener)\n                             (add-event-listener js/window  \"touchend\" @drag-end-listener)\n                             (add-event-listener js/window  \"touchcancel\" @drag-end-listener))\n                           (do\n                             (add-event-listener js/window \"mousemove\" @drag-move-listener)\n                             (add-event-listener js/window  \"mouseup\" @drag-end-listener)\n                             (add-event-listener js/window \"scroll\" @scroll-listener)))\n                         false))]\n\n\n\n\n\n    (reagent/create-class\n      {:component-did-mount #(do\n                               (reset! rect (.getBoundingClientRect (get-el \"scroll-container\")))\n                               (add-event-listener\n                                 (get-el id) \"touchstart\"\n                                 on-pan-start)\n                               (add-event-listener\n                                 (get-el id) \"mousedown\"\n                                 on-pan-start)\n                               (add-event-listener\n                                 (get-el (str id \"-resize\"))\n                                 \"mousedown\"\n                                 mouse-down-resize)\n                               (add-event-listener\n                                 (get-el (str id \"-resize\"))\n                                 \"touchstart\"\n                                 mouse-down-resize))\n\n       :reagent-render\n       (fn [id start-left start-top start-height the-event]\n         [:div.one-event.uk-inline\n          {:class (if @dragged? \"active\" \"\")\n           :id id\n           :on-click #(if (= @hovered? id)\n                        (reset! hovered? nil)\n                        (reset! hovered? id))\n           ;:on-mouse-leave #(reset! hovered? false)\n           :style {;:overflow \"hidden\"\n                   :touch-action \"none\"\n                   :z-index (if (or dragged?\n                                    (= id @hovered?))\n                              1000 1)\n                   :cursor  (if @dragged? \"grabbing\" \"grab\")\n                   :left 0\n                   :padding-left \"5px\"\n                   :top 0\n\n                   :border-top-right-radius \"10px\"\n                   :border-bottom-right-radius \"10px\"\n                   ;:border-top-left-radius \"5px\"\n                   ;:border-bottom-left-radius \"10px\"\n                   :transform (str \"translate(\" (+ 3 @left) \"px,\" (+ 3 (+ title-height @top))\n                                   \"px)\")\n                   :color (cond (= true (:confirmed? the-event))\n                                \"black\"\n                                (= false (:confirmed? the-event))\n                                \"white\"\n                                :else \"black\")\n                   :transition \"0.01s transform ease\"\n                   :position \"absolute\"\n                   :background (cond\n                                 (and\n                                   (= false (:confirmed? the-event))\n                                   (map? (:payment-data the-event)))\n                                 \"#9c2d10\"\n                                 (and\n                                   (= true (:confirmed? the-event))\n                                   (= \"Succeeded\" (:status (:payment-data the-event))))\n                                 \"lightblue\"\n                                 (= true (:confirmed? the-event))\n                                 \"rgb(255, 194, 0)\"\n                                 (= false (:confirmed? the-event))\n                                 \"#FF6F48\"\n                                 :else \"lightgreen\")\n\n                   :border \"0.5px solid #222\"\n                   ;:opacity (if @dragged? 1 1)\n                   ;:border-top-right-radius \"10px\"\n                   :width (str (- (- grid-width border-width) 8) \"px\")\n                   :height (str (- @height 7) \"px\")}}\n          [:div {:style {:height \"100%\" :background (:color (get-service-by-id (:service-id the-event)))\n                         :width \"5px\" :z-index 2 :position \"absolute\" :left 0}}]\n          [:div {:style {:overflow \"hidden\"\n                         :height \"100%\"}}\n\n\n           [:div {:style {:font-size \"12px\"\n                          :padding-top \"5px\"\n                          :padding-left \"5px\"\n                          :font-weight \"bold\"\n                          :line-height \"12px\"}}\n            (str (:name the-event))]\n           [:div\n             {:style {:font-style \"italic\"\n                      :font-size \"10px\"\n                      :padding-top \"5px\"\n                      :padding-left \"5px\"\n                      :line-height \"12px\"}}\n             (str (:name (get-service-by-id (:service-id the-event))))]]\n          [:div {:id (str id \"-resize\")\n                 :style {:cursor \"ns-resize\"\n                         :height \"10px\" :width (- (- grid-width border-width) 4)\n                         :bottom 0 :position \"absolute\" :z-index 1000}}]\n          (if (= id @hovered?)\n            [:div\n             {:class \"uk-position-top\"\n              :style {:position \"fixed\"\n                      :z-index 1000\n                      :color \"black\"\n                      :background \"white\"\n                      :border \"1px solid black\"\n                      :transform (if\n                                   (not (some #(= % start-left) [0]))\n                                   (str \"translate(\" (if (or (= 0 start-left))\n                                                       (- 0 (/ grid-width 2))\n                                                       (- 0 (/ grid-width 2)))\n                                        \"px, 0px)\")\n                                   (str \"translate(\"\n                                        (if (or (= 0 start-left))\n                                          (quot grid-width 3)\n                                          (quot grid-width 3))\n                                        \"px, 0)\"))}}\n\n\n             [:div.uk-grid-collapse.uk-child-width-1-2\n              {:data-uk-grid true}\n\n              [:div.uk-width-1-1\n               {:style {:padding \"2px\"\n                        :padding-left \"4px\"\n                        :padding-right \"4px\"\n                        :font-size \"0.8em\"}}\n               [:div\n                (str (:name the-event))]\n               [:div (:name (get-service-by-id (:service-id the-event)))]\n               [:div\n                (str\n                  (convert-to-time (:start the-event))\n                  \" - \"\n                  (convert-to-time (+ (:start the-event)\n                                      (:length the-event))))]]\n              [:div.uk-text-center {:style {:border-top \"1px solid black\"\n                                            :padding \"2px\"\n                                            :background \"white\"\n                                            :border-right \"1px solid black\"\n\n                                            :cursor \"pointer\"}\n                                    ;:on-mouse-down #(.log js/console \"pff\")\n\n                                    :on-click #(do\n                                                 (dispatch [:add-to-db {:sidebar-open? true}])\n                                                 (.preventDefault %)\n                                                 ;(.preventDefault %)\n                                                 (dispatch [:add-to-db {:reservation-editor the-event}])\n                                                 false)}\n               [:span {:data-uk-icon \"file-edit\"}]]\n              [:div.uk-text-center {:style {:border-top \"1px solid black\"\n\n                                            :padding \"2px\"\n                                            :background \"white\"\n                                            :cursor \"pointer\"}\n                                    ;:on-mouse-down #(.log js/console \"pff\")\n\n                                    :on-click #(do\n                                                 (.preventDefault %)\n                                                 ;(.preventDefault %)\n                                                 (dispatch [:set-modal\n                                                            {:open? true\n                                                             :content \"Biztos t\u00f6rl\u00f6d?\"\n                                                             :no-fn (fn [])\n                                                             :yes-fn (fn [] (dispatch [:remove-calendar-event (name (:reservation-id the-event))]))}])\n                                                 false)}\n               [:span {:data-uk-icon \"close\"}]]]])])})))\n\n\n\n\n\n\n\n(defn one-person [name id]\n      [:div.uk-text-center.playfair.gold-text.bold-text\n       {:on-click #(js/navigator.clipboard.writeText id)\n        ;:data-uk-tooltip (str \"title: id: \" id)\n        :style {:font-size \"1.2em\"\n                :width (str grid-width \"px\")\n                ;:position \"absolute\"\n                :height (str title-height \"px\")}}\n       name])\n\n\n\n\n\n(defn map-row-title [times]\n      [:div.black-bg {:style {:border-bottom-left-radius \"10px\"\n                              :border-top-left-radius \"10px\"}}\n       [:div {:style {:height (str title-height \"px\")}}]\n       (map-indexed #(-> ^{:key %1}[:div.uk-text-right.uk-text-top\n                                    {:style {:width \"40px\"\n                                             :transform \"translateY(-1px)\"\n                                             :line-height \"10px\"\n                                             :height step-height\n                                             :padding-right \"10px\"\n                                             :padding-left \"10px\"}}\n                                    (cond\n                                      (= 0 (mod %2 60))\n                                      [:div.gold-text.bold-text\n                                       {:style {:font-size \"0.8em\"}}\n                                       (convert-to-time %2)]\n                                      (= 0 (mod %2 30))\n                                      [:div.bold-text.gold-text\n                                       {:style {:font-size \"0.7em\"}}\n                                       (convert-to-time %2)])])\n                    times)])\n\n(defn only-positive [number]\n  (if (< number 0)\n    0\n    number))\n\n(defn map-column-title [employees]\n      (let [container (fn [] (if (.getElementById js/document \"scroll-container\") (.getElementById js/document \"scroll-container\") nil))\n            offset-top (fn [] (if (container) (.-offsetTop (container)) 0))]\n        (fn [employees]\n          [:div.black-bg.column-titles\n           {:style {:display \"flex\"\n                    :position \"absolute\"\n                    :z-index 2000\n                    :transform (str \"translateY(\" (if @rect (if (> @last-scroll-pos (offset-top))\n                                                              (- @last-scroll-pos (offset-top))\n                                                              0)\n                                                            0)\"px)\")}}\n           (map-indexed (fn [col-i a] (-> ^{:key col-i}[one-person (:name a) (:_id a)]))\n                        employees)])))\n\n\n(defn check-if-in-range [brakes this]\n  \"Decides if this cell is a brake\"\n  (if (some #(let [start (first %)\n                   finish (second %)]\n               (and (>= this start) (< this finish)))\n            brakes)\n    true\n    false))\n\n\n(defn is-break? [brakes this-time]\n  \"decides if this is a brake with getting from @brakes\"\n  (let []\n    (if brakes\n      (check-if-in-range brakes this-time)\n      true)))\n\n(defn one-cell [col-i employee row-i time]\n  (let [selected-date (subscribe [:data :selected-date])];brakes (subscribe [:brakes (:id employee)])]\n    [:div.one-cell\n     {:on-click #(do\n                   (dispatch [:add-to-db {:sidebar-open? true}])\n                   ;(.log js/console (str col-i \" - \" row-i \" \" time \" \" employee))\n                   (dispatch [:add-to-db {:reservation-editor {:start time\n                                                               :date @selected-date\n                                                               :employee (:_id employee)\n                                                               :service-id \"nil\"}}]))\n      :style {:cursor \"pointer\"\n              :width (str (- grid-width border-width) \"px\")\n              :height (str (- step-height border-width) \"px\")\n              :border-right (str border-width \"px solid #222\")\n              :border-top (if (= 0 (mod row-i 4))\n                            (str border-width \"px solid #222\")\n                            (if (= 0 (mod row-i 2))\n                              (str border-width \"px solid silver\")\n                              (str border-width \"px solid transparent\")))}}]))\n\n\n(defn map-calendar [rows columns]\n      [:<>\n       (map-indexed (fn [col-i employee]\n                        (-> ^{:key col-i}\n                            [:div {:style {:background \"white\"}}\n                             [:div {:style { :height (str title-height \"px\")}}]\n                             (doall\n                               (map-indexed\n                                      (fn [row-i time]\n                                          (-> ^{:key row-i}\n                                              [one-cell col-i employee row-i time]))\n                                      rows))]))\n                    columns)])\n\n(defn actual-time-sign [container]\n  (let [elapsed-time (atom 0)\n        now (new js/Date)\n        day (.getDate now)\n        month (two-digits (inc (.getMonth now)))\n        year (.getFullYear now)\n        str-date (str year \"-\" month \"-\" day)\n        selected-date (subscribe [:data :selected-date])\n        minutes (.getMinutes now)\n        hours (.getHours now)\n        in-minutes (+ minutes (* hours 60))\n        interval (atom nil)\n        one-minute-step (/ grid-height 60)\n        opening-hours (subscribe [:data :opening-hours])\n        selected-day (subscribe [:data :selected-day])\n        get-pos-now (fn [] (- in-minutes (first (extend-opening-hours (get @opening-hours @selected-day)))))\n        all-minutes (+ in-minutes @elapsed-time)\n        height 2]\n       ; p (.log js/console (str str-date\" \"@selected-date \" \"))]\n    (reagent/create-class\n      {:component-did-unmount (.clearInterval js/window @interval)\n       :component-did-mount #(reset! interval\n                                     (.setInterval js/window (fn [a] (reset! elapsed-time (inc @elapsed-time)))\n                                                             60000))\n       :reagent-render\n       (fn []\n         (if (= @selected-date str-date)\n           [:div#actual-time\n            {:style {:top (str  (min (+\n                                       (* one-minute-step (get-pos-now))\n                                       (* one-minute-step @elapsed-time)\n                                       title-height)\n                                     (+ title-height\n                                        (-\n                                          (* one-minute-step\n                                             (- (second (extend-opening-hours (get @opening-hours @selected-day)))\n                                                (first (extend-opening-hours (get @opening-hours @selected-day)))))\n                                          height)))\n                                \"px\")\n                     :position \"absolute\"\n\n                     :z-index 1000\n                     :width (if @container\n                              (str (.-scrollWidth @container) \"px\")\n                              \"50px\")\n                     :height (str height \"px\")\n                     :background \"red\"}}]))})))\n\n\n\n(defn one-brake [column row length the-key]\n  ;:work :no-work\n  (let [calc-left (* column grid-width)\n        calc-top (* row step-height)]\n    [:div.break\n     {:style {:z-index 0\n              :background (if (= the-key :work)\n                            \"rgba(0,0,0,0.3)\"\n                            \"rgba(0,0,0,0.3)\")\n              :width (str (- grid-width border-width)\n                          \"px\")\n              :height (str (* length step-height)\n                           \"px\")\n\n              :position \"absolute\"\n              :transform (str \"translate(\" calc-left \"px,\" (+ title-height calc-top)\n                              \"px)\")}}]))\n\n\n\n(defn calendar []\n  (let [container (atom nil)\n        employees (subscribe [:data :employees])\n        services (subscribe [:data :services])\n        reservations (subscribe [:data :reservations])\n        opening-hours (subscribe [:data :opening-hours])\n\n        selected-day (subscribe [:data :selected-day])\n        this-open-hours (fn [] (if (= [] (extend-opening-hours (get @opening-hours @selected-day)))\n                                 nil\n                                 (extend-opening-hours (get @opening-hours @selected-day))))\n        get-column-number (fn [id] (first (keep-indexed (fn [index value]\n                                                          (if (= id (:_id value))\n                                                            index))\n                                                        @employees)))\n        get-row-number (fn [start]\n                         (quot\n                           (- start (first (this-open-hours)))\n                           15))\n        all-columns (fn [] @employees)\n        all-rows (fn [] (let []\n                          (if (this-open-hours)\n                            (take-nth 15 (range\n                                           (first (this-open-hours))\n                                           (second (this-open-hours))))\n                            (take-nth 15 (range 800\n                                                1600)))))\n        keydown-interval (atom nil)\n        brakes (subscribe [:data :brakes])]\n    (reagent/create-class\n     {:component-did-update #(do\n                               (reset! container (get-el \"container\")))\n      :component-did-mount #(do\n                              (dispatch [:dec-loader])\n                              (reset! container (get-el \"container\"))\n                              (add-event-listener js/window \"scroll\" (fn [a]\n                                                                       (if-not @dragging?\n                                                                         (reset! last-scroll-pos (.-scrollTop (.-documentElement js/document))))))\n                              (add-event-listener js/window \"keydown\"\n                                                  (fn [a]\n                                                      (let [running? (if @keydown-interval true false)]\n                                                           (case (.-key a)\n                                                                 \"ArrowLeft\" (if-not running?\n                                                                                     (reset! keydown-interval\n                                                                                             (.setInterval js/window\n                                                                                               (fn [b] (set!\n                                                                                                         (.-scrollLeft (get-el \"scroll-container\"))\n                                                                                                         (- (.-scrollLeft (get-el \"scroll-container\")) 5)))\n                                                                                               0.05)))\n                                                                 \"ArrowRight\" (if-not running?\n                                                                                      (reset! keydown-interval\n                                                                                              (.setInterval js/window\n                                                                                                (fn [b] (set!\n                                                                                                          (.-scrollLeft (get-el \"scroll-container\"))\n                                                                                                          (+ (.-scrollLeft (get-el \"scroll-container\")) 5)))\n                                                                                                0.05)))\n                                                                 nil))))\n                              (add-event-listener js/window \"keyup\" (fn [a]\n                                                                        (if @keydown-interval\n                                                                          (do\n                                                                            (.clearInterval js/window @keydown-interval)\n                                                                            (reset! keydown-interval nil))))))\n\n                              ;(dispatch [:init-calendar \"container\"]))\n      :reagent-render\n       (fn []\n           [:div#calendar.uk-width-.uk-flex.uk-flex-center\n            {:style {:display \"flex\"\n                     :padding-left \"40px\"\n                     :padding-right \"30px\"\n                     :padding-bottom \"100px\"}}\n            [map-row-title (all-rows)]\n            [:div#scroll-container {:style {:overflow-x \"auto\"}}\n\n             [:div#container.uk-inline.noselect\n              {:style {:display \"flex\"  :z-index 40}}\n              [actual-time-sign container]\n              [map-column-title (all-columns)]\n              [map-calendar (all-rows) (all-columns)]\n              (doall\n                (map-indexed #(let [col (get-column-number (:employee %2))\n                                    row (get-row-number (:start %2))]\n                                (-> ^{:key (str (:reservation-id %2) (:length %2) col row)}\n                                    [one-event\n                                     (str \"box\" (:reservation-id %2))\n                                     col row\n                                     (/ (:length %2) step-minute)\n                                     %2]))\n                  @reservations))\n              ;(str @brakes)\n              (doall\n                (map (fn [[barber barber-brakes]]\n                       (doall\n                         (if (vector? barber-brakes)\n                           (map-indexed (fn [index one-brake-data]\n                                          (-> ^{:key (str index one-brake-data)}\n                                              [one-brake\n                                               (get-column-number barber)\n                                               (get-row-number (first one-brake-data))\n                                               (/ (- (second one-brake-data)\n                                                     (first one-brake-data))\n                                                  15)\n                                               :work]))\n                             barber-brakes)\n                           ^{:key (str (random-uuid))}\n                           [one-brake\n                                    (get-column-number barber)\n                                    0\n                                    (if (this-open-hours)\n                                      (quot (let [[a b] (this-open-hours)]\n                                              (- b a))\n                                            step-minute)\n                                      (quot 815\n                                            step-minute))\n                                    :nowork])))\n                     @brakes))]]])})))\n\n\n\n\n\n\n(defn home-page []\n  (let [server-time (subscribe [:data :server-time])\n        post-request (subscribe [:data :post-request])]\n     (reagent/create-class\n       {:component-did-mount #(dispatch [:get-user])\n         :reagent-render\n          (fn []\n            [:div\n             [:div.uk-container.uk-container-small.uk-margin-large-top\n              [:div.uk-card.uk-card-default\n               ;[proba-dnd]\n               [calendar]]\n              [:div.uk-card.uk-card-default\n               [:div.uk-card-body\n                [:div [:img.uk-align-center {:src \"/img/logo.png\" :style {:width \"150px\"}}]]\n                [:h1.uk-heading.uk-text-center (str \"Szia Bal\u00e1zs!\")]\n                [:hr]\n                [:h2.uk-text-center \"Ajax test\"]\n                [:div.uk-child-width-1-2 {:data-uk-grid true}\n                  [:div\n                   [:button.uk-button.uk-button-default.uk-align-center\n                    {:on-click #(dispatch [:get-server-time])}\n                    \"Test Ajax Get\"]\n                   [:div.uk-padding\n                    [:div (str \"Result: \" @server-time)]]]\n\n                  [:div\n                   [:button.uk-button.uk-button-default.uk-align-center\n                    {:on-click #(dispatch [:post-request])}\n                    \"Test Ajax Post\"]\n                   [:div.uk-padding\n                    [:div (str \"Result: \" @post-request)]]]]\n                [:hr]\n                [:div.uk-flex.uk-flex-center\n                 [:div.uk-padding-small\n                   [:button.uk-button.uk-button-small.uk-button-default\n                     {:on-click #(dispatch [:add-to-mongo])}\n                    \"Add to database\"]]\n                 [:div.uk-padding-small\n                   [:button.uk-button.uk-button-small.uk-button-default\n                       {:on-click #(dispatch [:add-user {:username \"admin\" :password \"admin\"}])}\n                       \"Add user-> admin : admin\"]]\n                 [:div.uk-padding-small\n                   [:button.uk-button.uk-button-small.uk-button-default\n                     {:on-click #(dispatch [:ws-server-time])}\n                    \"Test Websocket\"]]]]\n\n               [:ul]]]])})))\n                ;[todo-app]]]]])})))\n\n(defn calendar-loader []\n  (let [calendar-data-loaded? (subscribe [:calendar-data-loaded?])]\n    (reagent/create-class\n      {:component-did-mount #(do\n                               (dispatch [:inc-loader])\n                               (dispatch [:get-calendar-data]))\n       :reagent-render\n       (fn []\n           [:div\n            [calendar]])})))\n\n(def input-width \"225px\")\n\n(defn input-wrapper [content])\n\n\n\n\n\n\n(defn simple-input [config the-atom the-key]\n  (let [rand-id (str (random-uuid))]\n    [:div\n     [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n      [:label.uk-form-label.gold-text.bold-text {:for rand-id}\n       (:placeholder config)]\n      [:div.uk-form-controls\n       [:input.uk-input.rounded {:id rand-id :value (get @the-atom the-key) :type \"text\" :on-change #(swap! the-atom assoc the-key (-> % .-target .-value))}]]]]))\n  ;[:div.res-input\n   ;[:input.uk-input.uk-width-medium {:placeholder placeholder}]])\n\n(defn date-input [config the-atom the-key]\n  (let [rand-id (str (random-uuid))]\n    [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n     [:label.uk-form-label.gold-text.bold-text {:for rand-id} (:placeholder config)]\n     [:div.uk-form-controls\n      [:input.uk-input.rounded\n       {:id rand-id\n        :value (get @the-atom the-key)\n        :type \"date\"\n        :on-change #(swap! the-atom assoc the-key (-> % .-target .-value))}]]]))\n\n\n(defn convert-to-minutes [time]\n  (let [[hours minutes] (clojure.string/split time \":\")]\n    (+ (js/parseInt minutes)\n       (* 60 (js/parseInt hours)))))\n\n\n\n(defn time-input [the-atom]\n  (let [rand-id (str (random-uuid))\n        rand-id2 (str (random-uuid))]\n    [:<>\n     [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n      [:label.uk-form-label.gold-text.bold-text {:for rand-id} \"t\u00f3l\"]\n      [:div.uk-form-controls\n       [:input.uk-input.rounded {:id rand-id\n                                 :value (convert-to-time (:start @the-atom))\n                                 :type \"time\" :on-change #(swap! the-atom assoc :start\n                                                                 (convert-to-minutes (-> % .-target .-value)))}]]]\n     [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n      [:label.uk-form-label.gold-text.bold-text {:for rand-id2} \"ig\"]\n      [:div.uk-form-controls\n       [:input.uk-input.rounded {:id rand-id2\n                                 :value (convert-to-time (+ (:start @the-atom) (:length @the-atom)))\n                                 :type \"time\" :on-change #(swap! the-atom assoc :length (- (convert-to-minutes (-> % .-target .-value))\n                                                                                           (:start @the-atom)))}]]]]))\n\n\n\n(defn select-employee [the-atom the-key]\n  (let [employees (subscribe [:data :employees])]\n    (fn [the-atom the-key]\n      [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n       [:label.uk-form-label.gold-text.bold-text {:for \"form-stacked-text\"} \"Barber\"]\n       [:div.uk-form-controls\n         [:select.uk-select.rounded {:value (get @the-atom the-key)\n                                     :on-change (fn [a] (swap! the-atom assoc the-key (-> a .-target .-value)))}\n          [:option {:value \"nil\"}\n           \"Nincs kiv\u00e1lasztva\"]\n          (map-indexed\n           #(-> ^{:key (:id %2)}[:option {:value (:_id %2)}\n                                 (:name %2)])\n           @employees)]]])))\n\n(defn select-service [the-atom the-key]\n  (let [services (subscribe [:data :services])]\n    (fn [the-atom the-key]\n      [:div.uk-align-center.uk-margin-remove-bottom {:style {:margin-top \"5px\" :width input-width}}\n       [:label.uk-form-label.gold-text.bold-text {:for \"form-stacked-text\"} \"Szolg\u00e1ltat\u00e1s\"]\n       [:div.uk-form-controls\n        [:select.uk-select.rounded {:value (get @the-atom the-key)\n                                    :on-change (fn [a]\n                                                 (swap! the-atom assoc the-key (-> a .-target .-value)\n                                                        :length (:length (first (filter\n                                                                                  #(= (:_id %)\n                                                                                      (-> a .-target .-value))\n                                                                                  @services)))))}\n\n         [:option {:value \"nil\"}\n          \"Nincs kiv\u00e1lasztva\"]\n         (map-indexed\n          #(-> ^{:key (:_id %2)}[:option {:value (:_id %2)}\n                                 (:name %2)])\n          @services)]]])))\n\n\n\n\n\n(defn reservation-editor [data-atom]\n  (let [editor-atom (atom data-atom)\n        user-data (subscribe [:data :user-data])\n        esc-listener (atom nil)\n        no-fn (fn [] (dispatch [:add-to-db {:reservation-editor nil}]))\n        yes-fn (fn []\n                 (dispatch [:modify-reservation (:reservation-id @editor-atom) @editor-atom])\n                 (dispatch [:add-to-db {:reservation-editor nil}]))\n                 ;(dispatch [:add-modify-calendar-event @editor-atom]))\n        esc-fn (fn [a]\n                 (if (= 27 (.-which a))\n                     (no-fn)))\n        enter-listener (atom nil)\n        enter-fn (fn [a] (if (= 13 (.-which a))\n                           (yes-fn)))]\n    (reagent/create-class\n     {:component-did-update (fn [this old-argv]                ;; reagent provides you the entire \"argv\", not just the \"props\"\n                              (let [new-argv (rest (reagent/argv this))\n                                    new-data (first new-argv)\n                                    old-data (second old-argv)]\n                                (if\n                                  (not= old-data new-data)\n                                  (reset! editor-atom new-data))))\n      :component-did-mount #(do\n                              (reset! esc-listener esc-fn)\n                              (reset! enter-listener enter-fn)\n                              (add-event-listener js/window \"keydown\" @esc-listener)\n                              (add-event-listener (get-el \"reservation-editor\") \"keydown\" @enter-listener))\n      :component-will-unmount #(remove-event-listener js/window \"keydown\" @enter-listener)\n      :reagent-render\n      (fn [data-atom]\n        [:div#reservation-editor.uk-width-1-1.uk-margin-large-top\n\n         [:div.uk-text-center.gold-text.playfair {:style {:font-size \"1.7em\" :margin-bottom \"20px\" :margin-top \"10px\"}}\n          (if (contains? @editor-atom :reservation-id)\n            \"M\u00f3dos\u00edt\u00e1s\"\n            \"\u00daj foglal\u00e1s\")]\n         ;(str @editor-atom)\n         [:form.uk-form-stacked\n          [:div\n           [simple-input {:placeholder \"N\u00e9v\"} editor-atom :name]\n           (if\n             (or\n               (not (contains? @editor-atom :reservation-id))\n               (= \"admin\" (:role @user-data)))\n             [simple-input {:placeholder \"E-mail\"} editor-atom :email])\n           (if\n             (or\n               (not (contains? @editor-atom :reservation-id))\n               (= \"admin\" (:role @user-data)))\n             [simple-input {:placeholder \"Telefonsz\u00e1m\"} editor-atom :phone])\n           [date-input {:placeholder \"D\u00e1tum\"} editor-atom :date]\n           [time-input editor-atom]\n           [select-employee editor-atom :employee]\n           [select-service editor-atom :service-id]]]\n         [:div.uk-width-1-1.uk-flex.uk-flex-center.uk-margin-small-top.uk-margin-bottom\n          [:div.uk-padding-small [:button.uk-button.res-cancel-button.rounded {:on-click #(no-fn)} \"M\u00e9gsem\"]]\n          (if\n            (not= \"nil\" (:service-id @editor-atom))\n            [:div.uk-padding-small\n             [:button.uk-button.res-save-button.rounded {:on-click #(yes-fn)}\n              \"Ment\u00e9s\"]])]])})))\n\n\n\n(defn menu-item [menu? data]\n  [:button.uk-button.menu-item {:on-click #(do\n                                             (if (= :calendar (:page data))\n                                               (reset! menu? false))\n                                             (dispatch [:add-to-db {:actual-page (:page data)}]))}\n   (:name data)])\n\n(defn menu [menu?]\n  [:div.uk-animation-fade {:style {:margin-top \"40px\"}}\n   [menu-item menu? {:name \"Napt\u00e1r\" :page :calendar}]\n   [menu-item menu? {:name \"Sz\u00fcnetek\" :page :brakes}]\n   [menu-item menu? {:name \"Kliensek\" :page :clients}]\n   [menu-item menu? {:name \"Barberek\" :page :employees}]\n   [menu-item menu? {:name \"Szolg\u00e1ltat\u00e1sok\" :page :services}]\n   [menu-item menu? {:name \"Statisztik\u00e1k\" :page :statistics}]])\n\n\n(defn sidebar-content []\n  (let [user-data (subscribe [:data :user-data])\n        selected-date (subscribe [:data :selected-date])\n        editor-data (subscribe [:data :reservation-editor])\n        menu? (atom false)\n        user (subscribe [:data :user-data])\n        today (subscribe [:data :today])]\n    (fn []\n      [:div#blocks\n       (if\n         (= \"admin\" (:role @user-data))\n         [:div {:on-click #(reset! menu? (not @menu?))\n                :style {:z-index 1000\n                        :cursor \"pointer\"\n                        :padding \"10px\"\n                        :position \"absolute\"\n                        :left 0\n                        :top 0}}\n          [:span\n           {:style {\n                    :color \"white\"\n                    :padding \"5px\"\n                    :border \"1px solid white\" :border-radius \"5px\"}\n            :data-uk-icon \"menu\"}]])\n       [:div\n        [:button.uk-button.menu-item\n         [:a {:style {:color \"white\"}\n              :href \"/logout\"}\n          \"Kijelentkez\u00e9s\"]]\n        (if @editor-data\n          [:div\n           [reservation-editor @editor-data]]\n          (if @menu?\n            [menu menu?]\n            [:div.uk-animation-fade\n             [:div.uk-padding.uk-padding-remove-bottom.uk-padding-remove-top\n              [:img.uk-align-center.uk-margin-remove-bottom {:src (str \"/logo/\" (:shop-id @user-data))}]]\n             ;(str @user)\n             [flatpickr\n              {:value @selected-date\n               :options {:locale \"hu\"\n                         :minDate (if (= \"admin\" (:role @user))\n                                    nil\n                                    @today)\n                         :inline true :onChange (fn [selected-dates date-str instance]\n                                                    (dispatch [:select-date date-str]))}}]]))]])))\n\n(defn calendar-sidebar []\n  (let [open? (subscribe [:data :sidebar-open?])\n        last-open? (atom true)\n        close-func (fn [] (do\n                              (reset! last-open? false)\n                              (anim-to\n                                (get-el \"sidebar\")\n                                0.3\n                                (clj->js {:transform \"translateX(-100%)\"\n                                          :clearProps \"transform\"\n                                          :onComplete (fn [a]\n                                                        (set-gsap (get-el \"sidebar\") (clj->js {:width \"0px\"}))\n                                                        (set-gsap (get-el \"sidebar-inner\") (clj->js {:left \"-340px\"})))}))))\n        open-func (fn [] (do (reset! last-open? true)\n                             (do\n                               (set-gsap (get-el \"sidebar-inner\") (clj->js {:left \"0px\" :opacity 0}))\n                               (set-gsap\n                                 (get-el \"sidebar\")\n                                 (clj->js { :position \"relative\" :transform \"translateX(-100%)\"}))\n                               (anim-to\n                                 (get-el \"sidebar\")\n                                 0.3\n                                 (clj->js {:transform \"translateX(0%)\" :width \"340px\"\n                                           :onComplete (fn [a]\n                                                         (set-gsap (get-el \"sidebar-inner\") (clj->js {:opacity 1})))})))))]\n                                           ;:clearProps\"transform\"})))))]\n\n    (reagent/create-class\n      {:component-did-update #(if (not= @last-open? @open?)\n                                (if @open?\n                                  (open-func)\n                                  (close-func)))\n\n       :reagent-render\n       (fn []\n         [:div#sidebar {:style {:background \"#222\" :width (str sidebar-width \"px\")}}\n          [:div#sidebar-inner {:style {:height \"100vh\" :position \"fixed\" :width \"340px\"}}\n                                 ;:transform \"translateX(-100%)\"}}\n           [:div.uk-inline {:style {:height \"100%\" :width \"100%\"}} ;:overflow \"auto\"}}\n            [:div.uk-padding-small {:style {:height \"100%\" :overflow-y \"auto\"}}\n             [:div#trapezium.uk-text-center\n              {:style {:z-index 100}\n               :on-click #(dispatch [:add-to-db {:sidebar-open? (not @open?)}])}\n              [:span {:data-uk-icon (str \"ratio: 1.5; icon: \" (if @open? \"chevron-left\" \"chevron-right\"))}]]\n             [:div\n              {:style {:height \"100%\" :overflow \"auto\"}}\n              [sidebar-content]]]]]])})))\n\n\n(defn this-date []\n  (let [selected-date-and-day (subscribe [:selected-date-and-day])\n        reservations (subscribe [:data :reservations])\n        user (subscribe [:data :user-data])\n        today (subscribe [:data :today])\n        day-name (fn [day-key]\n                   (case day-key\n                     :monday \"H\u00e9tf\u0151\"\n                     :tuesday \"Kedd\"\n                     :wednesday \"Szerda\"\n                     :thursday \"Cs\u00fct\u00f6rt\u00f6k\"\n                     :friday \"P\u00e9ntek\"\n                     :saturday \"Szombat\"\n                     :sunday \"Vas\u00e1rnap\"\n                     \"unknown\"))\n        month-name (fn [month-number]\n                     (case month-number\n                       \"01\" \"Janu\u00e1r\"\n                       \"02\" \"Febru\u00e1r\"\n                       \"03\" \"M\u00e1rcius\"\n                       \"04\" \"\u00c1prilis\"\n                       \"05\" \"M\u00e1jus\"\n                       \"06\" \"J\u00fanius\"\n                       \"07\" \"J\u00falius\"\n                       \"08\" \"Augusztus\"\n                       \"09\" \"Szeptember\"\n                       \"10\" \"Okt\u00f3ber\"\n                       \"11\" \"November\"\n                       \"12\" \"December\"\n                       \"unknown\"))\n        date-in-str (fn [] (let [[year month day] (clojure.string/split (first @selected-date-and-day)\n                                                                        #\"-\")]\n                             (str (month-name month) \" \" day)))]\n    [:div.gold-text.playfair.uk-text-center.uk-padding.uk-padding-bottom-remove.noselect.uk-width-medium.uk-align-center\n     [:div.this-date.uk-inline.uk-height-small {:style {:align-items \"center\" :background \"#222\" :padding \"5px\" :border-radius \"10px\"}}\n      (if\n        (and (not= \"admin\" (:role @user))\n             (= @today (first @selected-date-and-day)))\n        nil\n        [:div.uk-margin-small-right.uk-position-center-left {:on-click #(do\n                                                                          (dispatch [:add-to-db {:reservation-editor nil}])\n                                                                          (dispatch [:select-date (get-yesterday (first @selected-date-and-day))]))\n                                                             :style {:cursor \"pointer\"}\n                                                             :data-uk-icon \"ratio:1.5; icon: chevron-left\"}])\n      [:div.uk-position-center [:div\n                                {:style {:font-size \"1.8em\"}}\n                                (date-in-str)]\n            [:div\n             {:style {:font-size \"1.5em\"}}\n             (day-name (second @selected-date-and-day))]\n            [:div\n             {:style {:font-size \"1.3em\"}}\n             (str (count @reservations) \" vend\u00e9g\")]]\n      [:div.uk-margin-small-left.uk-position-center-right {:on-click #(do\n                                                                        (dispatch [:add-to-db {:reservation-editor nil}])\n                                                                        (dispatch [:select-date (get-tomorrow (first @selected-date-and-day))]))\n                                                           :style {:cursor \"pointer\"}\n                                                           :data-uk-icon \"ratio:1.5; icon: chevron-right\"}]]]))\n\n(defn calendar-page []\n  (let [websocket? (subscribe [:data :websocket?])\n        reservations (subscribe [:data :reservations])]\n    (fn []\n       [:div.uk-width-expand\n        [this-date]\n        (if @websocket?\n          [calendar-loader])])))\n\n\n(defn modal []\n  (let [sidebar-open? (subscribe [:data :sidebar-open?])\n        modal-state (subscribe [:data :modal])\n        last-open? (atom false)\n        open-fn (fn [] (do\n                         (reset! last-open? true)\n                         (set-gsap (get-el \"modal\") {:display \"inherit\"})\n                         (anim-to (get-el \"modal\") 1000 {:opacity 1})))\n        close-fn (fn [] (do\n                          (reset! last-open? false)\n                          (set-gsap (get-el \"modal\") {:display \"none\"})))\n        esc-listener (atom nil)\n        no-fn (fn []\n                (do\n                  (dispatch [:set-modal {:open? false}])\n                  ((:no-fn @modal-state))))\n        yes-fn (fn []\n                 (do\n                   (dispatch [:set-modal {:open? false}])\n                   ((:yes-fn @modal-state))))\n        no-event (fn [a]\n                   (if @last-open?\n                     (if (= 27 (.-which a))\n                       (no-fn))))\n        enter-listener (atom nil)\n        yes-event (fn [a]\n                    (if @last-open?\n                        (if (= 13 (.-which a))\n                            (yes-fn))))]\n    (reagent/create-class\n      {:component-did-mount #(do\n                               (reset! esc-listener no-event)\n                               (reset! enter-listener yes-event)\n                               (add-event-listener js/window \"keydown\" @esc-listener)\n                               (add-event-listener js/window \"keydown\" @enter-listener))\n       :component-will-unmount #(remove-event-listener js/window \"keydown\" @enter-listener)\n       :component-did-update #(if (not= @last-open? (:open? @modal-state))\n                                (if (:open? @modal-state)\n                                  (open-fn)\n                                  (close-fn)))\n       :reagent-render\n         (fn []\n           [:div#modal.uk-inline\n            {:style {:position \"fixed\"\n                     :top 0\n                     :left (if @sidebar-open?\n                             (str sidebar-width \"px\")\n                             \"0px\")\n                     :display \"none\" :background \"rgba(0,0,0,0.7)\"\n                     :height \"100%\"\n                     :z-index 1000\n                     :width (if @sidebar-open?\n                              (str \"calc(100% - \" sidebar-width \"px)\")\n                              \"100%\")}}\n            [:div\n             {:style {:z-index 5000}}]\n            [:div.uk-position-center.uk-padding-small\n             {:style {:z-index 5001\n                      :background \"white\"\n                      :width \"400px\"\n                      :border-radius \"10px\"\n                      :border \"1px solid black\"}}\n             (if (:title @modal-state)\n               [:h4 (:title @modal-state)])\n             [:p.uk-text-bigger (:content @modal-state)]\n             [:div.uk-width-1-1.uk-flex\n              [:button.uk-button.uk-button-default.uk-flex-1\n               {:on-click no-fn}\n               \"Nem\"]\n              [:button.uk-button.uk-button-default.uk-flex-1\n               {:on-click yes-fn}\n               \"Igen\"]]]])})));\n\n\n\n\n\n\n(defn brakes-slider [brake-coll]\n  (let [brake-types (subscribe [:data :brake-types])\n        brake-not-exists? (fn [brakes this-brake]\n                            (empty? (filter\n                                      (fn [a] (= a this-brake))\n                                      (map #(reduce concat %)\n                                           (map :brakes brakes)))))\n        add-brakes (fn [coll] (reset! brake-coll coll))]\n\n    (fn []\n      [:div ;{:style {:width \"500px\" :height \"1000px\" :background \"rgba(0,0,0,0.7)\"}}\n       [:div.uk-container.uk-container-small\n        [:div {:style {:padding-top \"20px\"\n                       :height \"50px\"}}\n         [react-slider\n          {:className \"horizontal-slider\"\n           :thumbClassName \"example-thumb\"\n           :trackClassName \"example-track\"\n           :min 360\n           :max 1440\n           :step 5\n           ;:orientation \"vertical\"\n           ;:invert true\n           :defaultValue @brake-coll\n           :value (clj->js @brake-coll)\n           :onAfterChange #(reset! brake-coll (js->clj %))\n           ;:onBeforeChange #(.log js/console (str \"changing\" %2))\n           :renderThumb (fn [props state]\n                          (reagent/as-element\n                            [:div.in-thumb (merge\n                                             (js->clj props)\n                                             {:class (if (odd? (.-index state))\n                                                       \"in-thumb-right\"\n                                                       \"in-thumb-left\")})\n\n\n\n                                                  ;{:data-uk-tooltip  (str \"pos:bottom; title:\" (convert-to-time (.-valueNow state)))})\n                             (str (convert-to-time (.-valueNow state)))]))\n           :pearling true\n           :minDistance 15}]]]\n       (if (brake-not-exists? @brake-types @brake-coll)\n         [:div.uk-width-1-1\n          [:button.uk-align-center.uk-button.uk-button-primary\n           {:on-click #(dispatch [:add-brake-type (mapv vec (partition 2 @brake-coll))])}\n           \"Sz\u00fcnett\u00edpus hozz\u00e1ad\u00e1sa\"]])\n       [:div.uk-flex.uk-flex-center.uk-width-1-1\n        [:button.uk-button.uk-button-default {:on-click #(add-brakes [600 690])} \"1 sz\u00fcnet\"]\n        [:button.uk-button.uk-button-default {:on-click #(add-brakes [600 690 800 860])} \"2 sz\u00fcnet\"]\n        [:button.uk-button.uk-button-default {:on-click #(add-brakes [600 690 800 860 1000 1080])} \"3 sz\u00fcnet\"]\n        [:button.uk-button.uk-button-default {:on-click #(add-brakes [600 690 800 860 1000 1080 1210 1300])} \"4 sz\u00fcnet\"]]])))\n\n\n\n\n(defn toggle-remove-add [coll item]\n  (if (empty? (filter #(= item %) coll))\n    (vec (concat  [item] coll))\n    (vec (remove #(= item %) coll))))\n\n\n\n\n(defn employee-for-brake [the-atom data]\n  [:div.uk-padding-small.uk-width-auto\n   [:div.uk-card.uk-card-default.uk-padding-small\n    {:style {:border-radius \"5px\" :cursor \"pointer\" :user-select \"none\"}\n     :class (if (some #(= (:_id data) %)\n                      @the-atom)\n              \"active-employee\")\n     :on-click (fn [a] (reset! the-atom (toggle-remove-add @the-atom (:_id data))))}\n    (str (:name data))]])\n\n(defn employees-for-brakes [the-atom]\n  (let [emps (subscribe [:data :employees])]\n    (fn []\n      [:div\n       [:h1.uk-text-center \"Barberek\"]\n       [:div.uk-grid-collapse {:data-uk-grid true}\n        (map-indexed #(-> ^{:key %1}[employee-for-brake the-atom %2])\n                     @emps)]])))\n\n\n(defn brake-type [selected-brake-types selected-brakes data]\n  [:div.uk-padding-small.uk-width-auto\n   [:span.uk-position-right {:data-uk-icon \"close\"\n                             :on-click #(dispatch [:remove-brake-type (:_id data)])\n                             :style {:cursor \"pointer\"}}]\n   [:div.uk-card.uk-card-default.uk-padding-small\n    {:style {:border-radius \"5px\" :cursor \"pointer\" :user-select \"none\"}\n     :class (if (= (:_id data) @selected-brake-types)\n              \"active-employee\")\n     :on-click (fn [a]\n                 (reset! selected-brakes (vec (reduce concat (:brakes data))))\n                 (reset! selected-brake-types (:_id data)))}\n    (map-indexed\n      #(-> ^{:key (random-uuid)}\n            (let [[a b] %2]\n              [:div\n               (convert-to-time a)\n               \" - \"\n               (convert-to-time b)]))\n      (:brakes data))]])\n\n\n(defn brake-types [selected-brakes selected-brake-types]\n  (let [brake-types (subscribe [:data :brake-types])]\n    (fn [selected-brakes selected-brake-types]\n      [:div.uk-padding-small\n       [:h1.uk-text-center \"Sz\u00fcnett\u00edpusok\"]\n       [:div.uk-grid-collapse\n        {:data-uk-grid \"masonry: true\"}\n        (map-indexed #(-> ^{:key %1}[brake-type selected-brake-types selected-brakes %2])\n                     @brake-types)]\n       [brakes-slider selected-brakes]])))\n\n\n(defn table-for-brakes [table-data]\n  (let [employees (subscribe [:data :employees])\n        get-emp (fn [id] (:name (first (filter #(= (:_id %) id)\n                                               @employees))))]\n    [:table.uk-table.uk-table-striped.uk-table-small.uk-table-divider\n     [:thead\n      [:tr\n       [:th]\n       (map-indexed #(-> ^{:key %1}[:th (get-emp %2)])\n                    (sort (set (map first table-data))))]]\n     [:tbody\n      (map-indexed #(-> ^{:key %1} [:tr\n                                    [:td (str (subs (first %2) 5))]\n                                    (map-indexed (fn [idx b] (-> ^{:key idx}[:td (if (and (not (empty? (nth b 2)))\n                                                                                          (not= nil (nth b 2)))\n                                                                                   (map-indexed (fn [the-idx [time1 time2]]\n                                                                                                  (-> ^{:key (random-uuid)}[:div (convert-to-time time1) \" - \" (convert-to-time time2)]))\n                                                                                                (nth b 2))\n                                                                                   \"-\")]))\n                                         (second %2))])\n\n                   (sort-by first (group-by second table-data)))]]))\n\n\n\n(defn brakes []\n  (let [selected-dates (atom [])\n        selected-employees (atom [])\n        selected-brakes (atom [720 780 900 1100])\n        selected-brake-type (atom [])\n        table-data (subscribe [:data :brakes-on-dates])]\n    (fn []\n      [:div\n       [:div.uk-child-width-1-2.uk-grid-collapse.uk-width-1-1.uk-card.uk-card-default\n        {:data-uk-grid true}\n        [:div.uk-width-auto.uk-padding-small\n         [:h1.uk-text-center\"Napok\"]\n         [flatpickr\n          {:mode \"multiple\"\n           :value @selected-dates\n           :options {:locale \"hu\"\n                     :inline true :onChange\n                             (fn [a date-str instance]\n                               (reset! selected-dates\n                                       (toggle-remove-add @selected-dates date-str)))}}]]\n        [:div.uk-width-expand.uk-padding-small\n         [employees-for-brakes selected-employees]]\n        (if (and (not (empty? @selected-dates))\n                 (not (empty? @selected-employees)))\n          [:div.uk-width-1-1.uk-padding-small.uk-flex.uk-flex-center\n           {:style {:border-top \"1px solid lightgrey\"\n                    :border-bottom \"1px solid lightgrey\"}}\n           [:button.uk-button.uk-button-primary\n            {:on-click #(dispatch [:get-brakes-on-dates @selected-dates @selected-employees])}\n            \"T\u00e1bl\u00e1zat lek\u00e9r\u00e9se\"]\n           (if @table-data\n             [:button.uk-button.uk-button-secondary\n              {:on-click #(dispatch [:assoc-data-to-key :brakes-on-dates nil])}\n              \"T\u00e1bl\u00e1zat t\u00f6rl\u00e9se\"])])\n        [:div.uk-width-1-1\n         [table-for-brakes @table-data]]\n        [:div.uk-width-1-1\n         [brake-types selected-brakes selected-brake-type]]\n        [:div.uk-width-1-1.uk-padding-small\n         [:button.uk-button.uk-button-primary.uk-align-center\n          {:on-click #(dispatch [:add-brakes-to-dates @selected-dates @selected-employees @selected-brake-type])}\n          \"Sz\u00fcnet ment\u00e9se a kijel\u00f6lt barbekre \u00e9s napokra\"]\n         [:button.uk-button.uk-button-secondary.uk-align-center\n          {:on-click #(dispatch [:add-brakes-to-dates @selected-dates @selected-employees nil])}\n          \"Sz\u00fcnet t\u00f6rl\u00e9se a kijel\u00f6lt barbekre \u00e9s napokra\"]]]])))\n\n\n\n\n\n\n(defn clients-page []\n  (let [clients (subscribe [:data :clients])\n        the-count (subscribe [:data :clients-count])]\n    (reagent/create-class\n      {:component-did-mount #(do\n                               (dispatch [:get-clients])\n                               (dispatch [:get-clients-count]))\n       :reagent-render (fn []\n                         [:div.uk-container.uk-container-large\n                          [:div.uk-padding\n                           [:h2.uk-text-center.playfair.gold-text.uk-padding-small.uk-margin-top\n                            {:style {:border-radius \"10px\" :background \"#222\"}}\n                            \"Kliensek: \" (str @the-count)]]\n                          [:div (map-indexed\n                                  #(-> ^{:key %1}[:div.uk-card.uk-card-default.uk-padding-small.uk-grid-collapse.uk-child-width-expand\n                                                  {:data-uk-grid true}\n                                                  [:div (:name %2)]\n                                                  [:div (:email %2)]\n                                                  [:div (:phone %2)]])\n                                  @clients)\n                           [:div.uk-padding\n                            [:button.uk-button.uk-button-primary.uk-align-center\n                             {:on-click #(dispatch [:get-clients])}\n                             \"Tov\u00e1bbi 20\"]]]])})))\n\n(defn current-page []\n  (let [actual-page (subscribe [:data :actual-page])];netflix-counter (subscribe [:data :netflix-counter])]\n    (reagent/create-class\n      {:reagent-render (fn []\n                         (let [route-params (subscribe [:data :route-params])]\n                           [:div\n                            ;[:div (str \"hello \" (str @user-data))]\n                            [:div\n                             [:div.uk-width-1-1 {:style {:background \"url('/main.jpg')\"}}\n                              [:div.uk-flex {:style {:min-height \"100vh\"}}\n                               [calendar-sidebar]\n                               [:div.uk-width-expand ;.uk-inline\n                                (case @actual-page\n                                  :calendar [calendar-page]\n                                  :employees ^{:key \"e\"}[dnd :employees]\n                                  :services  ^{:key \"s\"}[dnd :services]\n                                  :brakes [brakes]\n                                  :clients [clients-page]\n                                  \"This page doesn't exists.\")]]]]\n                            [modal]]))})))\n"]}