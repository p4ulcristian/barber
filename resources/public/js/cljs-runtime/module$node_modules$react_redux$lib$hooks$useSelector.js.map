{
"version":3,
"file":"module$node_modules$react_redux$lib$hooks$useSelector.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/react-redux/lib/hooks/useSelector.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_redux$lib$hooks$useSelector\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.createSelectorHook = createSelectorHook;\nexports.useSelector = void 0;\n\nvar _react = require(\"react\");\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _useReduxContext2 = require(\"./useReduxContext\");\n\nvar _Subscription = _interopRequireDefault(require(\"../utils/Subscription\"));\n\nvar _Context = require(\"../components/Context\");\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = (0, _react.useReducer)(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = (0, _react.useMemo)(function () {\n    return new _Subscription[\"default\"](store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = (0, _react.useRef)();\n  var latestSelector = (0, _react.useRef)();\n  var latestSelectedState = (0, _react.useRef)();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {\n    return (0, _react.useContext)(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    (0, _invariant[\"default\"])(selector, \"You must pass a selector to useSelectors\");\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\n\nvar useSelector = createSelectorHook();\nexports.useSelector = useSelector;\n};"],
"names":["shadow$provide","global","require","module","exports","useSelectorWithStoreAndSubscription","selector","equalityFn","store","contextSub","forceRender","_useReducer","_react","useReducer","s","subscription","useMemo","_Subscription","latestSubscriptionCallbackError","useRef","latestSelector","latestSelectedState","selectedState","current","getState","err","errorMessage","message","stack","Error","useIsomorphicLayoutEffect","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","createSelectorHook","context","_Context","ReactReduxContext","useReduxContext","_useReduxContext2","useContext","useSelector","refEquality","_invariant","_useReduxContext","_interopRequireDefault","__esModule","window","useLayoutEffect","useEffect","a","b"]
}
