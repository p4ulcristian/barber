{
"version":3,
"file":"module$node_modules$react_redux$lib$hooks$useDispatch.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBlHC,QAASA,mBAAkB,CAACC,OAAD,CAAU,CACnB,IAAK,EAArB,GAAIA,OAAJ,GACEA,OADF,CACYC,QAAAC,kBADZ,CAIA,KAAIC,SAAWH,OAAA,GAAYC,QAAAC,kBAAZ,CAAyCE,SAAAD,SAAzC,CAA8D,CAAC,CAAA,CAAGC,SAAAC,gBAAJ,EAA+BL,OAA/B,CAC7E,OAAOM,SAAoB,EAAG,CAE5B,MADYH,SAAAI,EACLC,SAFqB,CANK,CAdrCV,OAAAW,WAAA,CAAqB,CAAA,CACrBX,QAAAC,mBAAA,CAA6BA,kBAC7BD,QAAAQ,YAAA,CAAsB,IAAK,EAE3B,KAAIL,SAAWL,OAAA,CAAQ,wDAAR,CAAf;AAEIQ,UAAYR,OAAA,CAAQ,oDAAR,CA0CZU,OAAAA,CAAcP,kBAAA,EAClBD,QAAAQ,YAAA,CAAsBA,MApD4F;",
"sources":["node_modules/react-redux/lib/hooks/useDispatch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_redux$lib$hooks$useDispatch\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.createDispatchHook = createDispatchHook;\nexports.useDispatch = void 0;\n\nvar _Context = require(\"../components/Context\");\n\nvar _useStore = require(\"./useStore\");\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\n\nvar useDispatch = createDispatchHook();\nexports.useDispatch = useDispatch;\n};"],
"names":["shadow$provide","global","require","module","exports","createDispatchHook","context","_Context","ReactReduxContext","useStore","_useStore","createStoreHook","useDispatch","store","dispatch","__esModule"]
}
