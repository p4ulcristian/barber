shadow$provide.module$node_modules$redux$lib$redux=function(global,require,module,exports){function isPlainObject(obj){if("object"!==typeof obj||null===obj)return!1;for(var proto=obj;null!==Object.getPrototypeOf(proto);)proto=Object.getPrototypeOf(proto);return Object.getPrototypeOf(obj)===proto}function createStore(reducer,preloadedState,enhancer,JSCompiler_OptimizeArgumentsArray_p2){function getState(){if(isDispatching)throw Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
return currentState}function subscribe(listener){if("function"!==typeof listener)throw Error("Expected the listener to be a function.");if(isDispatching)throw Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var isSubscribed=
!0;nextListeners===currentListeners&&(nextListeners=currentListeners.slice());nextListeners.push(listener);return function(){if(isSubscribed){if(isDispatching)throw Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");isSubscribed=!1;nextListeners===currentListeners&&(nextListeners=currentListeners.slice());var index=nextListeners.indexOf(listener);nextListeners.splice(index,1)}}}function dispatch(action){if(!isPlainObject(action))throw Error("Actions must be plain objects. Use custom middleware for async actions.");
if("undefined"===typeof action.type)throw Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(isDispatching)throw Error("Reducers may not dispatch actions.");try{isDispatching=!0,currentState=currentReducer(currentState,action)}finally{isDispatching=!1}for(var listeners=currentListeners=nextListeners,i=0;i<listeners.length;i++)(0,listeners[i])();return action}var _ref2;if("function"===typeof preloadedState&&"function"===typeof enhancer||"function"===typeof enhancer&&
"function"===typeof JSCompiler_OptimizeArgumentsArray_p2)throw Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");"function"===typeof preloadedState&&"undefined"===typeof enhancer&&(enhancer=preloadedState,preloadedState=void 0);if("undefined"!==typeof enhancer){if("function"!==typeof enhancer)throw Error("Expected the enhancer to be a function.");return enhancer(createStore)(reducer,preloadedState)}if("function"!==
typeof reducer)throw Error("Expected the reducer to be a function.");var currentReducer=reducer,currentState=preloadedState,currentListeners=[],nextListeners=currentListeners,isDispatching=!1;dispatch({type:ActionTypes.INIT});return _ref2={dispatch:dispatch,subscribe:subscribe,getState:getState,replaceReducer:function(nextReducer){if("function"!==typeof nextReducer)throw Error("Expected the nextReducer to be a function.");currentReducer=nextReducer;dispatch({type:ActionTypes.REPLACE})}},_ref2[$$observable]=
function(){var _ref;return _ref={subscribe:function(observer){function observeState(){observer.next&&observer.next(getState())}if("object"!==typeof observer||null===observer)throw new TypeError("Expected the observer to be an object.");observeState();return{unsubscribe:subscribe(observeState)}}},_ref[$$observable]=function(){return this},_ref},_ref2}function warning(message){"undefined"!==typeof console&&"function"===typeof console.error&&console.error(message);try{throw Error(message);}catch(e){}}
function getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){var reducerKeys=Object.keys(reducers),argumentName=action&&action.type===ActionTypes.INIT?"preloadedState argument passed to createStore":"previous state received by the reducer";if(0===reducerKeys.length)return"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";if(!isPlainObject(inputState))return"The "+argumentName+' has unexpected type of "'+
{}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1]+'". Expected argument to be an object with the following '+('keys: "'+reducerKeys.join('", "')+'"');inputState=Object.keys(inputState).filter(function(key){return!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key]});inputState.forEach(function(key){unexpectedKeyCache[key]=!0});if((!action||action.type!==ActionTypes.REPLACE)&&0<inputState.length)return"Unexpected "+(1<inputState.length?"keys":"key")+" "+('"'+inputState.join('", "')+'" found in '+
argumentName+". ")+"Expected to find one of the known reducer keys instead: "+('"'+reducerKeys.join('", "')+'". Unexpected keys will be ignored.')}function assertReducerShape(reducers){Object.keys(reducers).forEach(function(key){var reducer=reducers[key];if("undefined"===typeof reducer(void 0,{type:ActionTypes.INIT}))throw Error('Reducer "'+key+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
if("undefined"===typeof reducer(void 0,{type:ActionTypes.PROBE_UNKNOWN_ACTION()}))throw Error('Reducer "'+key+'" returned undefined when probed with a random type. '+("Don't try to handle "+ActionTypes.INIT+' or other actions in "redux/*" ')+"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
})}function bindActionCreator(actionCreator,dispatch){return function(){return dispatch(actionCreator.apply(this,arguments))}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);Object.getOwnPropertySymbols&&keys.push.apply(keys,Object.getOwnPropertySymbols(object));enumerableOnly&&(keys=keys.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}));return keys}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?
arguments[i]:{};i%2?ownKeys(source,!0).forEach(function(key){var value=source[key];key in target?Object.defineProperty(target,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):target[key]=value}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}return target}function compose(){for(var _len=arguments.length,funcs=Array(_len),
_key=0;_key<_len;_key++)funcs[_key]=arguments[_key];return 0===funcs.length?function(arg){return arg}:1===funcs.length?funcs[0]:funcs.reduce(function(a,b){return function(){return a(b.apply(void 0,arguments))}})}function isCrushed(){}Object.defineProperty(exports,"__esModule",{value:!0});var $$observable=function(ex){return ex&&"object"===typeof ex&&"default"in ex?ex["default"]:ex}(require("module$node_modules$symbol_observable$lib$index")),randomString=function(){return Math.random().toString(36).substring(7).split("").join(".")},
ActionTypes={INIT:"@@redux/INIT"+randomString(),REPLACE:"@@redux/REPLACE"+randomString(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+randomString()}};"string"===typeof isCrushed.name&&"isCrushed"!==isCrushed.name&&warning('You are currently using minified code outside of NODE_ENV \x3d\x3d\x3d "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
exports.__DO_NOT_USE__ActionTypes=ActionTypes;exports.applyMiddleware=function(){for(var _len=arguments.length,middlewares=Array(_len),_key=0;_key<_len;_key++)middlewares[_key]=arguments[_key];return function(createStore){return function(){var store=createStore.apply(void 0,arguments),_dispatch=function(){throw Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");},middlewareAPI={getState:store.getState,dispatch:function(){return _dispatch.apply(void 0,
arguments)}},chain=middlewares.map(function(middleware){return middleware(middlewareAPI)});_dispatch=compose.apply(void 0,chain)(store.dispatch);return _objectSpread2({},store,{dispatch:_dispatch})}}};exports.bindActionCreators=function(actionCreators,dispatch){if("function"===typeof actionCreators)return bindActionCreator(actionCreators,dispatch);if("object"!==typeof actionCreators||null===actionCreators)throw Error("bindActionCreators expected an object or a function, instead received "+(null===
actionCreators?"null":typeof actionCreators)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var boundActionCreators={},key;for(key in actionCreators){var actionCreator=actionCreators[key];"function"===typeof actionCreator&&(boundActionCreators[key]=bindActionCreator(actionCreator,dispatch))}return boundActionCreators};exports.combineReducers=function(reducers){for(var reducerKeys=Object.keys(reducers),finalReducers={},i=0;i<reducerKeys.length;i++){var key=
reducerKeys[i];"undefined"===typeof reducers[key]&&warning('No reducer provided for key "'+key+'"');"function"===typeof reducers[key]&&(finalReducers[key]=reducers[key])}var finalReducerKeys=Object.keys(finalReducers);var unexpectedKeyCache={};try{assertReducerShape(finalReducers)}catch(e){var shapeAssertionError=e}return function(state,action){void 0===state&&(state={});if(shapeAssertionError)throw shapeAssertionError;var warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,
unexpectedKeyCache);warningMessage&&warning(warningMessage);for(var hasChanged=!1,nextState={},_i=0;_i<finalReducerKeys.length;_i++){warningMessage=finalReducerKeys[_i];var previousStateForKey=state[warningMessage],nextStateForKey=(0,finalReducers[warningMessage])(previousStateForKey,action);if("undefined"===typeof nextStateForKey)throw state=action&&action.type,Error("Given "+(state&&'action "'+String(state)+'"'||"an action")+', reducer "'+warningMessage+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
nextState[warningMessage]=nextStateForKey;hasChanged=hasChanged||nextStateForKey!==previousStateForKey}return hasChanged?nextState:state}};exports.compose=compose;exports.createStore=createStore}
//# sourceMappingURL=module$node_modules$redux$lib$redux.js.map
