{"version":3,"sources":["barber/sente.cljs"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","barber.sente/->output!","seq14622","self__4718__auto__","cljs.core/seq","args","js/console","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","barber.sente/?csrf-token","temp__5735__auto__","el","js/document","p__14624","map__14625","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","barber.sente/local-uri?","uri","cljs.core/not","cljs.core/re-find","barber.sente/default-headers","request","p1__14627#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","barber.sente/load-interceptors!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","ajax.core/default-interceptors","cljs.core/conj","G__14628","ajax.core/to-interceptor","map__14631","rand-chsk-type","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","_","barber.sente.__GT_output_BANG_.cljs$core$IFn$_invoke$arity$variadic","packer","chsk","ch-recv","send-fn","state","taoensso.sente.make_channel_socket_client_BANG_.cljs$core$IFn$_invoke$arity$variadic","barber.sente/chsk","barber.sente/ch-chsk","barber.sente/chsk-send!","barber.sente/chsk-state","js/barber","js/barber.sente","js/barber.sente.-event-msg-handler","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__14634","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","barber.sente/-event-msg-handler","p__14635","map__14636","barber.sente/event-msg-handler","ev-msg","id","?data","event","p__14638","map__14639","p__14641","map__14642","vec__14644","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","old-state-map","new-state-map","e","taoensso.truss.impl/-dummy-error","e14647","js/Error","taoensso.truss.impl/-invar-violation!","cljs.core/vector?","G__14649","re-frame.core/dispatch","p__14650","map__14651","vec__14654","the-key","the-data","G__14657","cljs.core/Keyword","cljs.core/deref","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__14658","re-frame.core/subscribe","G__14659","cljs.core/first","p__14660","map__14661","vec__14664","?uid","?csrf-token","?handshake-data","js/barber.sente.router_","barber.sente/router_","barber.sente/stop-router!","stop-f","barber.sente/start-router!","cljs.core/reset!","taoensso.sente/start-client-chsk-router!","barber.sente/start!"],"sourcesContent":["(ns barber.sente ; .cljs\n  (:require-macros\n   [cljs.core.async.macros :as asyncm :refer (go go-loop)])\n  (:require\n   ;; <other stuff>\n   [taoensso.encore :as encore :refer-macros (have have?)]\n   [cljs.core.async :as async :refer (<! >! put! chan)]\n   [taoensso.sente  :as sente :refer (cb-success?)]\n   [re-frame.core :refer [subscribe dispatch]]\n   [ajax.core :as ajax :refer [GET POST]])) ; <--- Add this\n\n\n(defn ->output! [& args]\n  (.log js/console\n        (str\n          \"Sente message: \"\n          (apply str args))))\n\n(def ?csrf-token\n  (when-let [el (.getElementById js/document \"sente-csrf-token\")]\n    (.getAttribute el \"data-csrf-token\")))\n\n(defn local-uri? [{:keys [uri]}]\n  (not (re-find #\"^\\w+?://\" uri)))\n\n\n(defn default-headers [request]\n  (if (local-uri? request)\n    (-> request\n        (update\n          :headers\n          #(merge\n             {\"Accept\" \"application/transit+json\"\n              \"x-csrf-token\" ?csrf-token}\n             %)))\n    request))\n\n\n(defn load-interceptors! []\n  (swap! ajax/default-interceptors\n         conj\n         (ajax/to-interceptor {:name \"default headers\"\n                               :request default-headers})))\n\n(load-interceptors!)\n\n\n\n(let [;; For this example, select a random protocol:\n      rand-chsk-type (if (>= (rand) 0.5) :ajax :auto)\n      _ (->output! \"Randomly selected chsk type: %s\" rand-chsk-type)\n\n      ;; Serializtion format, must use same val for client + server:\n      packer :edn ; Default packer, a good choice in most cases\n      ;; (sente-transit/get-transit-packer) ; Needs Transit dep\n\n      {:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n        \"/chsk\" ; Must match server Ring routing URL\n        ?csrf-token\n        {:type   rand-chsk-type\n         :packer packer})]\n\n  (def chsk       chsk)\n  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel\n  (def chsk-send! send-fn) ; ChannelSocket's send API fn\n  (def chsk-state state))   ; Watchable, read-only atom\n\n\n(defmulti -event-msg-handler\n  \"Multimethod to handle Sente `event-msg`s\"\n  :id) ; Dispatch on event-id\n\n(defn event-msg-handler\n  \"Wraps `-event-msg-handler` with logging, error catching, etc.\"\n  [{:as ev-msg :keys [id ?data event]}]\n  (-event-msg-handler ev-msg))\n\n(defmethod -event-msg-handler\n  :default ; Default/fallback case (no other matching handler)\n  [{:as ev-msg :keys [event]}]\n  (->output! \"Unhandled event: %s\" event))\n\n(defmethod -event-msg-handler :chsk/state\n  [{:as ev-msg :keys [?data]}]\n  (let [[old-state-map new-state-map] (have vector? ?data)]\n    (if (:first-open? new-state-map)\n      (dispatch [:assoc-data-to-key :websocket? true])\n      (->output! \"Channel socket state change: %s\"              new-state-map))))\n\n(defmethod -event-msg-handler :chsk/recv\n  [{:as ev-msg :keys [?data]}]\n  (let [[the-key the-data] ?data]\n    (case the-key\n       :calendar/update (do\n                          (.log js/console (str \"Calendar update: \" (:date the-data)))\n                          (if (= (:date the-data) @(subscribe [:data :selected-date]))\n                            (dispatch [:get-reservations-and-brakes (:date the-data)])))\n       (->output! \"Push event from server: %s\" (first ?data)))))\n\n(defmethod -event-msg-handler :chsk/handshake\n  [{:as ev-msg :keys [?data]}]\n  (let [[?uid ?csrf-token ?handshake-data] ?data]\n    (->output! \"Handshake: %s\" ?data)))\n\n(defonce router_ (atom nil))\n(defn  stop-router! [] (when-let [stop-f @router_] (stop-f)))\n(defn start-router! []\n  (stop-router!)\n  (reset! router_\n    (sente/start-client-chsk-router!\n      ch-chsk event-msg-handler)))\n\n(defn start! []\n  (if ?csrf-token\n    (do (->output! \"CSRF token detected in HTML, great!\")\n      (start-router!))\n    (->output! \"CSRF token NOT detected in HTML, default Sente config will reject requests\")))\n"]}