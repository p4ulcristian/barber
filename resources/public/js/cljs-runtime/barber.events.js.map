{"version":3,"sources":["barber/events.cljs"],"mappings":"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","names":["barber.events/get-day-from-date","year","month","day","date","js/Date","day-code","G__14689","p__14690","map__14695","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","barber.events/ajax-get","url","handler","error-handler","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","p__14713","map__14717","barber.events/ajax-post","params","ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic","p__14733","map__14735","barber.events/chsk-send","event-key","data","callback","G__14748","G__14749","G__14750","barber.sente/chsk-send!","reply","taoensso.sente/cb-success?","js/console","barber.events/check-and-throw","a-spec","db","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain-str","barber.events/check-spec-interceptor","G__14765","re-frame.core/after","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","barber.events/->local-store","barber.db/todos->local-store","barber.events/todo-interceptors","G__14766","re-frame.core/path","barber.events/allocate-next-id","todos","G__14774","fexpr__14773","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/last","cljs.core/keys","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__14781","vec__14782","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","the-map","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__14789","vec__14790","new-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","barber.events/insert-at-index","idx","coll","value","vec__14796","start","end","cljs.core/split-at","new-vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","barber.events/remove-at-index","pos","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","barber.events/anim-to","element","timeout","js/TweenMax","cljs.core/clj->js","barber.events/modify-position-in-vec","index-first","index-second","barber.events/reindex","p1__14802#","p2__14801#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","barber.events/new-order","type","event-object","map__14804","event-map","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","source","destination","source-id","destination-id","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__14806","vec__14807","cofx","the-key","js/window","p__14810","vec__14811","id","to-change","cljs.core/assoc-in","cljs.core/first","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","val","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__14816","vec__14817","G__14822","cljs.core/Keyword","cljs.core/name","G__14823","re-frame.core/dispatch","p__14824","vec__14825","emp-id","modified-service","barber.events/key-plus-str","the-str","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/str","cljs.core/rest","p__14828","vec__14829","p__14832","vec__14833","modal-content","map__14836","fexpr__14840","the-db","and__4120__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__14839","fexpr__14838","p__14841","vec__14842","G__14845","G__14846","re-frame.core/reg-fx","config","G__14847","G__14848","G__14849","p__14851","vec__14852","read-data","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","data-with-id","p1__14850#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p__14855","vec__14856","res-id","G__14859","p__14860","vec__14861","G__14864","p__14867","vec__14869","p1__14866#","G__14872","G__14873","G__14874","p1__14875#","G__14876","G__14877","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","G__14878","p1__14879#","G__14880","G__14881","G__14882","p1__14883#","G__14884","G__14885","p__14886","vec__14887","G__14890","G__14891","p__14893","vec__14894","p1__14892#","braketype","G__14897","G__14898","p__14900","vec__14901","p1__14899#","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","p__14904","vec__14905","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__14910","vec__14912","reservation-id","with-this","the-res","p1__14908#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","without-the-res","p1__14909#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","new-res","with-new-res","G__14916","G__14918","G__14920","G__14922","G__14923","G__14925","p__14928","vec__14929","p1__14927#","dates","employees","G__14933","G__14935","p__14937","vec__14939","p1__14936#","G__14944","p__14948","vec__14949","p1__14945#","G__14952","p__14954","vec__14955","brake-id","p1__14953#","G__14960","G__14961","p1__14962#","G__14963","G__14964","p__14965","vec__14966","G__14969","p__14970","vec__14971","G__14974","p1__14975#","G__14976","G__14977","p__14978","vec__14980","G__14984","G__14985","G__14986","G__14987","G__14988","G__14989","p__14993","vec__14994","p__14998","vec__15000","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__15004","vec__15005","js/document","p__15009","vec__15010","p__15014","vec__15015","G__15018","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","clojure.string.split.cljs$core$IFn$_invoke$arity$2","p1__15019#","G__15020","G__15021","p1__15022#","p1__15023#","G__15024","p1__15025#","js/UIkit","p__15028","vec__15029","p1__15026#","p1__15027#","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__15032","re-frame.core/inject-cofx","p__15033","map__15034","local-store-todos","barber.db/default-db","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","p__15037","vec__15038","new-filter-kw","p__15043","vec__15044","text","p__15047","vec__15048","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__15051","vec__15052","title","p__15057","vec__15058","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","done-ids","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","new-done","cljs.core/not-every?","p1__15061#","p2__15062#"],"sourcesContent":["(ns barber.events\n  (:require\n    [barber.db    :refer [default-db todos->local-store]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx path after dispatch reg-fx]]\n    [cljs.spec.alpha :as s]\n    [barber.sente :as sente]\n    [ajax.core :refer [GET POST]]\n    [taoensso.sente  :refer (cb-success?)]\n    [cljs.reader :as reader :refer [read-string]]))\n\n\n(defn get-day-from-date [year month day]\n  (let [date (new js/Date year (dec month) day)\n        day-code (.getDay date)]\n    (case day-code\n      1 :monday\n      2 :tuesday\n      3 :wednesday\n      4 :thursday\n      5 :friday\n      6 :saturday\n      0 :sunday\n      :unknown)))\n\n\n(defn ajax-get [{:keys [url handler error-handler]}]\n  (GET url\n    {:handler handler\n     :error-handler error-handler}))\n\n\n(defn ajax-post [{:keys [url handler error-handler params]}]\n  (POST url\n    {:handler handler\n     :params params\n     :error-handler error-handler}))\n\n\n(defn chsk-send [{:keys [event-key data callback]}]\n ;(.notification js/UIkit \"Chsk event!\")\n       (sente/chsk-send! [event-key data] 8000\n            (fn [reply]\n                (if (cb-success? reply)\n                    (callback reply)\n                    (.log js/console \"Sente error: \" reply)))))\n\n\n;; -- Interceptors --------------------------------------------------------------\n;;\n;; Interceptors are a more advanced topic. So, we're plunging into the deep\n;; end here.\n;;\n;; There is a tutorial on Interceptors in re-frame's `/docs`, but to get\n;; you going fast, here's a very high level description ...\n;;\n;; Every event handler can be \"wrapped\" in a chain of interceptors. A\n;; \"chain of interceptors\" is actually just a \"vector of interceptors\". Each\n;; of these interceptors can have a `:before` function and an `:after` function.\n;; Each interceptor wraps around the \"handler\", so that its `:before`\n;; is called before the event handler runs, and its `:after` runs after\n;; the event handler has run.\n;;\n;; Interceptors with a `:before` action, can be used to \"inject\" values\n;; into what will become the `coeffects` parameter of an event handler.\n;; That's a way of giving an event handler access to certain resources,\n;; like values in LocalStore.\n;;\n;; Interceptors with an `:after` action, can, among other things,\n;; process the effects produced by the event handler. One could\n;; check if the new value for `app-db` correctly matches a Spec.\n;;\n\n\n;; -- First Interceptor ------------------------------------------------------\n;;\n;; Event handlers change state, that's their job. But what happens if there's\n;; a bug in the event handler and it corrupts application state in some subtle way?\n;; Next, we create an interceptor called `check-spec-interceptor`.\n;; Later, we use this interceptor in the interceptor chain of all event handlers.\n;; When included in the interceptor chain of an event handler, this interceptor\n;; runs `check-and-throw` `after` the event handler has finished, checking\n;; the value for `app-db` against a spec.\n;; If the event handler corrupted the value for `app-db` an exception will be\n;; thrown. This helps us detect event handler bugs early.\n;; Because all state is held in `app-db`, we are effectively validating the\n;; ENTIRE state of the application after each event handler runs.  All of it.\n\n\n(defn check-and-throw\n  \"Throws an exception if `db` doesn't match the Spec `a-spec`.\"\n  [a-spec db]\n  (when-not (s/valid? a-spec db)\n    (throw (ex-info (str \"spec check failed: \" (s/explain-str a-spec db)) {}))))\n\n;; now we create an interceptor using `after`\n(def check-spec-interceptor (after (partial check-and-throw :barber.db/db)))\n\n\n;; -- Second Interceptor -----------------------------------------------------\n;;\n;; Part of the TodoMVC challenge is to store todos in local storage.\n;; Next, we define an interceptor to help with this challenge.\n;; This interceptor runs `after` an event handler, and it stores the\n;; current todos into local storage.\n;; Later, we include this interceptor into the interceptor chain\n;; of all event handlers which modify todos.  In this way, we ensure that\n;; every change to todos is written to local storage.\n(def ->local-store (after todos->local-store))\n\n\n;; -- Interceptor Chain ------------------------------------------------------\n;;\n;; Each event handler can have its own chain of interceptors.\n;; We now create the interceptor chain shared by all event handlers\n;; which manipulate todos.\n;; A chain of interceptors is a vector of interceptors.\n;; Explanation of the `path` Interceptor is given further below.\n(def todo-interceptors [check-spec-interceptor    ;; ensure the spec is still valid  (after)\n                        (path :todos)             ;; the 1st param given to handler will be the value from this path within db\n                        ->local-store])            ;; write todos to localstore  (after)\n\n\n;; -- Helpers -----------------------------------------------------------------\n\n(defn allocate-next-id\n  \"Returns the next todo id.\n  Assumes todos are sorted.\n  Returns one more than the current largest id.\"\n  [todos]\n  ((fnil inc 0) (last (keys todos))))\n\n\n;; -- Event Handlers ----------------------------------------------------------\n\n;; usage:  (dispatch [:initialise-db])\n;;\n;; This event is dispatched in the app's `main` (core.cljs).\n;; It establishes initial application state in `app-db`.\n;; That means merging:\n;;   1. Any todos stored in LocalStore (from the last session of this app)\n;;   2. Default initial values\n;;\n;; Advanced topic:  we inject the todos currently stored in LocalStore\n;; into the first, coeffect parameter via use of the interceptor\n;;    `(inject-cofx :local-store-todos)`\n;;\n;; To fully understand this advanced topic, you'll have to read the tutorials\n;; and look at the bottom of `db.cljs` for the `:local-store-todos` cofx\n;; registration.\n\n\n\n(reg-event-db\n  :add-to-db\n  (fn [db [_ the-map]]\n    (merge db the-map)))\n\n\n\n(reg-event-db\n  :set-modal\n  (fn [db [_ new-state]]\n    (assoc db :modal\n              (merge (:modal db)\n                     new-state))))\n\n\n\n\n(defn insert-at-index [idx coll value]\n  (let [[start end] (split-at idx coll)\n        new-vec (concat start [value] end)]\n    new-vec))\n\n(defn remove-at-index [coll pos]\n  (vec (concat (subvec coll 0 pos)\n               (subvec coll (inc pos)))))\n\n\n(defn anim-to [element timeout the-map]\n  (.to js/TweenMax element timeout (clj->js the-map)))\n\n\n(defn modify-position-in-vec [coll index-first index-second]\n  (let [value (get coll index-first)]\n    (insert-at-index index-second\n                     (remove-at-index coll index-first)\n                     value)))\n\n(defn reindex [coll]\n  (vec (map-indexed\n         #(assoc %2 :priority %1)\n         coll)))\n\n\n(defn new-order [coll type event-object]\n  (let [event-map (js->clj event-object :keywordize-keys true)\n        {:keys [source destination]} event-map\n        source-id (:index source)\n        destination-id (:index destination)]\n    (if destination-id (vec (reindex (modify-position-in-vec coll source-id destination-id)))\n                       coll)))\n\n\n(reg-event-fx\n  :termekek/get\n  (fn [cofx [_ the-key]]\n    {:chsk {:event-key :termekek/get\n            :data {:number 20\n                   :skip 20}\n            :callback #(.alert js/window \"hello\")}}))\n\n\n(reg-event-db\n  :modify-local-item\n  (fn [db [_ the-key id to-change value]]\n    (assoc-in db [the-key (first (keep-indexed\n                                   (fn [idx val]\n                                     (if (= id (:_id val))\n                                         idx\n                                         nil))\n                                   (get db the-key)))\n                  to-change]\n              value)))\n\n(reg-event-fx\n  :modify-item\n  (fn [cofx [_ the-key to-change id value]]\n    {:chsk {:event-key (case the-key\n                         :employees :employees/modify-item\n                         :services :services/modify-item\n                         :error)\n            :data {:key (name the-key)\n                   :to-change to-change\n                   :_id id\n                   :value value}\n            :callback #(do\n                         (dispatch [:modify-local-item the-key id to-change value]))}}))\n\n(reg-event-fx\n  :modify-employee-service\n  (fn [cofx [_ emp-id modified-service]]\n    {:chsk {:event-key :employees/modify-employee-service\n            :data {:modified-service modified-service\n                   :emp-id emp-id}\n\n            :callback #(do\n                         (.log js/console \"hello there\" emp-id modified-service))}}))\n\n\n(defn key-plus-str [the-key the-str]\n  (keyword (apply str (rest (str the-key the-str)))))\n\n(reg-event-db\n  :restore-positions\n  (fn [db [_ the-key]]\n    (assoc db the-key (get\n                        db\n                        (key-plus-str the-key \"-last-order\")))))\n\n\n(reg-event-db\n  :drag-end\n  (fn [db [_ type event-object modal-content]]\n    (let [event-map (js->clj event-object :keywordize-keys true)\n          {:keys [source destination]} event-map\n          source-id (:index source)\n          destination-id (:index destination)]\n      (-> db\n        ((fn [the-db] (if (and destination-id (not= source-id destination-id))\n                        (assoc the-db :modal modal-content)\n                        the-db)))\n        ((fn [the-db]\n           (if destination-id\n             (do\n               (assoc the-db (key-plus-str type \"-last-order\") (get db type))\n               (assoc the-db type (new-order (vec (get db type)) type event-object)))\n             the-db)))))))\n\n(reg-event-db\n  :assoc-data-to-key\n  (fn [db [_ the-key the-map]]\n      (assoc db the-key the-map)))\n\n\n(reg-fx\n  :ajax\n  (fn [config]\n    (case (:method config)\n      :get (ajax-get config)\n      :post (ajax-post config)\n      (.log js/console (str \":ajax :method does not exist.\")))))\n\n(reg-fx\n  :chsk\n  (fn [params]\n    (chsk-send params)))\n\n(reg-event-fx\n  :ws-server-time\n  (fn [_]\n    {:chsk {}}))\n\n(reg-event-db\n  :add-calendar-data\n  (fn [db [_ data]]\n      (let [read-data (read-string data)\n            data-with-id (map\n                           #(assoc (second %) :reservation-id (str (first %)))\n                           read-data)]\n\n           ;(.log js/console (str data))\n           (assoc db :calendar-data data-with-id))))\n\n\n\n(reg-event-fx\n  :remove-calendar-event\n  (fn [cofx [_ res-id]]\n    {:chsk {:event-key :calendar/remove-event\n            :data {:date (:selected-date (:db cofx))\n                   :reservation-id res-id}\n            :callback #(do\n                         (dispatch [:add-to-db {:reservation-editor nil}]))}}))\n                         ;(.log js/console (str \"visszatertem: \" %)))}}))\n\n(reg-event-fx\n :add-modify-calendar-event\n (fn [cofx [_ data]]\n   {:chsk {:event-key :calendar/add-modify-event\n           :data data\n           :callback #(do\n                        (dispatch [:add-to-db {:reservation-editor nil}]))}}))\n                        ;(.log js/console (str \"visszatertem: \" %)))}}))\n\n(reg-event-fx\n  :get-reservations-and-brakes\n  (fn [cofx [_ date]]\n      {;:db (assoc (:db cofx) :reservations nil :brakes nil)\n       :chsk {:event-key :calendar/get-reservations-and-brakes\n              :data date\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :reservations (:reservations %)])\n                           (dispatch [:assoc-data-to-key :brakes (:brakes %)]))}}))\n\n(reg-event-fx\n  :get-employees\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :employees/get-all\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :employees  (vec (sort-by :priority %))])\n                           (dispatch [:assoc-data-to-key :employees-last-order  (sort-by :priority %)]))}}))\n\n(reg-event-fx\n  :get-services\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :services/get-all\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :services (vec (sort-by :priority %))])\n                           (dispatch [:assoc-data-to-key :services-last-order (sort-by :priority %)]))}}))\n\n(reg-event-fx\n    :get-brake-types\n    (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :brakes/get-brake-types\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :brake-types %]))}}))\n\n(reg-event-fx\n  :remove-brake-type\n  (fn [_ [_ id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/remove-brake-type\n            :data {:id id}\n            :callback #(do\n\n                         (dispatch [:dec-loader])\n                         (dispatch [:remove-brake-type-local id]))}}))\n\n(reg-event-fx\n  :add-brake-type\n  (fn [_ [_ braketype]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/add-brake-type\n            :data {:braketype braketype}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:add-brake-type-local %]))}}))\n\n(reg-event-db\n  :remove-brake-type-local\n  (fn [db [_ id]]\n    (assoc db :brake-types (vec (keep #(if (not= id (:_id %)) %)\n                                      (:brake-types db))))))\n\n(reg-event-db\n  :add-brake-type-local\n  (fn [db [_ data]]\n    (assoc db :brake-types (vec (conj (:brake-types db) data)))))\n\n(reg-event-db\n  :modify-reservation\n  (fn [db [_ reservation-id with-this]]\n    (let [the-res (first (filter\n                           #(= reservation-id (:reservation-id %))\n                           (:reservations db)))\n\n          without-the-res (vec (remove\n                                 #(= % the-res)\n                                 (:reservations db)))\n          new-res (if the-res\n                    (merge the-res with-this)\n                    without-the-res)\n          with-new-res (vec (conj without-the-res new-res))]\n      (if reservation-id\n        (if\n          (not= the-res new-res)\n          (dispatch [:set-modal\n                     {:open? true\n                      :content \"Biztos m\u00f3dos\u00edtod?\"\n                      :no-fn (fn [] (dispatch [:add-to-db {:reservations (:reservations db)}]))\n                      :yes-fn (fn [] ;(update-func @edit-text)\n                                  (dispatch [:add-modify-calendar-event new-res]))}]))\n        (dispatch [:set-modal\n                   {:open? true\n                    :content \"Biztos hozz\u00e1adod?\"\n                    :no-fn (fn [] (dispatch [:add-to-db {:reservations (:reservations db)}]))\n                    :yes-fn (fn [] ;(update-func @edit-text)\n                              (dispatch [:add-modify-calendar-event with-this]))}]))\n      (assoc db :reservations with-new-res))))\n\n\n\n(reg-event-fx\n  :get-brakes-on-dates\n  (fn [_ [_ dates employees]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/get-brakes-on-dates\n            :data {:dates dates :employees employees}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:assoc-data-to-key :brakes-on-dates %]))}}))\n\n(reg-event-fx\n  :get-clients\n  (fn [cofx [_]]\n    {:dispatch [:assoc-data-to-key :clients-skip (+ 20 (if (:clients-skip (:db cofx))\n                                                         (:clients-skip (:db cofx))\n                                                         0))]\n     :chsk {:event-key :clients/get-some\n            :data {:skip (if (:clients-skip (:db cofx))\n                           (:clients-skip (:db cofx))\n                           0)}\n            :callback #(do\n                         (dispatch [:assoc-data-to-key :clients (concat\n                                                                  (:clients (:db cofx))\n                                                                  %)]))}}))\n\n\n(reg-event-fx\n  :get-clients-count\n  (fn [cofx [_]]\n    {:chsk {:event-key :clients/get-count\n            :callback #(dispatch [:assoc-data-to-key :clients-count %])}}))\n\n(reg-event-fx\n  :add-brakes-to-dates\n  (fn [cofx [_ dates employees brake-id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/add-brakes-to-dates\n            :data {:dates dates :employees employees\n                   :brakes (:brakes (first (filter #(= (:_id %) brake-id)\n                                                   (:brake-types (:db cofx)))))}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:get-brakes-on-dates dates employees]))}}))\n\n(reg-event-fx\n  :get-user-data\n  (fn [_]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :user/get\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:assoc-data-to-key :user-data %]))}}))\n\n(reg-event-fx\n  :add-new\n  (fn [_ [_ the-key]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :employee-service/add\n            :data {:the-key (str (name the-key))}\n            :callback #(do\n                         (dispatch [(keyword (str \"get-\" (name the-key)))]))}}))\n                         ;(dispatch [:assoc-data-to-key : %]))}}))\n\n(reg-event-fx\n  :remove-employee-service\n  (fn [_ [_ the-key id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :employee-service/remove\n            :data {:the-key (str (name the-key))\n                   :_id id}\n            :callback #(do\n                         (dispatch [(keyword (str \"get-\" (name the-key)))]))}}))\n\n(reg-event-fx\n  :get-opening-hours\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :shop/opening-hours\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :opening-hours %]))}}))\n\n(reg-event-db\n  :get-calendar-data\n  (fn [db [_]]\n      (dispatch [:get-opening-hours])\n      (dispatch [:get-user-data])\n      (dispatch [:get-services])\n      (dispatch [:get-employees])\n      (dispatch [:get-server-time])\n      (dispatch [:get-brake-types])\n      db))\n\n\n\n(reg-event-db\n  :netflix-counter-init\n  (fn [db [_ id]]\n    (assoc-in db [:netflix-counter id] 0)))\n\n(reg-event-db\n  :netflix-counter\n  (fn [db [_ id]]\n    (assoc-in db [:netflix-counter id] (inc (get-in  db [:netflix-counter id])))))\n\n(reg-event-db\n  :dec-loader\n  (fn [db [_]]\n    (if (= 1 (:loader-count db))\n      (let [element (.getElementById js/document \"x-loader\")]\n        (.add (.-classList element) \"animated-hide\")\n        (.setTimeout js/window\n                     #(aset (.-style element) \"display\" \"none\")\n                     1500)))\n    (assoc db :loader-count (dec (:loader-count db)))))\n\n(reg-event-db\n  :inc-loader\n  (fn [db [_]]\n    (assoc db :loader-count (inc (:loader-count db)))))\n\n(reg-event-db\n  :select-date\n  (fn [db [_ date]]\n    (dispatch [:get-reservations-and-brakes date])\n    (assoc db\n      :reservations nil\n      :brakes nil\n      :selected-date date\n      :selected-day (apply get-day-from-date\n                          (clojure.string/split date #\"-\")))))\n\n\n\n(reg-event-fx\n  :get-server-time\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :ajax {:method :get\n              :url \"/server-time\"\n              :handler #(let [date (first (read-string %))]\n                          (dispatch [:assoc-data-to-key :today date])\n                          (dispatch [:select-date date]))\n              :error-handler #(.log js/console \"Failed to get server-time\")}}))\n\n\n\n\n(reg-event-fx\n  :post-request\n  (fn [_]\n      {:ajax {:method :post\n              :url \"/post-request\"\n              :params {:callback-data \"data\"}\n              :handler #(dispatch [:add-to-db {:post-request (:params %)}])\n              :error-handler #(.log js/console (str \"Failed to post request: \" %))}}))\n\n(reg-event-fx\n  :add-to-mongo\n  (fn [_]\n      {:ajax {:method :post\n              :url \"/add-to-mongo\"\n              :handler #(.notification js/UIkit \"Added item to database\")\n              :error-handler #(.log js/console (str \"Failed to add to mongo: \" %))}}))\n\n(reg-event-fx\n  :add-user\n  (fn [_ [_ params]]\n      {:ajax {:method :post\n              :url \"/add-user\"\n              :params params\n              :handler #(.notification js/UIkit (str %))\n              :error-handler #(.log js/console (str \"Failed to add user \" %))}}))\n\n\n(reg-event-fx                 ;; part of the re-frame API\n  :initialise-db              ;; event id being handled\n\n  ;; the interceptor chain (a vector of 2 interceptors in this case)\n  [(inject-cofx :local-store-todos) ;; gets todos from localstore, and puts value into coeffects arg\n   check-spec-interceptor]          ;; after event handler runs, check app-db for correctness. Does it still match Spec?\n\n  ;; the event handler (function) being registered\n  (fn [{:keys [db local-store-todos]} _]                  ;; take 2 values from coeffects. Ignore event vector itself.\n    {:db (assoc default-db\n           :todos local-store-todos\n           :loader-count 0\n           :netflix-counter {}\n           :modal {:open? false}\n           :sidebar-open? true\n           :actual-page :calendar)}))   ;; all hail the new state to be put in app-db\n\n\n;; usage:  (dispatch [:set-showing  :active])\n;; This event is dispatched when the user clicks on one of the 3\n;; filter buttons at the bottom of the display.\n(reg-event-db      ;; part of the re-frame API\n  :set-showing     ;; event-id\n\n  ;; only one interceptor\n  [check-spec-interceptor]       ;; after event handler runs, check app-db for correctness. Does it still match Spec?\n\n  ;; handler\n  (fn [db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n    (assoc db :showing new-filter-kw)))\n\n;; NOTE: below is a rewrite of the event handler (above) using a `path` Interceptor\n;; You'll find it illuminating to compare this rewrite with the original.\n;;\n;; A `path` interceptor has BOTH a before and after action.\n;; When you create one, you supply \"a path\" into `app-db`, like:\n;; [:a :b 1]\n;; The job of \"before\" is to replace the app-db with the value\n;; of `app-db` at the nominated path. And, then, \"after\" to\n;; take the event handler returned value and place it back into\n;; app-db at the nominated path.  So the event handler works\n;; with a particular, narrower path within app-db, not all of it.\n;;\n;; So, `path` operates a little like `update-in`\n;;\n#_(reg-event-db\n   :set-showing\n\n  ;; this now a chain of 2 interceptors. Note use of `path`\n   [check-spec-interceptor (path :showing)]\n\n  ;; The event handler\n  ;; Because of the `path` interceptor above, the 1st parameter to\n  ;; the handler below won't be the entire 'db', and instead will\n  ;; be the value at the path `[:showing]` within db.\n  ;; Equally the value returned will be the new value for that path\n  ;; within app-db.\n   (fn [old-showing-value [_ new-showing-value]]\n     new-showing-value))                  ;; return new state for the path\n\n\n;; usage:  (dispatch [:add-todo  \"a description string\"])\n(reg-event-db                     ;; given the text, create a new todo\n  :add-todo\n\n  ;; Use the standard interceptors, defined above, which we\n  ;; use for all todos-modifying event handlers. Looks after\n  ;; writing todos to LocalStore, etc.\n  todo-interceptors\n\n  ;; The event handler function.\n  ;; The \"path\" interceptor in `todo-interceptors` means 1st parameter is the\n  ;; value at `:todos` path within `db`, rather than the full `db`.\n  ;; And, further, it means the event handler returns just the value to be\n  ;; put into the `[:todos]` path, and not the entire `db`.\n  ;; So, againt, a path interceptor acts like clojure's `update-in`\n  (fn [todos [_ text]]\n    (let [id (allocate-next-id todos)]\n      (assoc todos id {:id id :title text :done false}))))\n\n\n(reg-event-db\n  :toggle-done\n  todo-interceptors\n  (fn [todos [_ id]]\n    (update-in todos [id :done] not)))\n\n\n(reg-event-db\n  :save\n  todo-interceptors\n  (fn [todos [_ id title]]\n    (assoc-in todos [id :title] title)))\n\n\n(reg-event-db\n  :delete-todo\n  todo-interceptors\n  (fn [todos [_ id]]\n    (dissoc todos id)))\n\n\n(reg-event-db\n  :clear-completed\n  todo-interceptors\n  (fn [todos _]\n    (let [done-ids (->> (vals todos)         ;; which todos have a :done of true\n                        (filter :done)\n                        (map :id))]\n      (reduce dissoc todos done-ids))))      ;; delete todos which are done\n\n\n(reg-event-db\n  :complete-all-toggle\n  todo-interceptors\n  (fn [todos _]\n    (let [new-done (not-every? :done (vals todos))]   ;; work out: toggle true or false?\n      (reduce #(assoc-in %1 [%2 :done] new-done)\n              todos\n              (keys todos)))))\n"]}