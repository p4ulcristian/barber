{"version":3,"sources":["barber/events.cljs"],"mappings":"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","names":["barber.events/get-day-from-date","year","month","day","date","js/Date","day-code","G__74278","p__74279","map__74280","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","barber.events/ajax-get","url","handler","error-handler","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","p__74282","map__74283","barber.events/ajax-post","params","ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic","p__74285","map__74286","barber.events/chsk-send","event-key","data","callback","G__74288","G__74289","G__74290","barber.sente/chsk-send!","reply","taoensso.sente/cb-success?","js/console","barber.events/check-and-throw","a-spec","db","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/explain-str","barber.events/check-spec-interceptor","G__74291","re-frame.core/after","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","barber.events/->local-store","barber.db/todos->local-store","barber.events/todo-interceptors","G__74292","re-frame.core/path","barber.events/allocate-next-id","todos","G__74294","fexpr__74293","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/last","cljs.core/keys","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__74295","vec__74296","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","the-map","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__74299","vec__74300","new-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","barber.events/insert-at-index","idx","coll","value","vec__74303","start","end","cljs.core/split-at","new-vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","barber.events/remove-at-index","pos","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","barber.events/anim-to","element","timeout","js/TweenMax","cljs.core/clj->js","barber.events/modify-position-in-vec","index-first","index-second","barber.events/reindex","p1__74307#","p2__74306#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","barber.events/new-order","type","event-object","map__74308","event-map","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","source","destination","source-id","destination-id","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__74311","vec__74312","cofx","the-key","G__74315","cljs.core/Keyword","cljs.core/name","p1__74310#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__74316","vec__74317","id","to-change","cljs.core/assoc-in","cljs.core/first","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","val","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__74320","vec__74321","G__74324","G__74325","re-frame.core/dispatch","barber.events/key-plus-str","the-str","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/str","cljs.core/rest","p__74326","vec__74327","p__74330","vec__74331","modal-content","map__74334","fexpr__74338","the-db","and__4120__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__74337","fexpr__74336","p__74339","vec__74340","G__74343","G__74344","re-frame.core/reg-fx","config","G__74345","G__74346","G__74347","p__74349","vec__74350","read-data","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","data-with-id","p1__74348#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p__74353","vec__74354","res-id","G__74357","p__74358","vec__74359","G__74362","p__74364","vec__74365","p1__74363#","G__74368","G__74369","G__74370","p1__74371#","G__74372","G__74373","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","G__74374","p1__74375#","G__74376","G__74377","G__74378","p1__74379#","G__74380","G__74381","p__74382","vec__74383","G__74386","G__74387","p__74389","vec__74390","p1__74388#","braketype","G__74393","G__74394","p__74396","vec__74397","p1__74395#","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","p__74400","vec__74401","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__74406","vec__74407","reservation-id","with-this","the-res","p1__74404#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","without-the-res","p1__74405#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","new-res","with-new-res","G__74410","G__74411","G__74412","G__74413","G__74414","G__74415","p__74417","vec__74418","p1__74416#","dates","employees","G__74421","G__74422","p__74424","vec__74425","p1__74423#","G__74428","p__74430","vec__74431","p1__74429#","G__74434","p__74436","vec__74437","brake-id","p1__74435#","G__74440","G__74441","p1__74442#","G__74443","G__74444","p__74445","vec__74446","G__74449","p__74450","vec__74451","G__74454","p1__74455#","G__74456","G__74457","p__74458","vec__74459","G__74462","G__74463","G__74464","G__74465","G__74466","G__74467","p__74468","vec__74469","p__74472","vec__74473","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__74476","vec__74477","js/document","js/window","p__74480","vec__74481","p__74484","vec__74485","G__74488","clojure.string.split.cljs$core$IFn$_invoke$arity$2","p1__74489#","G__74490","G__74491","p1__74492#","p1__74493#","G__74494","p1__74495#","js/UIkit","p__74498","vec__74499","p1__74496#","p1__74497#","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__74502","re-frame.core/inject-cofx","p__74503","map__74504","local-store-todos","barber.db/default-db","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","p__74506","vec__74507","new-filter-kw","p__74510","vec__74511","text","p__74514","vec__74515","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__74518","vec__74519","title","p__74522","vec__74523","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","done-ids","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","new-done","cljs.core/not-every?","p1__74526#","p2__74527#"],"sourcesContent":["(ns barber.events\n  (:require\n    [barber.db    :refer [default-db todos->local-store]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx path after dispatch reg-fx]]\n    [cljs.spec.alpha :as s]\n    [barber.sente :as sente]\n    [ajax.core :refer [GET POST]]\n    [taoensso.sente  :refer (cb-success?)]\n    [cljs.reader :as reader :refer [read-string]]))\n\n\n(defn get-day-from-date [year month day]\n  (let [date (new js/Date year (dec month) day)\n        day-code (.getDay date)]\n    (case day-code\n      1 :monday\n      2 :tuesday\n      3 :wednesday\n      4 :thursday\n      5 :friday\n      6 :saturday\n      0 :sunday\n      :unknown)))\n\n\n(defn ajax-get [{:keys [url handler error-handler]}]\n  (GET url\n    {:handler handler\n     :error-handler error-handler}))\n\n\n(defn ajax-post [{:keys [url handler error-handler params]}]\n  (POST url\n    {:handler handler\n     :params params\n     :error-handler error-handler}))\n\n\n(defn chsk-send [{:keys [event-key data callback]}]\n ;(.notification js/UIkit \"Chsk event!\")\n       (sente/chsk-send! [event-key data] 8000\n            (fn [reply]\n                (if (cb-success? reply)\n                    (callback reply)\n                    (.log js/console \"Sente error: \" reply)))))\n\n\n;; -- Interceptors --------------------------------------------------------------\n;;\n;; Interceptors are a more advanced topic. So, we're plunging into the deep\n;; end here.\n;;\n;; There is a tutorial on Interceptors in re-frame's `/docs`, but to get\n;; you going fast, here's a very high level description ...\n;;\n;; Every event handler can be \"wrapped\" in a chain of interceptors. A\n;; \"chain of interceptors\" is actually just a \"vector of interceptors\". Each\n;; of these interceptors can have a `:before` function and an `:after` function.\n;; Each interceptor wraps around the \"handler\", so that its `:before`\n;; is called before the event handler runs, and its `:after` runs after\n;; the event handler has run.\n;;\n;; Interceptors with a `:before` action, can be used to \"inject\" values\n;; into what will become the `coeffects` parameter of an event handler.\n;; That's a way of giving an event handler access to certain resources,\n;; like values in LocalStore.\n;;\n;; Interceptors with an `:after` action, can, among other things,\n;; process the effects produced by the event handler. One could\n;; check if the new value for `app-db` correctly matches a Spec.\n;;\n\n\n;; -- First Interceptor ------------------------------------------------------\n;;\n;; Event handlers change state, that's their job. But what happens if there's\n;; a bug in the event handler and it corrupts application state in some subtle way?\n;; Next, we create an interceptor called `check-spec-interceptor`.\n;; Later, we use this interceptor in the interceptor chain of all event handlers.\n;; When included in the interceptor chain of an event handler, this interceptor\n;; runs `check-and-throw` `after` the event handler has finished, checking\n;; the value for `app-db` against a spec.\n;; If the event handler corrupted the value for `app-db` an exception will be\n;; thrown. This helps us detect event handler bugs early.\n;; Because all state is held in `app-db`, we are effectively validating the\n;; ENTIRE state of the application after each event handler runs.  All of it.\n\n\n(defn check-and-throw\n  \"Throws an exception if `db` doesn't match the Spec `a-spec`.\"\n  [a-spec db]\n  (when-not (s/valid? a-spec db)\n    (throw (ex-info (str \"spec check failed: \" (s/explain-str a-spec db)) {}))))\n\n;; now we create an interceptor using `after`\n(def check-spec-interceptor (after (partial check-and-throw :barber.db/db)))\n\n\n;; -- Second Interceptor -----------------------------------------------------\n;;\n;; Part of the TodoMVC challenge is to store todos in local storage.\n;; Next, we define an interceptor to help with this challenge.\n;; This interceptor runs `after` an event handler, and it stores the\n;; current todos into local storage.\n;; Later, we include this interceptor into the interceptor chain\n;; of all event handlers which modify todos.  In this way, we ensure that\n;; every change to todos is written to local storage.\n(def ->local-store (after todos->local-store))\n\n\n;; -- Interceptor Chain ------------------------------------------------------\n;;\n;; Each event handler can have its own chain of interceptors.\n;; We now create the interceptor chain shared by all event handlers\n;; which manipulate todos.\n;; A chain of interceptors is a vector of interceptors.\n;; Explanation of the `path` Interceptor is given further below.\n(def todo-interceptors [check-spec-interceptor    ;; ensure the spec is still valid  (after)\n                        (path :todos)             ;; the 1st param given to handler will be the value from this path within db\n                        ->local-store])            ;; write todos to localstore  (after)\n\n\n;; -- Helpers -----------------------------------------------------------------\n\n(defn allocate-next-id\n  \"Returns the next todo id.\n  Assumes todos are sorted.\n  Returns one more than the current largest id.\"\n  [todos]\n  ((fnil inc 0) (last (keys todos))))\n\n\n;; -- Event Handlers ----------------------------------------------------------\n\n;; usage:  (dispatch [:initialise-db])\n;;\n;; This event is dispatched in the app's `main` (core.cljs).\n;; It establishes initial application state in `app-db`.\n;; That means merging:\n;;   1. Any todos stored in LocalStore (from the last session of this app)\n;;   2. Default initial values\n;;\n;; Advanced topic:  we inject the todos currently stored in LocalStore\n;; into the first, coeffect parameter via use of the interceptor\n;;    `(inject-cofx :local-store-todos)`\n;;\n;; To fully understand this advanced topic, you'll have to read the tutorials\n;; and look at the bottom of `db.cljs` for the `:local-store-todos` cofx\n;; registration.\n\n\n\n(reg-event-db\n  :add-to-db\n  (fn [db [_ the-map]]\n    (merge db the-map)))\n\n\n\n(reg-event-db\n  :set-modal\n  (fn [db [_ new-state]]\n    (assoc db :modal\n              (merge (:modal db)\n                     new-state))))\n\n\n\n\n(defn insert-at-index [idx coll value]\n  (let [[start end] (split-at idx coll)\n        new-vec (concat start [value] end)]\n    new-vec))\n\n(defn remove-at-index [coll pos]\n  (vec (concat (subvec coll 0 pos)\n               (subvec coll (inc pos)))))\n\n\n(defn anim-to [element timeout the-map]\n  (.to js/TweenMax element timeout (clj->js the-map)))\n\n\n(defn modify-position-in-vec [coll index-first index-second]\n  (let [value (get coll index-first)]\n    (insert-at-index index-second\n                     (remove-at-index coll index-first)\n                     value)))\n\n(defn reindex [coll]\n  (vec (map-indexed\n         #(assoc %2 :priority %1)\n         coll)))\n\n\n(defn new-order [coll type event-object]\n  (let [event-map (js->clj event-object :keywordize-keys true)\n        {:keys [source destination]} event-map\n        source-id (:index source)\n        destination-id (:index destination)]\n    (if destination-id (vec (reindex (modify-position-in-vec coll source-id destination-id)))\n                       coll)))\n\n\n(reg-event-fx\n  :modify-positions\n  (fn [cofx [_ the-key]]\n    {:chsk {:event-key (case the-key\n                         :employees :employees/modify-positions\n                         :services :services/modify-positions\n                         :error)\n            :data {:key (name the-key)\n                   :new-order (mapv #(assoc {}\n                                       :_id (:_id %)\n                                       :priority (:priority %))\n                                (get (:db cofx) the-key))}}}))\n            ;:callback #(do\n            ;             (.log js/console (str %))}}}))\n\n\n(reg-event-db\n  :modify-local-item\n  (fn [db [_ the-key id to-change value]]\n    (assoc-in db [the-key (first (keep-indexed\n                                   (fn [idx val]\n                                     (if (= id (:_id val))\n                                         idx\n                                         nil))\n                                   (get db the-key)))\n                  to-change]\n              value)))\n\n(reg-event-fx\n  :modify-item\n  (fn [cofx [_ the-key to-change id value]]\n    {:chsk {:event-key (case the-key\n                         :employees :employees/modify-item\n                         :services :services/modify-item\n                         :error)\n            :data {:key (name the-key)\n                   :to-change to-change\n                   :_id id\n                   :value value}\n            :callback #(do\n                         (dispatch [:modify-local-item the-key id to-change value]))}}))\n\n\n(defn key-plus-str [the-key the-str]\n  (keyword (apply str (rest (str the-key the-str)))))\n\n(reg-event-db\n  :restore-positions\n  (fn [db [_ the-key]]\n    (assoc db the-key (get\n                        db\n                        (key-plus-str the-key \"-last-order\")))))\n\n\n(reg-event-db\n  :drag-end\n  (fn [db [_ type event-object modal-content]]\n    (let [event-map (js->clj event-object :keywordize-keys true)\n          {:keys [source destination]} event-map\n          source-id (:index source)\n          destination-id (:index destination)]\n      (-> db\n        ((fn [the-db] (if (and destination-id (not= source-id destination-id))\n                        (assoc the-db :modal modal-content)\n                        the-db)))\n        ((fn [the-db]\n           (if destination-id\n             (do\n               (assoc the-db (key-plus-str type \"-last-order\") (get db type))\n               (assoc the-db type (new-order (vec (get db type)) type event-object)))\n             the-db)))))))\n\n(reg-event-db\n  :assoc-data-to-key\n  (fn [db [_ the-key the-map]]\n      (assoc db the-key the-map)))\n\n\n(reg-fx\n  :ajax\n  (fn [config]\n    (case (:method config)\n      :get (ajax-get config)\n      :post (ajax-post config)\n      (.log js/console (str \":ajax :method does not exist.\")))))\n\n(reg-fx\n  :chsk\n  (fn [params]\n    (chsk-send params)))\n\n(reg-event-fx\n  :ws-server-time\n  (fn [_]\n    {:chsk {}}))\n\n(reg-event-db\n  :add-calendar-data\n  (fn [db [_ data]]\n      (let [read-data (read-string data)\n            data-with-id (map\n                           #(assoc (second %) :reservation-id (str (first %)))\n                           read-data)]\n\n           ;(.log js/console (str data))\n           (assoc db :calendar-data data-with-id))))\n\n\n\n(reg-event-fx\n  :remove-calendar-event\n  (fn [cofx [_ res-id]]\n    {:chsk {:event-key :calendar/remove-event\n            :data {:date (:selected-date (:db cofx))\n                   :reservation-id res-id}\n            :callback #(do\n                         (dispatch [:add-to-db {:reservation-editor nil}]))}}))\n                         ;(.log js/console (str \"visszatertem: \" %)))}}))\n\n(reg-event-fx\n :add-modify-calendar-event\n (fn [cofx [_ data]]\n   {:chsk {:event-key :calendar/add-modify-event\n           :data data\n           :callback #(do\n                        (dispatch [:add-to-db {:reservation-editor nil}]))}}))\n                        ;(.log js/console (str \"visszatertem: \" %)))}}))\n\n(reg-event-fx\n  :get-reservations-and-brakes\n  (fn [cofx [_ date]]\n      {;:db (assoc (:db cofx) :reservations nil :brakes nil)\n       :chsk {:event-key :calendar/get-reservations-and-brakes\n              :data date\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :reservations (:reservations %)])\n                           (dispatch [:assoc-data-to-key :brakes (:brakes %)]))}}))\n\n(reg-event-fx\n  :get-employees\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :employees/get-all\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :employees  (vec (sort-by :priority %))])\n                           (dispatch [:assoc-data-to-key :employees-last-order  (sort-by :priority %)]))}}))\n\n(reg-event-fx\n  :get-services\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :services/get-all\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :services (vec (sort-by :priority %))])\n                           (dispatch [:assoc-data-to-key :services-last-order (sort-by :priority %)]))}}))\n\n(reg-event-fx\n    :get-brake-types\n    (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :brakes/get-brake-types\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :brake-types %]))}}))\n\n(reg-event-fx\n  :remove-brake-type\n  (fn [_ [_ id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/remove-brake-type\n            :data {:id id}\n            :callback #(do\n\n                         (dispatch [:dec-loader])\n                         (dispatch [:remove-brake-type-local id]))}}))\n\n(reg-event-fx\n  :add-brake-type\n  (fn [_ [_ braketype]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/add-brake-type\n            :data {:braketype braketype}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:add-brake-type-local %]))}}))\n\n(reg-event-db\n  :remove-brake-type-local\n  (fn [db [_ id]]\n    (assoc db :brake-types (vec (keep #(if (not= id (:_id %)) %)\n                                      (:brake-types db))))))\n\n(reg-event-db\n  :add-brake-type-local\n  (fn [db [_ data]]\n    (assoc db :brake-types (vec (conj (:brake-types db) data)))))\n\n(reg-event-db\n  :modify-reservation\n  (fn [db [_ reservation-id with-this]]\n    (let [the-res (first (filter\n                           #(= reservation-id (:reservation-id %))\n                           (:reservations db)))\n\n          without-the-res (vec (remove\n                                 #(= % the-res)\n                                 (:reservations db)))\n          new-res (if the-res\n                    (merge the-res with-this)\n                    without-the-res)\n          with-new-res (vec (conj without-the-res new-res))]\n      (if reservation-id\n        (if\n          (not= the-res new-res)\n          (dispatch [:set-modal\n                     {:open? true\n                      :content \"Biztos m\u00f3dos\u00edtod?\"\n                      :no-fn (fn [] (dispatch [:add-to-db {:reservations (:reservations db)}]))\n                      :yes-fn (fn [] ;(update-func @edit-text)\n                                  (dispatch [:add-modify-calendar-event new-res]))}]))\n        (dispatch [:set-modal\n                   {:open? true\n                    :content \"Biztos hozz\u00e1adod?\"\n                    :no-fn (fn [] (dispatch [:add-to-db {:reservations (:reservations db)}]))\n                    :yes-fn (fn [] ;(update-func @edit-text)\n                              (dispatch [:add-modify-calendar-event with-this]))}]))\n      (assoc db :reservations with-new-res))))\n\n\n\n(reg-event-fx\n  :get-brakes-on-dates\n  (fn [_ [_ dates employees]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/get-brakes-on-dates\n            :data {:dates dates :employees employees}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:assoc-data-to-key :brakes-on-dates %]))}}))\n\n(reg-event-fx\n  :get-clients\n  (fn [cofx [_]]\n    {:dispatch [:assoc-data-to-key :clients-skip (+ 20 (if (:clients-skip (:db cofx))\n                                                         (:clients-skip (:db cofx))\n                                                         0))]\n     :chsk {:event-key :clients/get-some\n            :data {:skip (if (:clients-skip (:db cofx))\n                           (:clients-skip (:db cofx))\n                           0)}\n            :callback #(do\n                         (dispatch [:assoc-data-to-key :clients (concat\n                                                                  (:clients (:db cofx))\n                                                                  %)]))}}))\n\n\n(reg-event-fx\n  :get-clients-count\n  (fn [cofx [_]]\n    {:chsk {:event-key :clients/get-count\n            :callback #(dispatch [:assoc-data-to-key :clients-count %])}}))\n\n(reg-event-fx\n  :add-brakes-to-dates\n  (fn [cofx [_ dates employees brake-id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :brakes/add-brakes-to-dates\n            :data {:dates dates :employees employees\n                   :brakes (:brakes (first (filter #(= (:_id %) brake-id)\n                                                   (:brake-types (:db cofx)))))}\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:get-brakes-on-dates dates employees]))}}))\n\n(reg-event-fx\n  :get-user-data\n  (fn [_]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :user/get\n            :callback #(do\n                         (dispatch [:dec-loader])\n                         (dispatch [:assoc-data-to-key :user-data %]))}}))\n\n(reg-event-fx\n  :add-new\n  (fn [_ [_ the-key]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :employee-service/add\n            :data {:the-key (str (name the-key))}\n            :callback #(do\n                         (dispatch [(keyword (str \"get-\" (name the-key)))]))}}))\n                         ;(dispatch [:assoc-data-to-key : %]))}}))\n\n(reg-event-fx\n  :remove-employee-service\n  (fn [_ [_ the-key id]]\n    {:dispatch [:inc-loader]\n     :chsk {:event-key :employee-service/add\n            :data {:the-key (str (name the-key))\n                   :_id id}\n            :callback #(do\n                         (dispatch [(keyword (str \"get-\" (name the-key)))]))}}))\n\n(reg-event-fx\n  :get-opening-hours\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :chsk {:event-key :shop/opening-hours\n              :callback #(do\n                           (dispatch [:dec-loader])\n                           (dispatch [:assoc-data-to-key :opening-hours %]))}}))\n\n(reg-event-db\n  :get-calendar-data\n  (fn [db [_]]\n      (dispatch [:get-opening-hours])\n      (dispatch [:get-user-data])\n      (dispatch [:get-services])\n      (dispatch [:get-employees])\n      (dispatch [:get-server-time])\n      (dispatch [:get-brake-types])\n      db))\n\n\n\n(reg-event-db\n  :netflix-counter-init\n  (fn [db [_ id]]\n    (assoc-in db [:netflix-counter id] 0)))\n\n(reg-event-db\n  :netflix-counter\n  (fn [db [_ id]]\n    (assoc-in db [:netflix-counter id] (inc (get-in  db [:netflix-counter id])))))\n\n(reg-event-db\n  :dec-loader\n  (fn [db [_]]\n    (if (= 1 (:loader-count db))\n      (let [element (.getElementById js/document \"x-loader\")]\n        (.add (.-classList element) \"animated-hide\")\n        (.setTimeout js/window\n                     #(aset (.-style element) \"display\" \"none\")\n                     1500)))\n    (assoc db :loader-count (dec (:loader-count db)))))\n\n(reg-event-db\n  :inc-loader\n  (fn [db [_]]\n    (assoc db :loader-count (inc (:loader-count db)))))\n\n(reg-event-db\n  :select-date\n  (fn [db [_ date]]\n    (dispatch [:get-reservations-and-brakes date])\n    (assoc db\n      :reservations nil\n      :brakes nil\n      :selected-date date\n      :selected-day (apply get-day-from-date\n                          (clojure.string/split date #\"-\")))))\n\n\n\n(reg-event-fx\n  :get-server-time\n  (fn [_]\n      {:dispatch [:inc-loader]\n       :ajax {:method :get\n              :url \"/server-time\"\n              :handler #(let [date (first (read-string %))]\n                          (dispatch [:assoc-data-to-key :today date])\n                          (dispatch [:select-date date]))\n              :error-handler #(.log js/console \"Failed to get server-time\")}}))\n\n\n\n\n(reg-event-fx\n  :post-request\n  (fn [_]\n      {:ajax {:method :post\n              :url \"/post-request\"\n              :params {:callback-data \"data\"}\n              :handler #(dispatch [:add-to-db {:post-request (:params %)}])\n              :error-handler #(.log js/console (str \"Failed to post request: \" %))}}))\n\n(reg-event-fx\n  :add-to-mongo\n  (fn [_]\n      {:ajax {:method :post\n              :url \"/add-to-mongo\"\n              :handler #(.notification js/UIkit \"Added item to database\")\n              :error-handler #(.log js/console (str \"Failed to add to mongo: \" %))}}))\n\n(reg-event-fx\n  :add-user\n  (fn [_ [_ params]]\n      {:ajax {:method :post\n              :url \"/add-user\"\n              :params params\n              :handler #(.notification js/UIkit (str %))\n              :error-handler #(.log js/console (str \"Failed to add user \" %))}}))\n\n\n(reg-event-fx                 ;; part of the re-frame API\n  :initialise-db              ;; event id being handled\n\n  ;; the interceptor chain (a vector of 2 interceptors in this case)\n  [(inject-cofx :local-store-todos) ;; gets todos from localstore, and puts value into coeffects arg\n   check-spec-interceptor]          ;; after event handler runs, check app-db for correctness. Does it still match Spec?\n\n  ;; the event handler (function) being registered\n  (fn [{:keys [db local-store-todos]} _]                  ;; take 2 values from coeffects. Ignore event vector itself.\n    {:db (assoc default-db\n           :todos local-store-todos\n           :loader-count 0\n           :netflix-counter {}\n           :modal {:open? false}\n           :sidebar-open? true\n           :actual-page :calendar)}))   ;; all hail the new state to be put in app-db\n\n\n;; usage:  (dispatch [:set-showing  :active])\n;; This event is dispatched when the user clicks on one of the 3\n;; filter buttons at the bottom of the display.\n(reg-event-db      ;; part of the re-frame API\n  :set-showing     ;; event-id\n\n  ;; only one interceptor\n  [check-spec-interceptor]       ;; after event handler runs, check app-db for correctness. Does it still match Spec?\n\n  ;; handler\n  (fn [db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n    (assoc db :showing new-filter-kw)))\n\n;; NOTE: below is a rewrite of the event handler (above) using a `path` Interceptor\n;; You'll find it illuminating to compare this rewrite with the original.\n;;\n;; A `path` interceptor has BOTH a before and after action.\n;; When you create one, you supply \"a path\" into `app-db`, like:\n;; [:a :b 1]\n;; The job of \"before\" is to replace the app-db with the value\n;; of `app-db` at the nominated path. And, then, \"after\" to\n;; take the event handler returned value and place it back into\n;; app-db at the nominated path.  So the event handler works\n;; with a particular, narrower path within app-db, not all of it.\n;;\n;; So, `path` operates a little like `update-in`\n;;\n#_(reg-event-db\n   :set-showing\n\n  ;; this now a chain of 2 interceptors. Note use of `path`\n   [check-spec-interceptor (path :showing)]\n\n  ;; The event handler\n  ;; Because of the `path` interceptor above, the 1st parameter to\n  ;; the handler below won't be the entire 'db', and instead will\n  ;; be the value at the path `[:showing]` within db.\n  ;; Equally the value returned will be the new value for that path\n  ;; within app-db.\n   (fn [old-showing-value [_ new-showing-value]]\n     new-showing-value))                  ;; return new state for the path\n\n\n;; usage:  (dispatch [:add-todo  \"a description string\"])\n(reg-event-db                     ;; given the text, create a new todo\n  :add-todo\n\n  ;; Use the standard interceptors, defined above, which we\n  ;; use for all todos-modifying event handlers. Looks after\n  ;; writing todos to LocalStore, etc.\n  todo-interceptors\n\n  ;; The event handler function.\n  ;; The \"path\" interceptor in `todo-interceptors` means 1st parameter is the\n  ;; value at `:todos` path within `db`, rather than the full `db`.\n  ;; And, further, it means the event handler returns just the value to be\n  ;; put into the `[:todos]` path, and not the entire `db`.\n  ;; So, againt, a path interceptor acts like clojure's `update-in`\n  (fn [todos [_ text]]\n    (let [id (allocate-next-id todos)]\n      (assoc todos id {:id id :title text :done false}))))\n\n\n(reg-event-db\n  :toggle-done\n  todo-interceptors\n  (fn [todos [_ id]]\n    (update-in todos [id :done] not)))\n\n\n(reg-event-db\n  :save\n  todo-interceptors\n  (fn [todos [_ id title]]\n    (assoc-in todos [id :title] title)))\n\n\n(reg-event-db\n  :delete-todo\n  todo-interceptors\n  (fn [todos [_ id]]\n    (dissoc todos id)))\n\n\n(reg-event-db\n  :clear-completed\n  todo-interceptors\n  (fn [todos _]\n    (let [done-ids (->> (vals todos)         ;; which todos have a :done of true\n                        (filter :done)\n                        (map :id))]\n      (reduce dissoc todos done-ids))))      ;; delete todos which are done\n\n\n(reg-event-db\n  :complete-all-toggle\n  todo-interceptors\n  (fn [todos _]\n    (let [new-done (not-every? :done (vals todos))]   ;; work out: toggle true or false?\n      (reduce #(assoc-in %1 [%2 :done] new-done)\n              todos\n              (keys todos)))))\n"]}